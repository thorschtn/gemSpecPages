<?xml version="1.0" encoding="UTF-8"?>
<requirements>
  <requirement id="GS-A_3080" type="implementationRequirement" severity="SOLL" lastUpdate="2019-04-23" technicalID="ML-7852" revision="539800">
    <title><![CDATA[asymmetrischen Schlüssel maximale Gültigkeitsdauer]]></title>
    <description><![CDATA[Die Lebensdauer von asymmetrischen Schlüsseln und somit die in einem 
Zertifikat angegebene Gültigkeitsdauer SOLL maximal 5 Jahre betragen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Die Lebensdauer von asymmetrischen Schl&uuml;sseln und somit die in einem Zertifikat angegebene G&uuml;ltigkeit</span><span>s</span><span>dauer SOLL maximal 5 Jahre betragen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4357-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-01" technicalID="ML-135540" revision="539800">
    <title><![CDATA[X.509-Identitäten für die Erstellung und Prüfung digitaler nicht-qualifizierter elektronischer Signaturen]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten bei der Erstellung oder Prüfung 
digitaler nicht-qualifizierter elektronischer Signaturen verwenden, MÜSSEN die 
in Tab_KRYPT_002 aufgeführten Algorithmen unterstützen und die Tabellenvorgaben 
erfüllen.
Produkttypen, die Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration „ECDSA“ ausstellen (vgl. Abschnitt 5.1) oder verwenden, 
MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die X.509-Identitäten bei der Erstellung oder Prüfung digitaler nicht-qualifizierter elektronischer Signaturen verwenden, MÜSSEN die in Tab_KRYPT_002 aufgeführten Algorithmen unterstützen und die Tabellenvorgaben erfüllen. <br/>Produkttypen, die Zertifikate (X.509-Identitäten) auf Basis der Schlüsselgeneration „ECDSA“ ausstellen (vgl. Abschnitt 5.1) oder verwenden, MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben erfüllen. <br/>]]></description_html>
  </requirement>
  <requirement id="A_15590" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-76959" revision="539800">
    <title><![CDATA[Zertifikatslaufzeit bei Erstellung von X.509-Zertifikaten mit RSA 2048 Bit]]></title>
    <description><![CDATA[Ein TSP-X.509-nonQES, der X.509-Zertifikate erstellt auf Basis der 
Schlüsselgeneration „RSA“ (d. h., für den die Vorgaben aus Tab_KRYPT_002 
gelten), MUSS das Ende der Zertifikatsgültigkeitsdauer für das auszustellende 
Zertifikat unabhängig von der in Tab_KRYPT_002 festgelegten Endedaten der 
Zulässigkeit der verwendeten RSA-Schlüssellängen festlegen.]]></description>
    <description_html><![CDATA[<div style="margin-left: 7.1pt;"> </div>
 Ein TSP-X.509-nonQES, der X.509-Zertifikate erstellt auf Basis der Schlüsselgeneration „RSA“ (d. h., für den die Vorgaben aus Tab_KRYPT_002 gelten), MUSS das Ende der Zertifikatsgültigkeitsdauer für das auszustellende Zertifikat unabhängig von der in Tab_KRYPT_002 festgelegten Endedaten der Zulässigkeit der verwendeten RSA-Schlüssellängen festlegen.<div style="margin-left: 7.1pt;"></div>]]></description_html>
  </requirement>
  <requirement id="A_22220" type="leafRequirement" severity="KANN" lastUpdate="2022-10-18" technicalID="ML-124725" revision="539800">
    <title><![CDATA[Konnektor: zulässige Algorithmen und Domainparameter bei Zertifikatsprüfungen]]></title>
    <description><![CDATA[Ein Konnektor KANN bei einer Zertifikatsprüfung alle im SOGIS-Katalog 
[SOGIS-2020] als zulässig aufgeführten kryptographischen Signaturverfahren 
inkl. der dem jeweiligen Verfahren zugehörigen Domainparametern 
(Mindestschlüssellängen, Kurvenparameter etc.) für eine Zertifikatsprüfung 
verwenden, sofern die Angaben aus [gemSpec_Krypt#Tab_KRYPT_002 und _002a (und 
auch _003 und _003a)] als Mindestvorgaben (Mindestschlüssellängen, 
Mindestgrößen der Kurvenparameter etc.) eingehalten werden. ]]></description>
    <description_html><![CDATA[Ein Konnektor KANN bei einer Zertifikatsprüfung alle im SOGIS-Katalog [SOGIS-2020] als zulässig aufgeführten kryptographischen Signaturverfahren inkl. der dem jeweiligen Verfahren zugehörigen Domainparametern (Mindestschlüssellängen, Kurvenparameter etc.) für eine Zertifikatsprüfung verwenden<span style="font-size: 10pt;line-height: 1.5;">, sofern die Angaben aus [gemSpec_Krypt#Tab_KRYPT_002 und _002a (und auch _003 und _003a)] als Mindestvorgaben (Mindestschlüssellängen, Mindestgrößen der Kurvenparameter etc.) eingehalten werden. </span>]]></description_html>
  </requirement>
  <requirement id="A_19073" type="leafRequirement" severity="MUSS" lastUpdate="2020-07-15" technicalID="ML-102837" revision="539800">
    <title><![CDATA[Feste Laufzeit CV-Zertifikate einer Karte (eGK/HBA/SMC-B)]]></title>
    <description><![CDATA[Die Anbieter CVC-TSP eGK, Anbieter HBA und Anbieter SMC-B MÜSSEN CV-Zertifikate 
tagesgenau in der Laufzeit auf die am kürzest gültigen X.509-Zertifikate der 
"Schlüsselgeneration ECDSA" der Karte beschränken.
 Sind keine X.509-Zertifikate der "Schlüsselgeneration ECDSA" auf der Karte 
vorgesehen, dann MUSS die Laufzeit auf die am kürzest gültigen 
X.509-Zertifikate der "Schlüsselgeneration RSA" der Karte beschränkt werden.]]></description>
    <description_html><![CDATA[Die Anbieter CVC-TSP eGK, Anbieter HBA und Anbieter SMC-B MÜSSEN CV-Zertifikate tagesgenau in der Laufzeit auf die am kürzest gültigen X.509-Zertifikate der &quot;Schlüsselgeneration ECDSA&quot; der Karte beschränken.<br/> Sind keine X.509-Zertifikate der &quot;Schlüsselgeneration ECDSA&quot; auf der Karte vorgesehen, dann MUSS die Laufzeit auf die am kürzest gültigen X.509-Zertifikate der &quot;Schlüsselgeneration RSA&quot; der Karte beschränkt werden.]]></description_html>
  </requirement>
  <requirement id="A_19173" type="leafRequirement" severity="MUSS" lastUpdate="2021-05-17" technicalID="ML-103083" revision="539800">
    <title><![CDATA[Feste Laufzeit X.509-Zertifikate einer Karte (eGK/HBA/SMC-B)]]></title>
    <description><![CDATA[Der Anbieter HBA, Anbieter SMC-B und der Anbieter X.509 TSP eGK MÜSSEN alle 
X.509-Zertifikate der "Schlüsselgeneration ECDSA" der Karte tagesgenau in der 
Laufzeit auf die der am längsten gültigen CV-Zertifikate der Karte beschränken. 
Sind keine X.509-Zertifikate der "Schlüsselgeneration ECDSA" auf der Karte 
vorgesehen, dann MUSS die Laufzeit aller X.509-Zertifikate der 
"Schlüsselgeneration RSA" der Karte tagesgenau in der Laufzeit auf die der am 
längsten gültigen CV-Zertifikate der Karte beschränkt werden.]]></description>
    <description_html><![CDATA[Der Anbieter HBA, Anbieter SMC-B und der Anbieter X.509 TSP eGK MÜSSEN alle X.509-Zertifikate der &quot;Schlüsselgeneration ECDSA&quot; der Karte tagesgenau in der Laufzeit auf die der am längsten gültigen CV-Zertifikate der Karte beschränken. Sind keine X.509-Zertifikate der &quot;Schlüsselgeneration ECDSA&quot; auf der Karte vorgesehen, dann MUSS die Laufzeit aller X.509-Zertifikate der &quot;Schlüsselgeneration RSA&quot; der Karte tagesgenau in der Laufzeit auf die der am längsten gültigen CV-Zertifikate der Karte beschränkt werden.]]></description_html>
  </requirement>
  <requirement id="A_23139" type="leafRequirement" severity="MUSS" lastUpdate="2022-11-27" technicalID="ML-133686" revision="539800">
    <title><![CDATA[TSP-X.509-nonQES: ECC-Kurvenparameter, Komplexitätsreduktion]]></title>
    <description><![CDATA[Ein TSP-X.509-nonQES, der nicht die X.509-Root-CA der TI ist, MUSS 
sicherstellen, dass

 * ein öffentlicher ECC-Schlüssel im CA-Zertifikat, 
 * die öffentlichen ECC-Schlüssel der zum CA-Zertifikat aus (1) zugehörigen 
OCSP-Zertifikate (vgl. [RFC-6960#4.2.2.2] bzw. A_23142), und 
 * die öffentlichen ECC-EE-Schlüssel in den EE-Zertifikate, die durch die CA 
mit dem Schlüssel aus (1) prüfbar sind,  die gleichen Kurvenparameter 
(brainpoolP256r1, P-256 etc. vgl. [gemSpec_Krypt#Tab_KRYPT_002a]) besitzen.]]></description>
    <description_html><![CDATA[Ein TSP-X.509-nonQES, der nicht die X.509-Root-CA der TI ist, MUSS sicherstellen, dass<br/>
 
<ol>
  <li>ein öffentlicher ECC-Schlüssel im CA-Zertifikat,</li>
  <li>die öffentlichen ECC-Schlüssel der zum CA-Zertifikat aus (1) zugehörigen OCSP-Zertifikate (vgl. [RFC-6960#4.2.2.2] bzw. A_23142), und</li>
  <li>die öffentlichen ECC-EE-Schlüssel in den EE-Zertifikate, die durch die CA mit dem Schlüssel aus (1) prüfbar sind,</li>
</ol>
die gleichen Kurvenparameter (brainpoolP256r1, P-256 etc. vgl. [gemSpec_Krypt#Tab_KRYPT_002a]) besitzen.<span style="background-color: #FFFF99;"><br/>
</span>]]></description_html>
  </requirement>
  <requirement id="GS-A_4358" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7858" revision="539800">
    <title><![CDATA[X.509-Identitäten für die Erstellung und Prüfung qualifizierter elektronischer Signaturen]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten für die Erstellung oder Prüfung von 
qualifizierten elektronischen Signaturen verwenden, MÜSSEN mindestens alle in 
Tabelle Tab_KRYPT_003 aufgeführten Algorithmen unterstützen und die Tabellenvorg
aben erfüllen.    
TSP-X.509-QES, die qualifizierte Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration „ECDSA“ (vgl. Abschnitt5.1) erstellen oder verwenden MÜSSEN 
die in Tab_KRYPT_003a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Identit&auml;ten f&uuml;r die Erstellung oder Pr&uuml;fung von quali</span><span>fizierten elektronischen Signaturen verwenden, M&Uuml;SSEN mindestens alle in Tabe</span><span>l</span><span>le Tab_KRYPT_003 aufgef&uuml;hrten Algorithmen unterst&uuml;tzen und die Tabellenvorg</span><span>a</span><span>ben e</span><span>r</span><span>f&uuml;llen.</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span><br>TSP-X.509-QES</span><span>, die qualifizierte Zertifikate (X.509-Identit&auml;ten) auf Basis der Schl&uuml;sselgeneration &bdquo;ECDSA&ldquo; (vgl. Abschnitt </span><span></span><span></span><span></span><span style="background-color: #FFFF00;"></span><span style="background-color: #FFFF00;"></span><span>5.1</span><span></span><span>) erstellen </span><span>oder verwenden</span><span> M&Uuml;</span><span>S</span><span>SEN die in Tab_KRYPT_003a au</span><span>f</span><span>gef&uuml;hrten Algorithmen und die Tabellenvorgaben erf&uuml;llen.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4359" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7860" revision="539800">
    <title><![CDATA[X.509-Identitäten für die Durchführung einer TLS-Authentifizierung]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten für eine TLS-Authentifizierung verwen
den, MÜSSEN alle in Tab_KRYPT_002 aufgeführten Algorithmen unterstützen und die 
Tabellenanforderungen erfüllen.    
Produkttypen die Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration „ECDSA“ausstellen (vgl. Abschnitt 5.1) oder verwenden, 
MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Identit&auml;ten f&uuml;r eine TLS-Authentifizierung ver</span><span>we</span><span>n</span><span>den, M&Uuml;SSEN alle in Tab_KRYPT_002 aufgef&uuml;hrten Algorithmen unterst&uuml;tzen und die Tabellenanforderungen erf&uuml;llen.</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span><br></span><span>Produkttypen die Zertifikate (X.509-Identit&auml;ten) auf Basis der Schl&uuml;sselgeneration &bdquo;ECDSA&ldquo; </span><span>ausstellen </span><span>(vgl. Abschnitt </span><span></span><span></span><span></span><span style="background-color: #FFFF00;"></span><span style="background-color: #FFFF00;"></span><span>5.1</span><span></span><span>)</span><span> oder verwenden,</span><span> M&Uuml;SSEN die in Tab_KRYPT_002a aufgef&uuml;hrten Algorithmen und die Tabe</span><span>l</span><span>lenvorgaben erf&uuml;llen.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="A_22457" type="leafRequirement" severity="DARF NICHT" lastUpdate="2022-10-18" technicalID="ML-126196" revision="539800">
    <title><![CDATA[TLS-Clients, Ciphersuiten bei TLS-Verbindung mit eHealth-KT]]></title>
    <description><![CDATA[Alle Produkttypen, die als TLS-Client gegenüber dem eHealth-Kartenterminal 
agieren, DÜRFEN bei beidseitig authentisierten TLS-Verbindungen NICHT 
Ciphersuiten mit Authentisierungsalgorithmen (RSA bzw. ECDSA) anbieten, wenn 
sie nicht auch für die Clientauthentisierung Schlüsselmaterial und Zertifikat 
für diese Authentisierungsalgorithmen besitzen. ]]></description>
    <description_html><![CDATA[Alle Produkttypen, die als TLS-Client gegenüber dem eHealth-Kartenterminal agieren, DÜRFEN bei beidseitig authentisierten TLS-Verbindungen NICHT Ciphersuiten mit Authentisierungsalgorithmen (RSA bzw. ECDSA) anbieten, wenn sie nicht auch für die Clientauthentisierung Schlüsselmaterial und Zertifikat für diese Authentisierungsalgorithmen besitzen. ]]></description_html>
  </requirement>
  <requirement id="GS-A_4360" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7862" revision="539800">
    <title><![CDATA[X.509-Identitäten für die Durchführung der IPsec-Authentifizierung]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten für eine IPsec-Authentifizierung verwe
nden, MÜSSEN alle in Tab_KRYPT_002 aufgeführten Algorithmen unterstützen und 
die Tabellenanforderungen erfüllen.    
Produkttypen die Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration „ECDSA“ausstellen (vgl. Abschnitt 5.1) oder verwenden, 
MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Identit&auml;ten f&uuml;r eine IPsec-Authentifizierung verwe</span><span>n</span><span>den, M&Uuml;SSEN alle in Tab_KRYPT_002 aufgef&uuml;hrten Algorithmen unterst&uuml;tzen und die Tabellenanforderungen erf&uuml;llen.</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span><br></span><span>Produkttypen die Zertifikate (X.509-Identit&auml;ten) auf Basis der Schl&uuml;sselgeneration &bdquo;ECDSA&ldquo; </span><span>ausstellen </span><span>(vgl. Abschnitt </span><span></span><span></span><span></span><span style="background-color: #FFFF00;"></span><span style="background-color: #FFFF00;"></span><span>5.1</span><span></span><span>)</span><span> oder verwenden,</span><span> M&Uuml;SSEN die in Tab_KRYPT_002a aufgef&uuml;hrten Algorithmen und die Tabe</span><span>l</span><span>lenvorgaben erf&uuml;llen.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4361" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7864" revision="539800">
    <title><![CDATA[X.509-Identitäten für die Erstellung und Prüfung digitaler Signaturen]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten verwenden, die zur Erstellung und 
Prüfung digitaler Signaturen in Bezug auf TI-Komponenten (technische 
X.509-Zertifikate) genutzt werden, MÜSSEN alle in Tab_KRYPT_002 aufgeführten 
Algorithmen unterstützen und die Tabellenanforderungen erfüllen.    
Produkttypen die Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration„ECDSA“ ausstellen (vgl. Abschnitt 5.1) oder verwenden, 
MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Identit&auml;ten verwenden, die zur Erste</span><span>l</span><span>lung und Pr&uuml;fung digitaler Signaturen in Bezug auf TI-Komponenten (technische X.509-Zertifikate) genutzt werden, M&Uuml;SSEN alle in Tab_KRYPT_002 aufgef&uuml;hrten Algorithmen unte</span><span>r</span><span>st&uuml;tzen und die Tabellenanforderungen erf&uuml;llen.</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span><br></span><span>Produkttypen die Zertifikate (X.509-Identit&auml;ten) auf Basis der Schl&uuml;sselgeneration </span><span>&bdquo;ECDSA&ldquo; </span><span>ausstellen </span><span>(vgl. Abschnitt </span><span></span><span></span><span></span><span style="background-color: #FFFF00;"></span><span style="background-color: #FFFF00;"></span><span>5.1</span><span></span><span>)</span><span> oder verwenden,</span><span> M&Uuml;SSEN die in Tab_KRYPT_002a aufgef&uuml;hrten Algorithmen und die Tabe</span><span>l</span><span>lenvorgaben erf&uuml;llen.</span><span style="font-weight: bolder;"> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4362" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7866" revision="539800">
    <title><![CDATA[X.509-Identitäten für Verschlüsselungszertifikate]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Identitäten für die Verschlüsselung 
(Verschlüsselungszertifikate) verwenden, MÜSSEN alle in Tab_KRYPT_002 
aufgeführten Algorithmen unterstützten und die Tabellenanforderungen erfüllen.
    
Produkttypen die Zertifikate (X.509-Identitäten) auf Basis der 
Schlüsselgeneration „ECDSA“ausstellen (vgl. Abschnitt 5.1) oder verwenden, 
MÜSSEN die in Tab_KRYPT_002a aufgeführten Algorithmen und die Tabellenvorgaben 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Identit&auml;ten f&uuml;r die Verschl&uuml;sselung (Verschl&uuml;sselung</span><span>s</span><span>zertifikate) verwenden, M&Uuml;SSEN alle in Tab_KRYPT_002 aufgef&uuml;hrten A</span><span>l</span><span>gorithmen unterst&uuml;tzten und die Tabellenanforderungen erf&uuml;llen.</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span><br></span><span>Produkttypen die Zertifikate (X.509-Identit&auml;ten) auf Basis der Schl&uuml;sselgeneration &bdquo;ECDSA&ldquo; </span><span>ausstellen </span><span>(vgl. Abschnitt </span><span></span><span></span><span></span><span style="background-color: #FFFF00;"></span><span style="background-color: #FFFF00;"></span><span>5.1</span><span></span><span>)</span><span> oder verwenden,</span><span> M&Uuml;SSEN die in Tab_KRYPT_002a aufgef&uuml;hrten Algorithmen und die Tabe</span><span>l</span><span>lenvorgaben erf&uuml;llen.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4365" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7873" revision="539800">
    <title><![CDATA[CV-Zertifikate G2]]></title>
    <description><![CDATA[Alle Produkttypen, die CV-Zertifikate der Kartengeneration G2 erstellen oder 
prüfen, MÜSSEN die in Tab_KRYPT_006 aufgeführten Algorithmen verwenden und die 
Tabellenanforderungen erfüllen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die CV-Zertifikate der Kartengeneration G2 erstellen oder prüfen, MÜSSEN die in Tab_KRYPT_006 aufgeführten Algorithmen verwenden und die Tabellenanforderungen erfüllen.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4366" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7875" revision="539800">
    <title><![CDATA[CV-CA-Zertifikate G2]]></title>
    <description><![CDATA[Alle Produkttypen, die CV-CA-Zertifikate der Kartengeneration G2 erstellen oder 
prüfen, MÜSSEN dien Tab_KRYPT_007 aufgeführten Algorithmen verwenden und die 
Tabellenanforderungen erfüllen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die CV-CA-Zertifikate der Kartengeneration G2 erstellen oder prüfen, MÜSSEN dien Tab_KRYPT_007 aufgeführten Algorithmen verwenden und die Tabellenanforderungen erfüllen.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4367" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-7877" revision="539800">
    <title><![CDATA[Zufallszahlengenerator]]></title>
    <description><![CDATA[Alle Produkttypen, die Zufallszahlen generieren, MÜSSEN die Anforderungen aus 
[BSI-TR-03116-1#3.8 Erzeugung von Zufallszahlen] erfüllen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Zufallszahlen generieren, MÜSSEN die Anforderungen aus [BSI-TR-03116-1#3.<span style="text-decoration: line-through;background-color: #FFFF99;"></span>8 Erzeugung von Zufallszahlen] erfüllen.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4368" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-7880" revision="539800">
    <title><![CDATA[Schlüsselerzeugung]]></title>
    <description><![CDATA[Alle Produkttypen, die Schlüssel erzeugen, MÜSSEN die Anforderungen aus 
[BSI-TR-03116-1#3.9 Schlüsselerzeugung] erfüllen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Schlüssel erzeugen, MÜSSEN die Anforderungen aus [BSI-TR-03116-1#3.<span style="text-decoration: line-through;background-color: #FFFF99;"></span>9 Schlüsselerzeugung] erfüllen.]]></description_html>
  </requirement>
  <requirement id="GS-A_5021" type="leafRequirement" severity="MUSS" lastUpdate="2020-10-13" technicalID="ML-7881" revision="539800">
    <title><![CDATA[Schlüsselerzeugung bei einer Schlüsselspeicherpersonalisierung]]></title>
    <description><![CDATA[Ein Herausgeber von Sicherheitsmodulen für kryptographisches 
Schlüsselmaterial, welche in der TI genutzt werden (also bspw. eGK, SMC-B, 
HSM-B, SMC-KT und HBA), MUSS sicherstellen, dass auf dem Sicherheitsmodul 
gespeicherten Schlüssel die Anforderungen aus [BSI-TR-03116-1#3.5 Schlüssel
erzeugung] erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Ein Herausgeber von Sicherheitsmodulen f&uuml;r kryptographisches Schl&uuml;sselmaterial, welche in der TI genutzt werden (also bspw. eGK, SMC-B, HSM-B, SMC-KT und HBA), MUSS sicherstellen, dass auf dem Sicherheitsmodul gespeicherten Schl&uuml;</span><span>s</span><span>sel die Anforderungen aus [BSI-TR-03116-1#3.5 Schl&uuml;sse</span><span>l</span><span>erzeugung] erf&uuml;llen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5338" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-7882" revision="539800">
    <title><![CDATA[HBA/SMC-B – Erzeugung asymmetrischer Schlüsselpaare auf der jeweiligen Karte selbst]]></title>
    <description><![CDATA[Ein Kartenherausgeber oder, falls der Kartenherausgeber einen Dritten mit der 
Kartenpersonalisierung beauftragt, der Kartenpersonalisierer für HBA oder SMC-B 
MUSS sicherstellen, dass bei der Personalisierung der Karten HBA und SMC-B alle 
asymmetrischen Schlüsselpaare, bei denen die privaten Schlüssel auf der Karte 
gespeichert werden, auf der Karte erzeugt werden.]]></description>
    <description_html><![CDATA[<div style="margin-left: 40px;"></div>Ein Kartenherausgeber oder, falls der Kartenherausgeber einen Dritten mit der Kartenpersonalisierung beauftragt, der Kartenpersonalisierer für HBA oder SMC-B MUSS sicherstellen, dass bei der Personalisierung der Karten HBA und SMC-B alle asymmetrischen Schlüsselpaare, bei denen die privaten Schlüssel auf der Karte gespeichert werden, auf der Karte erzeugt werden. <br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5386" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-7883" revision="539800">
    <title><![CDATA[kartenindividuelle geheime und private Schlüssel G2-Karten]]></title>
    <description><![CDATA[Ein Kartenherausgeber, der G2-Karten herausgibt, MUSS sicherstellen, dass bei 
der Personalisierung der Karten alle für eine Karte zu personalisierenden 
privaten und geheimen Schlüssel kartenindividuell sind. Bei Beauftragung eines 
Dritten mit der Schlüsselerzeugung ist dies durch den Dritten 
sicherzustellen.    
 Falls symmetrische Schlüssel (bspw. SK.CMS.AES128) nicht pro Karte zufällig 
erzeugt werden, sondern mit einem Schlüsselableitungsverfahren erzeugt werden, 
so MUSS der Kartenherausgeber sicherstellen, dass

 * das verwendete Schlüsselableitungsverfahren (KDF) unumkehrbar und 
nicht-vorhersagbar ist (Hilfestellung: Beispiele in [gemSpec_Krypt, 2.4 und 
3.4]).

 * der Masterkey (Key Derivation Key (KDK)) GS-A_4368 erfüllt (insbesondere 
Entropie-Vorgaben). Der KDK MUSS eine Mindestentropie von 120 Bit besitzen.]]></description>
    <description_html><![CDATA[Ein Kartenherausgeber, der G2-Karten herausgibt, MUSS sicherstellen, dass bei der Personalisierung der Karten alle für eine Karte zu personalisierenden privaten und geheimen Schlüssel kartenindividuell sind. Bei Beauftragung eines Dritten mit der Schlüsselerzeugung ist dies durch den Dritten sicherzustellen.    <br/>
Falls symmetrische Schlüssel (bspw. SK.CMS.AES128) nicht pro Karte zufällig erzeugt werden, sondern mit einem Schlüsselableitungsverfahren erzeugt werden, so MUSS der Kartenherausgeber sicherstellen, dass<br/>
<ol>
  <li>das verwendete Schlüsselableitungsverfahren (KDF) unumkehrbar und nicht-vorhersagbar ist (Hilfestellung: Beispiele in [gemSpec_Krypt, 2.4 und 3.4]).<br/>
  </li>
  <li>der Masterkey (Key Derivation Key (KDK)) GS-A_4368 erfüllt (insbesondere Entropie-Vorgaben). Der KDK MUSS eine Mindestentropie von 120 Bit besitzen. <br/>
  </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_17294" type="leafRequirement" severity="MUSS" lastUpdate="2020-06-08" technicalID="ML-93447" revision="539800">
    <title><![CDATA[TSP-X.509: Prüfung auf angreifbare (schwache) Schlüssel]]></title>
    <description><![CDATA[Ein TSP-X.509-nonQES MUSS vor einer Zertifikatserzeugung den durch das 
Zertifikat zu bestätigenden öffentlichen Schlüssel auf dessen kryptographische 
Angreifbarkeit hin prüfen. 
 Falls die Prüfung des öffentlichen Schlüssels das Ergebnis „angreifbar“ 
liefert, so MUSS der TSP die Zertifikatserstellung für diesen Schlüssel 
ablehnen. 
 Mindestumfang der Prüfung MÜSSEN  
 * der Test auf die "Debian-OpenSSL-PRNG-Schwachstelle" und 
 * der Test auf die Anfälligkeit gegen den ROCA-Angriff sein.   Der TSP MUSS 
den Mindestumfang der Prüfung bei Bekanntwerden neuer Angriffsmöglichkeiten 
gemäß [gemSpec_DS_Anbieter#GS-A_5560] erweitern.]]></description>
    <description_html><![CDATA[Ein TSP-X.509-nonQES MUSS vor einer Zertifikatserzeugung den durch das Zertifikat zu bestätigenden öffentlichen Schlüssel auf dessen kryptographische Angreifbarkeit hin prüfen. <br/>
 Falls die Prüfung des öffentlichen Schlüssels das Ergebnis „angreifbar“ liefert, so MUSS der TSP die Zertifikatserstellung für diesen Schlüssel ablehnen. <br/>
 Mindestumfang der Prüfung MÜSSEN  
<ol>
  <li>der Test auf die &quot;Debian-OpenSSL-PRNG-Schwachstelle&quot; und</li>
  <li>der Test auf die Anfälligkeit gegen den ROCA-Angriff sein. </li>
</ol>
Der TSP MUSS den Mindestumfang der Prüfung bei Bekanntwerden neuer Angriffsmöglichkeiten gemäß [gemSpec_DS_Anbieter#GS-A_5560] erweitern.]]></description_html>
  </requirement>
  <requirement id="GS-A_5518" type="leafRequirement" severity="MUSS" lastUpdate="2019-08-29" technicalID="ML-7976" revision="539800">
    <title><![CDATA[Prüfung Kurvenpunkte bei einer Zertifikatserstellung]]></title>
    <description><![CDATA[Alle Produkttypen, die X.509-Zertifikate erstellen und dabei öffentliche 
Punkte auf einer elliptischen Kurve in diesen Zertifikaten bestätigen, MÜSSEN 
überprüfen, ob die zu bestätigenden Punkte auch auf der zugehörigen Kurve (im 
Regelfall brainpoolP256r1 [RFC-5639#3.4]) liegen. Falls nein, MUSS der 
Produkttyp eine Zertifikatsausstellung verweigern.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die X.509-Zertifikate erstellen und dabei &ouml;ffentliche Punkte auf einer elliptischen Kurve in diesen Zertifikaten best&auml;tigen, M&Uuml;SSEN &uuml;berpr&uuml;fen, ob die zu best&auml;tigenden Punkte auch auf der zugeh&ouml;rigen Kurve (im Regelfall brai</span><span>n</span><span>poolP256r1 [RFC-5639#3.4]) liegen. Falls nein, MUSS der Produkttyp eine Zertif</span><span>i</span><span>katsausstellung ve</span><span>r</span><span>weigern. </span></p>]]></description_html>
  </requirement>
  <requirement id="A_17091" type="leafRequirement" severity="MUSS" lastUpdate="2020-10-13" technicalID="ML-92600" revision="539800">
    <title><![CDATA[ECC-Schlüsselkodierung]]></title>
    <description><![CDATA[Ein TSP-X.509-nonQES MUSS sicherstellen, dass wenn er ECC-Schlüssel für eine 
Zertifikatserstellung erhält, diese in unkomprimierter Form (d. h. explizite 
Aufführung der vollständigen x- und y-Koordinaten [BSI-TR-03111#Abschnitt 3.2.1 
"Uncompressed Encoding"]) vom Antragsteller übergeben werden.]]></description>
    <description_html><![CDATA[Ein TSP-X.509-nonQES MUSS sicherstellen, dass wenn er ECC-Schlüssel für eine Zertifikatserstellung erhält, diese in unkomprimierter Form (d. h. explizite Aufführung der vollständigen x- und y-Koordinaten [BSI-TR-03111#Abschnitt 3.2.1 &quot;Uncompressed Encoding&quot;]) vom Antragsteller übergeben werden. <br/>]]></description_html>
  </requirement>
  <requirement id="A_17092" type="leafRequirement" severity="KANN" lastUpdate="2019-05-13" technicalID="ML-92601" revision="539800">
    <title><![CDATA[RSA-Schlüssel Zertifikatserstellung, keine kleinen Primteiler und e ist prim]]></title>
    <description><![CDATA[Ein TSP KANN im Rahmen der Zertifikatsbeantragung, bei denen öffentliche 
RSA-Schlüssel bestätigt werden, folgende Tests auf die RSA-Schlüssel anwenden. 
Wenn ein u. g. Test das Ergebnis FAIL als Ergebnis liefert, so ist der 
Schlüssel fehlerhaft und der TSP muss die Zertifikatserstellung für diesen 
Schlüssel ablehnen.

 * Ist der öffentliche Exponent e (des untersuchten RSA-Schlüssels) prim und 
gilt 2^16<e<2^256 (vgl. [BSI-TR-03116-1#3.2 RSA])?
 Falls nein, ist das Ergebnis FAIL.

 * Ist der Modulus des untersuchten RSA-Schlüssels kleiner als 2^2048?
 Falls nein, ist das Ergebnis FAIL.

 * Ist der Modulus des untersuchten RSA-Schlüssels relativ prim zu allen 
Primzahlen kleiner als 100?
 Falls nein, ist das Ergebnis FAIL.]]></description>
    <description_html><![CDATA[Ein TSP KANN im Rahmen der Zertifikatsbeantragung, bei denen öffentliche RSA-Schlüssel bestätigt werden, folgende Tests auf die RSA-Schlüssel anwenden. Wenn ein u. g. Test das Ergebnis FAIL als Ergebnis liefert, so ist der Schlüssel fehlerhaft und der TSP muss die Zertifikatserstellung für diesen Schlüssel ablehnen.<br/> <ol><li>Ist der öffentliche Exponent e (des untersuchten RSA-Schlüssels) prim und gilt 2^16&lt;e&lt;2^256 (vgl. [BSI-TR-03116-1#3.2 RSA])?<br/> Falls nein, ist das Ergebnis FAIL.<br/></li><li>Ist der Modulus des untersuchten RSA-Schlüssels kleiner als 2^2048?<br/> Falls nein, ist das Ergebnis FAIL.<br/></li><li>Ist der Modulus des untersuchten RSA-Schlüssels relativ prim zu allen Primzahlen kleiner als 100?<br/> Falls nein, ist das Ergebnis FAIL.<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17093" type="leafRequirement" severity="KANN" lastUpdate="2019-05-13" technicalID="ML-92602" revision="539800">
    <title><![CDATA[RSA-Schlüssel Zertifikatserstellung, Entropie der Schlüsselkodierung]]></title>
    <description><![CDATA[Ein TSP KANN im Rahmen der Zertifikatsbeantragung, bei denen öffentliche 
RSA-Schlüssel bestätigt werden, folgenden Test auf die RSA-Schlüssel anwenden. 
Wenn ein Test das Ergebnis FAIL liefert, so ist der Schlüssel fehlerhaft und 
der TSP muss die Zertifikatserstellung für diesen Schlüssel ablehnen.

 * Ist die Entropie des kodierten RSA-Schlüssels (im Sinne von [gemSpec_Krypt#
 ], entropy()-Funktion) kleiner als 6.72? Falls ja, so ist das Ergebnis FAIL.]]></description>
    <description_html><![CDATA[Ein TSP KANN im Rahmen der Zertifikatsbeantragung, bei denen öffentliche RSA-Schlüssel bestätigt werden, folgenden Test auf die RSA-Schlüssel anwenden. Wenn ein Test das Ergebnis FAIL liefert, so ist der Schlüssel fehlerhaft und der TSP muss die Zertifikatserstellung für diesen Schlüssel ablehnen.<br/> <ol><li>Ist die Entropie des kodierten RSA-Schlüssels (im Sinne von [gemSpec_Krypt#<span data-option-id="shortoutline" data-item-id="ML-95000" id="fake" data-type="crossReference" class="polarion-rte-link"></span> ], entropy()-Funktion) kleiner als 6.72? Falls ja, so ist das Ergebnis FAIL.<br/></li></ol><br/>]]></description_html>
  </requirement>
  <requirement id="A_22686" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-19" technicalID="ML-128514" revision="539800">
    <title><![CDATA[Einmalpasswörter (One-Time-Passwords, OTP), Mindestentropie]]></title>
    <description><![CDATA[Alle Produkttypen, die Einmalpasswörter (One-Time-Passwords, OTP) erzeugen, 
MÜSSEN sicherstellen, dass diese Einmalpasswörter eine Mindestentropie von 120 
Bit besitzen. D. h. sie werden zufällig erzeugt und sind mit praktischer 
Sicherheit - Wahrscheinlichkeit gleich 1 – 2^(–120)) - nicht erratbar.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Einmalpasswörter (One-Time-Passwords, OTP) erzeugen, MÜSSEN sicherstellen, dass diese Einmalpasswörter eine Mindestentropie von 120 Bit besitzen. D. h. sie werden zufällig erzeugt und sind mit praktischer Sicherheit - Wahrscheinlichkeit gleich 1 – 2^(–120)) - nicht erratbar.]]></description_html>
  </requirement>
  <requirement id="GS-A_4370" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7888" revision="539800">
    <title><![CDATA[Kryptographische Algorithmen für XML-Dokumente]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Dokumente

 * verschlüsseln, MÜSSEN dies mittels CMS [RFC-5652] oder XMLEnc durchführen,

 * signieren, MÜSSEN dies mittels CMS [RFC-5652] oder XMLDSig durchführen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die XML-Dokumente<br/>
 
<ul>
  <li>verschlüsseln, MÜSSEN dies mittels CMS <span style="text-decoration: line-through;"></span>[RFC-5652] oder XMLEnc durchführen,<br/>
    </li>
  <li>signieren, MÜSSEN dies mittels CMS <span style="text-decoration: line-through;"></span>[RFC-5652] oder XMLDSig durchführen. <br/>
    </li>
</ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_4371" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7890" revision="539800">
    <title><![CDATA[XML-Signaturen für nicht-qualifizierte Signaturen]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Signaturen für nicht-qualifizierte Signaturen 
erzeugen oder prüfen, MÜSSEN die Algorithmen und Vorgaben der Tabelle 
Tab_KRYPT_009 erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die XML-Signaturen f&uuml;r nicht-qualifizierte Signaturen erzeugen oder pr&uuml;fen, M&Uuml;SSEN die Algorithmen und Vorgaben der Tabelle Tab_KRYPT_009 e</span><span>r</span><span>f&uuml;llen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4372" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7892" revision="539800">
    <title><![CDATA[XML-Signaturen für qualifizierte elektronische Signaturen]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Signaturen für qualifizierte elektronische 
Signaturen erzeugen oder prüfen, MÜSSEN die Vorgaben der Tabelle Tab_KRYPT_010 
erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die XML-Signaturen f&uuml;r qualifizierte elektronische Signaturen e</span><span>r</span><span>zeugen oder pr&uuml;fen, M&Uuml;SSEN die Vorgaben der Tabelle Tab_KRYPT_010 erf&uuml;</span><span>l</span><span>len.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4373" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7895" revision="539800">
    <title><![CDATA[XML-Verschlüsselung - symmetrisch]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Dokumente mittels [XMLEnc-1.1] verschlüsseln, MÜS
SEN die folgenden Vorgaben umsetzen:

 * 
Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schlüssellänge 
von 256 Bit im Galois/Counter Mode (GCM) gemäß [NIST-SP-800-38D] mit der 
Tag-Länge von 128 Bit verwendet werden.

 * 
Die IVs dürfen sich bei gleichem Schlüssel nicht wiederholen (vgl. 
[NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S. 24]). Der IV soll eine Bitlänge 
von 96 Bit besitzen, seine Länge muss mindestens 96 Bit sein. Es wird empfohlen 
den IV zufällig zu wählen (vgl. [gemSpec_Krypt#GS-A_4367]).

 * 
Hinweis: Im Normalfall ist davon auszugehen, dass für die Sicherung der In
tegrität und Authentizität der übertragenen Daten zudem noch eine Signatur der 
zu verschlüsselnden Daten notwendig ist.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die XML-Dokumente mittels [XMLEnc-1.1] verschl&uuml;sseln, M&Uuml;</span><span>S</span><span>SEN die folgenden Vo</span><span>r</span><span>gaben umsetzen:</span></p><ul><li><p><span>Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schl&uuml;ssell&auml;</span><span>n</span><span>ge von 256 Bit im Galois/Counter Mode (GCM) gem&auml;&szlig; [NIST-SP-800-38D] mit der Tag-L&auml;nge von 128 Bit verwe</span><span>n</span><span>det werden.</span></p></li><li><p><span>Die IVs d&uuml;rfen sich bei gleichem Schl&uuml;ssel nicht wiederholen (vgl. [NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S. 24]). Der IV soll e</span><span>i</span><span>ne Bitl&auml;nge von 96 Bit besitzen, seine L&auml;nge muss mindestens 96 Bit sein. Es wird empfohlen den IV zuf&auml;llig zu w&auml;</span><span>h</span><span>len (vgl. [gemSpec_Krypt#GS-A_4367]).</span></p></li><li><p><span>Hinweis: Im Normalfall ist davon auszugehen, dass f&uuml;r die Sicherung der I</span><span>n</span><span>tegrit&auml;t und Authentizit&auml;t der &uuml;bertragenen Daten zudem noch eine Signatur der zu verschl&uuml;sselnden Daten notwe</span><span>n</span><span>dig ist.</span></p></li></ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_4374" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7897" revision="539800">
    <title><![CDATA[XML-Verschlüsselung - Hybrid]]></title>
    <description><![CDATA[Alle Produkttypen, die Dokumente mittels [XMLEnc-1.1] hybrid verschlüsseln, 
MÜSSEN das Dokument gemäß [gemSpec_Krypt#GS-A_4373] symmetrisch verschlüsseln, 
wobei der eingesetzte symmetrischer Schlüssel (jeweils) für eine spezifische 
Person oder Komponente asymmetrisch verschlüsselt wird.    
(Hinweis: Analog zum Hinweis in [gemSpec_Krypt#GS-A_4373] gilt auch hier, dass 
im Normalfall für die Sicherung der Integrität und Authentizität der 
übertragenen Daten zudem noch eine Signatur dieser Daten notwendig ist.)]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Dokumente mittels [XMLEnc-1.1] hybrid verschlüsseln, MÜSSEN das Dokument gemäß [gemSpec_Krypt#GS-A_4373] symmetrisch verschlüsseln, wobei der eingesetzte symmetrischer Schlüssel (jeweils) für eine spezifische Person oder Komponente asymmetrisch verschlüsselt wird.    <br/>(Hinweis: Analog zum Hinweis in [gemSpec_Krypt#GS-A_4373] gilt auch hier, dass im Normalfall für die Sicherung der Integrität und Authentizität der übertragenen Daten zudem noch eine Signatur dieser Daten notwendig ist.)<br/><br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4376-02" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-102227" revision="539800">
    <title><![CDATA[XML-Verschlüsselung - Hybrid, Schlüsseltransport RSAES-OAEP]]></title>
    <description><![CDATA[Alle Produkttypen, die Dokumente mittels [XMLEnc-1.1] RSA-basiert hybrid ver- 
und entschlüsseln, MÜSSEN für den Schlüsseltransport den Algorithmus RSAES-OAEP 
gemäß [PKCS#1] verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Dokumente mittels [XMLEnc-1.1] RSA-basiert hybrid ver- und entschlüsseln, MÜSSEN für den Schlüsseltransport den Algorithmus RSAES-OAEP gemäß [PKCS#1] verwenden.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4379" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7906" revision="539800">
    <title><![CDATA[Card-to-Card-Authentisierung G2]]></title>
    <description><![CDATA[Alle Produkttypen, die die Card-to-Card-Authentisierung für Karten der 
Generation G2 durchführen, MÜSSEN dabei eine CV-Identität gemäß 
[gemSpec_Krypt#GS-A_4365] verwenden.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die die Card-to-Card-Authentisierung f&uuml;r Karten der Generation G2 durchf&uuml;hren, M&Uuml;SSEN dabei eine CV-Identit&auml;t gem&auml;&szlig; [gemSpec_Krypt#GS-A_4365] verwenden.</span><span style="font-weight: bolder;"> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4380" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-22" technicalID="ML-7908" revision="539800">
    <title><![CDATA[Card-to-Server (C2S) Authentisierung und Trusted Channel G2]]></title>
    <description><![CDATA[Alle Produkttypen, die  eine Card-to-Server-Authentisierung für Karten der 
Generation G2 durchführen, MÜSSEN die folgenden Vorgaben berücksichtigen:

 * 
Die Authentisierung muss mit AES analog [EN-14890-1#8.8] erfolgen.

 * 
Die Schlüsselvereinbarung muss analog zu [EN-14890-1#8.8.2] erfolgen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die </span><span> eine</span><span> </span><span>Card-to-Server-Authentisierung f&uuml;r </span><span>Karten</span><span> </span><span>der Gener</span><span>a</span><span>tion G2 durchf&uuml;hren, M&Uuml;SSEN die fo</span><span>l</span><span>genden Vorgaben ber&uuml;cksichtigen:</span></p><ul><li><p><span>Die Authentisierung muss mit AES analog [EN-14890-1#8.8] erfo</span><span>l</span><span>gen</span><span>.</span></p></li><li><p><span>Die Schl&uuml;sselvereinbarung muss analog zu [EN-14890-1#8.8.2] erfo</span><span>l</span><span>gen.</span></p></li></ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_4381" type="leafRequirement" severity="MUSS" lastUpdate="2020-10-13" technicalID="ML-7909" revision="539800">
    <title><![CDATA[Schlüssellängen Algorithmus AES]]></title>
    <description><![CDATA[Alle Produkttypen, die den Algorithmus AES nutzen, MÜSSEN die Schlüssellängen 
gemäß Tabelle Tab_KRYPT_012 nutzen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die den Algorithmus AES nutzen, M&Uuml;SSEN die Schl&uuml;ssell&auml;ngen gem&auml;&szlig; Tabelle Tab_KRYPT_012 nutzen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4382-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-01" technicalID="ML-134939" revision="539800">
    <title><![CDATA[IPsec-Kontext - Schlüsselvereinbarung]]></title>
    <description><![CDATA[Alle Produkttypen, die die Authentifizierung, den Schlüsselaustausch und die 
verschlüsselte Kommunikation im IPsec-Kontext durchführen, MÜSSEN die 
Schlüsselvereinbarung mittels IKEv2 [RFC-7296] gemäß den folgenden Vorgaben 
durchführen:

 * Zur Authentisierung MUSS eine Identität mit einem X.509-Zertifikat gemäß 
[gemSpec_Krypt#GS-A_4360] verwendet werden.

 * Für „Hash und URL“ MUSS SHA-1 verwendet werden.

 * Die Diffie-Hellman-Gruppe Gruppe 14 (definiert in [RFC-3526], verwendbar 
bis Ende 2023) MUSS für den Schlüsselaustausch unterstützt werden. Zusätzlich 
KÖNNEN Gruppen aus [BSI-TR-02102-3, Abschnitt 3.2.4, Tabelle 5], bei denen der 
Verwendungszeitraum ein „+“ enthält, verwendet werden. 

 * Der private DH-Exponent für den Schlüsselaustausch MUSS eine Länge von 
mindestens 256 Bit haben.

 * Die Authentisierung der ephemeren (EC)DH-Parameter erfolgt durch eine 
Signatur der Parameter durch den jeweiligen Protokollteilnehmer. Bei dieser 
Signatur MUSS SHA-256 als Hashfunktion verwendet werden. Es SOLL die 
Authentisierungsmethode „Digital Signature“ nach [RFC-7427] dabei verwendet 
werden.

 * Bei den symmetrische Verschlüsselungsalgorithmen MUSS AES mit 256 Bit 
Schlüssellänge im CBC-Modus unterstützt werden (sowohl für IKE-Nachrichten als 
auch später für die Verschlüsselung von ESP-Paketen). Es KÖNNEN weitere 
Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.1, Tabelle 2] bzw. 
[BSI-TR-02102-3, Abschnitt 3.3.1, Tabelle 7] verwendet werden.

 * Für den Integritätsschutz (sowohl innerhalb von IKEv2 als auch anschließend 
für ESP-Pakete) MUSS HMAC mittels SHA-256 unterstützt werden. Es KÖNNEN weitere 
Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.3, Tabelle 4] bzw. 
[BSI-TR-02102-3, Abschnitt 3.3.1, Tabelle 8] verwendet werden, andere Verfahren 
dürfen nicht verwendet werden.

 * Als PRF MUSS PRF_HMAC_SHA2_256 unterstützt werden. Es KÖNNEN weitere 
Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.2, Tabelle 3] verwendet werden, 
andere Verfahren dürfen nicht verwendet werden.

 * Schlüsselaktualisierung: die IKE-Lifetime darf maximal 24*7 Stunden 
betragen (Reauthentication). Die IPsec-SA-Lifetime darf maximal 24 Stunden 
betragen (Rekeying). Der Initiator soll nach Möglichkeit vor Ablauf der 
Lifetime das Rekeying anstoßen. Ansonsten muss der Responder bei Ablauf der 
Lifetime das Rekeying von sich aus sicherstellen, bzw. falls dies nicht möglich 
ist, die Verbindung beenden.

 * Für die Schlüsselberechnung muss Forward Secrecy [BSI-TR-02102-1, S.ix] (in 
[RFC-7296] „Perfect Forward Secrecy“ genannt) gewährleistet werden. Meint die 
Wiederverwendung von zuvor schon verwendeten (EC-)Diffie-Hellman-Schlüsseln 
([RFC-7296, Abschnitt 2.12]) ist nicht erlaubt.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die die Authentifizierung, den Schlüsselaustausch und die verschlüsselte Kommunikation im IPsec-Kontext durchführen, MÜSSEN die Schlüsselvereinbarung mittels IKEv2 [RFC-7296] gemäß den folgenden Vorgaben durchführen:<br/>
 
<ul>
  <li>Zur Authentisierung MUSS eine Identität mit einem X.509-Zertifikat gemäß [gemSpec_Krypt#GS-A_4360] verwendet werden.<br/>
    </li>
  <li>Für „Hash und URL“ MUSS SHA-1 verwendet werden.<br/>
    </li>
  <li>Die Diffie-Hellman-Gruppe Gruppe 14 (definiert in [RFC-3526], verwendbar bis Ende 2023) MUSS für den Schlüsselaustausch unterstützt werden. Zusätzlich KÖNNEN Gruppen aus [BSI-TR-02102-3, Abschnitt 3.2.4, Tabelle 5], bei denen der Verwendungszeitraum ein „+“ enthält, verwendet werden. <br/>
    </li>
  <li>Der private DH-Exponent für den Schlüsselaustausch MUSS eine Länge von mindestens 256 Bit haben.<br/>
    </li>
  <li>Die Authentisierung der ephemeren (EC)DH-Parameter erfolgt durch eine Signatur der Parameter durch den jeweiligen Protokollteilnehmer. Bei dieser Signatur MUSS SHA-256 als Hashfunktion verwendet werden. Es SOLL die Authentisierungsmethode „Digital Signature“ nach [RFC-7427] dabei verwendet werden.<br/>
    </li>
  <li>Bei den symmetrische Verschlüsselungsalgorithmen MUSS AES mit 256 Bit Schlüssellänge im CBC-Modus unterstützt werden (sowohl für IKE-Nachrichten als auch später für die Verschlüsselung von ESP-Paketen). Es KÖNNEN weitere Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.1, Tabelle 2] bzw. [BSI-TR-02102-3, Abschnitt 3.3.1, Tabelle 7] verwendet werden.<br/>
    </li>
  <li>Für den Integritätsschutz (sowohl innerhalb von IKEv2 als auch anschließend für ESP-Pakete) MUSS HMAC mittels SHA-256 unterstützt werden. Es KÖNNEN weitere Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.3, Tabelle 4] bzw. [BSI-TR-02102-3, Abschnitt 3.3.1, Tabelle 8] verwendet werden, andere Verfahren dürfen nicht verwendet werden.<br/>
    </li>
  <li>Als PRF MUSS PRF_HMAC_SHA2_256 unterstützt werden. Es KÖNNEN weitere Verfahren nach [BSI-TR-02102-3, Abschnitt 3.2.2, Tabelle 3] verwendet werden, andere Verfahren dürfen nicht verwendet werden.<br/>
    </li>
  <li>Schlüsselaktualisierung: die IKE-Lifetime darf maximal 24*7 Stunden betragen (Reauthentication). Die IPsec-SA-Lifetime darf maximal 24 Stunden betragen (Rekeying). Der Initiator soll nach Möglichkeit vor Ablauf der Lifetime das Rekeying anstoßen. Ansonsten muss der Responder bei Ablauf der Lifetime das Rekeying von sich aus sicherstellen, bzw. falls dies nicht möglich ist, die Verbindung beenden.<br/>
    </li>
  <li>Für die Schlüsselberechnung muss Forward Secrecy [BSI-TR-02102-1, S.ix] (in [RFC-7296] „Perfect Forward Secrecy“ genannt) gewährleistet werden. Meint die Wiederverwendung von zuvor schon verwendeten (EC-)Diffie-Hellman-Schlüsseln ([RFC-7296, Abschnitt 2.12]) ist nicht erlaubt.</li>
</ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_5547" type="leafRequirement" severity="KANN" lastUpdate="2022-12-13" technicalID="ML-7914" revision="539800">
    <title><![CDATA[gleiche VPN-IP-Adresse nach Reauthentication]]></title>
    <description><![CDATA[Der VPN-Zugangsdienst KANN nach einer Reauthentication (vgl. GS-A_4382-* 
Spiegelstrich „Schlüsselaktualisierung“) die gleiche VPN-IP-Adresse wie vor der 
Reauthentication vergeben. Die Reauthentication ist in Bezug auf TIP1-A_4492 
nicht als „neue Verbindung/Neuaufbau des Tunnels“ zu betrachten.]]></description>
    <description_html><![CDATA[Der VPN-Zugangsdienst KANN nach einer Reauthentication (vgl. GS-A_4382-* Spiegelstrich „Schlüsselaktualisierung“) die gleiche VPN-IP-Adresse wie vor der Reauthentication vergeben. Die Reauthentication ist in Bezug auf TIP1-A_4492 nicht als „neue Verbindung/Neuaufbau des Tunnels“ zu betrachten.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5548" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-7915" revision="539800">
    <title><![CDATA[Mindestgültigkeitszeiten IKE- und IPsec-SAs (Konnektor)]]></title>
    <description><![CDATA[Der Konnektor MUSS die Konfiguration der Gültigkeitsdauern der IKE- bzw. 
IPsec-SAs auf (1) mindestens 90% und (2) kleiner als 100% der in GS-A_4382-* 
Spiegelstrich „Schlüsselaktualisierung“ aufgeführten Maximalwerte setzen.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS die Konfiguration der Gültigkeitsdauern der IKE- bzw. IPsec-SAs auf (1) mindestens 90% und (2) kleiner als 100% der in GS-A_4382-* Spiegelstrich „Schlüsselaktualisierung“ aufgeführten Maximalwerte setzen.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5549" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-7916" revision="539800">
    <title><![CDATA[Mindestgültigkeitszeiten IKE- und IPsec-SAs (VPN-Zugangsdienst)]]></title>
    <description><![CDATA[Der VPN-Zugangsdienst MUSS die Konfiguration der Gültigkeitsdauern der IKE- 
bzw. IPsec-SAs auf die in GS-A_4382-* Spiegelstrich „Schlüsselaktualisierung“ 
aufgeführten Maximalwerte setzen.]]></description>
    <description_html><![CDATA[Der VPN-Zugangsdienst MUSS die Konfiguration der Gültigkeitsdauern der IKE- bzw. IPsec-SAs auf die in GS-A_4382-* Spiegelstrich „Schlüsselaktualisierung“ aufgeführten Maximalwerte setzen.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5508" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7917" revision="539800">
    <title><![CDATA[IPsec make_before_break]]></title>
    <description><![CDATA[Alle Produkttypen, die mittels IPsec Daten schützen, MÜSSEN die 
Reauthentication (vgl. [RFC-7296#2.8.3 „Reauthentication is done by […]“]) 
durchführen, indem die neue IKE-SA aufgebaut wird bevor die bestehende IKE-SA 
gelöscht wird.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die mittels IPsec Daten schützen, MÜSSEN die Reauthentication (vgl. [RFC-7296#2.8.3 „Reauthentication is done by […]“]) durchführen, indem die neue IKE-SA aufgebaut wird bevor die bestehende IKE-SA gelöscht wird. <br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4383" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-7918" revision="539800">
    <title><![CDATA[IPsec-Kontext – Verschlüsselte Kommunikation]]></title>
    <description><![CDATA[Alle Produkttypen, die mittels IPsec-Daten schützen, MÜSSEN dies ausschließlich 
auf Grundlage der in GS-A_4382-* als zulässig aufgeführten Verfahren und 
Vorgaben tun.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die mittels IPsec-Daten schützen, MÜSSEN dies ausschließlich auf Grundlage der in GS-A_4382-* als zulässig aufgeführten Verfahren und Vorgaben tun. <br/>]]></description_html>
  </requirement>
  <requirement id="A_14652" type="leafRequirement" severity="DARF NICHT" lastUpdate="2019-10-11" technicalID="ML-98487" revision="539800">
    <title><![CDATA[SZZP-light, asymmetrischen Schlüssel maximale Gültigkeitsdauer]]></title>
    <description><![CDATA[Die Lebensdauer von asymmetrischen Schlüsseln für die IPsec-Verbindungen im 
SZZP-light sowie Sicherheitsgateway Bestandsnetze und somit die in einem 
Zertifikat angegebene Gültigkeitsdauer DARF NICHT 5 Jahre überschreiten.]]></description>
    <description_html><![CDATA[Die Lebensdauer von asymmetrischen Schlüsseln für die IPsec-Verbindungen im SZZP-light sowie Sicherheitsgateway Bestandsnetze und somit die in einem Zertifikat angegebene Gültigkeitsdauer DARF NICHT 5 Jahre überschreiten.<br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_4385" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-7920" revision="539800">
    <title><![CDATA[TLS-Verbindungen, Version 1.2]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die 
TLS-Version 1.2 [RFC-5246] unterstützen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die TLS-Version 1.2 [RFC-5246] unterstützen.<br/>]]></description_html>
  </requirement>
  <requirement id="A_18467" type="leafRequirement" severity="KANN" lastUpdate="2022-08-31" technicalID="ML-100244" revision="539800">
    <title><![CDATA[TLS-Verbindungen, Version 1.3]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, KÖNNEN die 
TLS-Version 1.3 [RFC-8446] unterstützen, falls sie

 * dabei nur nach [BSI-TR-02102-2] empfohlene Verbindungskonfigurationen 
(Handshake-Modi, (EC)DH-Gruppen, Signaturverfahren, Ciphersuiten etc.) 
verwenden, und  
 * mindestens die Ciphersuite "TSL_AES_128_GCM_SHA256" dabei unterstützen. ]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, KÖNNEN die TLS-Version 1.3 [RFC-8446] unterstützen, falls sie<br/>
 
<ol>
  <li>dabei nur nach [BSI-TR-02102-2] empfohlene Verbindungskonfigurationen (Handshake-Modi, (EC)DH-Gruppen, Signaturverfahren, Ciphersuiten etc.) verwenden, und </li>
  <li>mindestens die Ciphersuite &quot;TSL_AES_128_GCM_SHA256&quot; dabei unterstützen. </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_18464" type="leafRequirement" severity="DARF NICHT" lastUpdate="2022-08-31" technicalID="ML-100240" revision="539800">
    <title><![CDATA[TLS-Verbindungen, nicht Version 1.1]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, DÜRFEN NICHT die 
TLS-Version 1.1 [RFC-4346] unterstützen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, DÜRFEN NICHT die TLS-Version 1.1 [RFC-4346] unterstützen.]]></description_html>
  </requirement>
  <requirement id="GS-A_4387" type="leafRequirement" severity="DARF NICHT" lastUpdate="2022-11-16" technicalID="ML-7923" revision="539800">
    <title><![CDATA[TLS-Verbindungen, nicht Version 1.0]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, DÜRFEN NICHT die 
TLS-Version 1.0 unterstützen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, DÜRFEN NICHT die TLS-Version 1.0 unterstützen.]]></description_html>
  </requirement>
  <requirement id="GS-A_5035" type="leafRequirement" severity="DARF NICHT" lastUpdate="2022-09-27" technicalID="ML-7924" revision="539800">
    <title><![CDATA[Nichtverwendung des SSL-Protokolls]]></title>
    <description><![CDATA[Alle Produkttypen, die Daten über Datenleitungen übertragen wollen, DÜRFEN 
NICHT das SSL-Protokoll unterstützen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Daten über Datenleitungen übertragen wollen, DÜRFEN NICHT das SSL-Protokoll unterstützen.]]></description_html>
  </requirement>
  <requirement id="A_21275-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-116454" revision="539800">
    <title><![CDATA[TLS-Verbindungen, zulässige Hashfunktionen bei Signaturen im TLS-Handshake]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN 
sicherstellen, dass

 * sie im Rahmen der Erstellung und Prüfung von digitalen Signaturen im Rahmen 
des TLS-Handshakes ausschließlich folgende kryptographisch geeignete 
Hashfunktionen verwenden:  
 * SHA-256, SHA-384, SHA-512 [FIPS-180-4] 
 * SHA3-256, SHA3-384, SHA3-512 [FIPS-202] 
 * sie dabei mindestens SHA-256 unterstützen, (Bitte die Umsetzungshinweise in 
Bezug auf die "signature_algorithms"-Extension in gemSpec_Krypt#A_21275-* 
beachten.)]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN sicherstellen, dass<br/>
 
<ol>
  <li>sie im Rahmen der Erstellung und Prüfung von digitalen Signaturen im Rahmen des TLS-Handshakes ausschließlich folgende kryptographisch geeignete Hashfunktionen verwenden: </li>
  <ol>
    <li><span style="font-size: 10pt;line-height: 1.5;">SHA-256, SHA-384, SHA-512 [FIPS-180-4]</span></li>
    <li><span style="font-size: 10pt;line-height: 1.5;">SHA3-256, SHA3-384, SHA3-512 [FIPS-202]</span></li>
  </ol>
  <li><span style="font-size: 10pt;line-height: 1.5;">sie dabei mindestens SHA-256 unterstützen,</span></li>
</ol>
 <span style="font-size: 10pt;line-height: 1.5;">(Bitte die Umsetzungshinweise in Bezug auf die &quot;signature_algorithms&quot;-Extension in gemSpec_Krypt#A_21275-* beachten.)</span>]]></description_html>
  </requirement>
  <requirement id="GS-A_4384-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-14" technicalID="ML-134940" revision="539800">
    <title><![CDATA[TLS-Verbindungen]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die 
folgenden Vorgaben erfüllen:

 * Zur Authentifizierung MUSS eine X.509-Identität gemäß 
[gemSpec_Krypt#GS-A_4359] verwendet werden. 
 * Als Cipher-Suite MÜSSEN TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 
und TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 unterstützt werden. 
 * Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. 
"ECDHE" im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 
[FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und 
brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere 
Kurven als in GS-A_4384-* aufgeführt DÜRFEN NICHT verwendet werden. 
 * Es KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] 
unterstützt werden. ]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die folgenden Vorgaben erfüllen:<br/>
 
<ul>
  <li>Zur Authentifizierung MUSS eine X.509-Identität gemäß [gemSpec_Krypt#GS-A_4359] verwendet werden.</li>
  <li>Als Cipher-Suite MÜSSEN TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 und TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 unterstützt werden.</li>
  <li>Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. &quot;ECDHE&quot; im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 [FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven als in GS-A_4384-* aufgeführt DÜRFEN NICHT verwendet werden.</li>
  <li>Es KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] unterstützt werden. <br/>
    </li>
</ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_5541" type="leafRequirement" severity="KANN" lastUpdate="2022-12-06" technicalID="ML-7926" revision="539800">
    <title><![CDATA[TLS-Verbindungen als TLS-Klient zur Störungsampel oder SM]]></title>
    <description><![CDATA[Alle Produkttypen, die das TLS-Protokoll als TLS-Klient zur Störungsampel oder 
zum Service-Monitoring verwenden, KÖNNEN
 (1) auf die explizite Prüfung, dass der TLS-Server die (EC)DH-Gruppe für den 
ephemeren (EC)DH-Schlüsselaustausch spezifikationskonform gewählt hat (vgl. 
GS-A_4384-* und A_17124-* Punkt 4), verzichten, und (2) davon ausgehen, dass 
der TLS-Server die Auswahl der TLS-Verbindungsparameter (TLS-Version, 
TLS-Ciphersuite etc.) korrekt, i.S.v. spezifikationskonform, durchführt.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die das TLS-Protokoll als TLS-Klient zur Störungsampel oder zum Service-Monitoring verwenden, KÖNNEN <br/>
 
<div style="margin-left: 40px;">
  (1) auf die explizite Prüfung, dass der TLS-Server die (EC)DH-Gruppe für den ephemeren (EC)DH-Schlüsselaustausch spezifikationskonform gewählt hat (vgl. GS-A_4384-*<span id="polarion-comment:473"></span> und A_17124-*<span id="polarion-comment:481"></span> Punkt 4), verzichten,
</div>
<div style="margin-left: 40px;">und</div>
<div style="margin-left: 40px;"></div>
<div style="margin-left: 40px;">(2) davon ausgehen, dass der TLS-Server die Auswahl der TLS-Verbindungsparameter (TLS-Version, TLS-Ciphersuite etc.) korrekt, i.S.v. spezifikationskonform, durchführt.</div>
<div style="margin-left: 40px;"></div>]]></description_html>
  </requirement>
  <requirement id="GS-A_5580-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-102110" revision="539800">
    <title><![CDATA[TLS-Klient für betriebsunterstützende Dienste]]></title>
    <description><![CDATA[Alle Produkttypen, die das TLS-Protokoll als TLS-Klient für 
Betriebsunterstützende Dienste (Service-Monitoring, Betriebsdaten-Erfassung 
etc.) verwenden, MÜSSEN das vom Betriebsunterstützenden 
Dienst präsentierte Zertifikat prüfen. Für diese Prüfung MUSS entweder 
TUC_PKI_018 oder die vereinfachte Zertifikatsprüfung (GS-A_5581 „TUC 
 vereinfachte  Zertifikatsprüfung“ (Komponenten-PKI)) verwendet werden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die das TLS-Protokoll als TLS-Klient für <span style="font-size: 10pt;line-height: 1.5;">Betriebsunterstützende Dienste (Service-Monitoring, Betriebsdaten-Erfassung etc.)</span> verwenden, MÜSSEN das vom Betriebsunterstützenden Dienst präsentierte Zertifikat prüfen. Für diese Prüfung MUSS entweder TUC_PKI_018 oder die vereinfachte Zertifikatsprüfung (GS-A_5581 „TUC  vereinfachte  Zertifikatsprüfung“ (Komponenten-PKI)) verwendet werden.]]></description_html>
  </requirement>
  <requirement id="A_22430" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-01" technicalID="ML-126024" revision="539800">
    <title><![CDATA[TLS-Klient für betriebsunterstützende Dienste im Internet]]></title>
    <description><![CDATA[Alle Produkttypen, welche die Betriebsdatenerfassung im Internet nutzen, MÜSSEN 
prüfen, ob das von der Betriebsdatenerfassung an der Internetschnittstelle 
während des TLS-Verbindungsaufbaus präsentierte TLS-Serverzertifikat gültig ist 
(d. h. u. a. per Zertifikatsprüfung rückführbar auf ein CA-Zertifikat einer CA, 
die die "CA/Browser Forum Baseline Requirements for the Issuance and Management 
of Publicly-Trusted Certificates" (
https://cabforum.org/baseline-requirements-documents/ 
<https://cabforum.org/baseline-requirements-documents/>) erfüllt) und für den 
erwarteten FQDN ausgestellt wurde. Bei negativen Prüfergebnis MUSS der 
TLS-Verbindungsaufbau zur Betriebsdatenerfassung abgelehnt werden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, welche die Betriebsdatenerfassung im Internet nutzen, MÜSSEN prüfen, ob das von der Betriebsdatenerfassung an der Internetschnittstelle während des TLS-Verbindungsaufbaus präsentierte TLS-Serverzertifikat gültig ist (d. h. u. a. per Zertifikatsprüfung rückführbar auf ein CA-Zertifikat einer CA, die die &quot;CA/Browser Forum Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates&quot; (<a target="_top" href="https://cabforum.org/baseline-requirements-documents/">https://cabforum.org/baseline-requirements-documents/</a>) erfüllt) und für den erwarteten FQDN ausgestellt wurde. Bei negativen Prüfergebnis MUSS der TLS-Verbindungsaufbau zur Betriebsdatenerfassung abgelehnt werden.]]></description_html>
  </requirement>
  <requirement id="GS-A_5581" type="leafRequirement" severity="MUSS" lastUpdate="2022-02-03" technicalID="ML-74423" revision="539800">
    <title><![CDATA["TUC vereinfachte Zertifikatsprüfung“ (Komponenten-PKI)]]></title>
    <description><![CDATA[Alle  Produkttypen,  die  eine  Zertifikatsprüfung konform  zu  in  dieser 
 Anforderung  definierten „TUC vereinfachte Zertifikatsprüfung“ durchführen 
wollen, erreichen dies indem sie folgende Vorgaben erfüllen.
 (1) Es MUSS einen Prozess geben der authentisch und integer die 
Komponenten-CA-Zertifikate der TI regelmäßig (mindestens einmal pro Monat) 
ermittelt. Diese sind Basis für die folgenden Prüfschritte. 
 (2) Es MUSS geprüft werden, ob im vom TLS-Server präsentierten Zertifikat der 
korrekte  (i.  S.  v.  vom  TLS-Client  erwartete)  FQDN  enthalten  ist  
(bspw.  monitoring-update.stampel.telematik).
 (3) Es MUSS geprüft werden, ob das präsentierte Zertifikat per 
Signaturprüfung rückführbar ist zu einem der CA-Zertifikate aus (1).
 (4) Es MUSS geprüft werden, ob das präsentierte Zertifikat zeitlich gültig 
ist.

 Wenn einer der Prüfschritte aus (2) bis (4) fehlschlägt, MUSS der 
Verbindungsaufbau abgebrochen werden.  

 Es gibt GS-A_5581 folgend in gemSpec_Krypt Anwendungshinweise.]]></description>
    <description_html><![CDATA[Alle  Produkttypen,  die  eine  Zertifikatsprüfung konform  zu  in  dieser  Anforderung  definierten „TUC vereinfachte Zertifikatsprüfung“ durchführen wollen, erreichen dies indem sie folgende Vorgaben erfüllen. <br/>
 (1) Es MUSS einen Prozess geben der authentisch und integer die Komponenten-CA-Zertifikate der TI regelmäßig (mindestens einmal pro Monat) ermittelt. Diese sind Basis für die folgenden Prüfschritte. <br/>
 (2) Es MUSS geprüft werden, ob im vom TLS-Server präsentierten Zertifikat der korrekte  (i.  S.  v.  vom  TLS-Client  erwartete)  FQDN  enthalten  ist  (bspw.  monitoring-update.stampel.telematik). <br/>
 (3) Es MUSS geprüft werden, ob das präsentierte Zertifikat per Signaturprüfung rückführbar ist zu einem der CA-Zertifikate aus (1). <br/>
 (4) Es MUSS geprüft werden, ob das präsentierte Zertifikat zeitlich gültig ist.<br/>
 <br/>
 Wenn einer der Prüfschritte aus (2) bis (4) fehlschlägt, MUSS der Verbindungsaufbau abgebrochen werden.  <br/>
 <br/>
 Es gibt GS-A_5581 folgend in gemSpec_Krypt Anwendungshinweise.]]></description_html>
  </requirement>
  <requirement id="GS-A_5542" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-7927" revision="539800">
    <title><![CDATA[TLS-Verbindungen (fatal Alert bei Abbrüchen)]]></title>
    <description><![CDATA[Alle Produkttypen, die das TLS-Protokoll verwenden, MÜSSEN sicherstellen, dass 
alle von ihnen durchgeführten Verbindungsabbrüche (egal ob im noch laufenden 
TLS-Handshake oder in einer schon etablierten TLS-Verbindung) mit einer im 
TLS-Protokoll aufgeführten Fehlermeldung (fataler Alert) angekündigt werden, 
außer das TLS-Protokoll untersagt dies explizit.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die das TLS-Protokoll verwenden, M&Uuml;SSEN sicherstellen, dass alle von ihnen durchgef&uuml;hrten Verbindungsabbr&uuml;che (egal ob im noch laufenden TLS-Handshake oder in einer schon etablierten TLS-Verbindung) mit einer im TLS-Protokoll aufgef&uuml;hrten Fehlermeldung (fataler Alert) angek&uuml;ndigt werden, au&szlig;er das TLS-Protokoll unte</span><span>rsagt dies explizi</span><span>t.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5322" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-7928" revision="539800">
    <title><![CDATA[Weitere Vorgaben für TLS-Verbindungen]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN u. a. 
folgende Vorgaben erfüllen:

 * Falls der Produkttyp als Klient oder als Server im Rahmen von TLS an einer 
Session-Resumption mittels SessionID (vgl. [RFC-5246, Abschnitt 7.4.1.2]) 
teilnimmt, MUSS er sicherstellen, dass nach spätestens 24 Stunden das über den 
Diffie-Hellman-Schlüsselaustausch ausgehandelte Schlüsselmaterial und alles 
davon abgeleitete Schlüsselmaterial (vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) 
bei ihm sicher gelöscht wird.

 * Falls der Produkttyp als Klient im Rahmen von TLS an einer 
Session-Resumption nach [RFC-5077] teilnimmt, MUSS er sicherstellen, dass nach 
spätestens 24 Stunden das über den Diffie-Hellman-Schlüsselaustausch 
ausgehandelte Schlüsselmaterial und alles davon abgeleitete Schlüsselmaterial 
(vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) bei ihm sicher gelöscht wird. Damit 
verbundene SessionTickets MUSS er ebenfalls sicher löschen.

 * Falls der Produkttyp als Server im Rahmen von TLS an einer 
Session-Resumption nach [RFC-5077] teilnimmt, MUSS er sicherstellen, dass nach 
spätestens 24 Stunden das über den Diffie-Hellman-Schlüsselaustausch 
ausgehandelte Schlüsselmaterial und alles davon abgeleitete Schlüsselmaterial 
(vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) bei ihm sicher gelöscht wird. Damit 
verbundene SessionTickets MUSS er, falls bei ihm vorhanden, sicher löschen. Das 
Schlüsselmaterial, dass bei der Erzeugung des SessionTickets (für die Sicherung 
von Vertraulichkeit und Authentizität der SessionTickets) verwendet wird, MUSS 
spätestens alle 48 Stunden gewechselt werden und das alte Material MUSS sicher 
gelöscht werden. Als kryptographische Verfahren zur Erzeugung/Sicherung der 
SessionTickets MÜSSEN ausschließlich nach [BSI-TR-03116-1] zulässige Verfahren 
verwendet werden und das Schlüsselmaterial muss die Entropieanforderungen gemäß 
[gemSpec_Krypt#GS-A_4368] erfüllen.

 * Falls ein Produkttyp als Klient oder Server im Rahmen von TLS die 
Renegotiation unterstützt, so MUSS er dies ausschließlich nach [RFC-5746] tun. 
Ansonsten MUSS er die Renegotiation-Anfrage des Kommunikationspartners ablehnen.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN u. a. folgende Vorgaben erfüllen:<br/>
<ul>
  <li>Falls der Produkttyp als <span style="font-style: italic;">Klient</span> oder als <span style="font-style: italic;">Server</span> im Rahmen von TLS an einer Session-Resumption mittels SessionID (vgl. [RFC-5246, Abschnitt 7.4.1.2]) teilnimmt, MUSS er sicherstellen, dass nach spätestens 24 Stunden das über den Diffie-Hellman-Schlüsselaustausch ausgehandelte Schlüsselmaterial und alles davon abgeleitete Schlüsselmaterial (vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) bei ihm sicher gelöscht wird.<br/>
  </li>
  <li>Falls der Produkttyp als <span style="font-style: italic;">Klient</span> im Rahmen von TLS an einer Session-Resumption nach [RFC-5077] teilnimmt, MUSS er sicherstellen, dass nach spätestens 24 Stunden das über den Diffie-Hellman-Schlüsselaustausch ausgehandelte Schlüsselmaterial und alles davon abgeleitete Schlüsselmaterial (vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) bei ihm sicher gelöscht wird. Damit verbundene SessionTickets MUSS er ebenfalls sicher löschen.<br/>
  </li>
  <li>Falls der Produkttyp als <span style="font-style: italic;">Server</span> im Rahmen von TLS an einer Session-Resumption nach [RFC-5077] teilnimmt, MUSS er sicherstellen, dass nach spätestens 24 Stunden das über den Diffie-Hellman-Schlüsselaustausch ausgehandelte Schlüsselmaterial und alles davon abgeleitete Schlüsselmaterial (vgl. [RFC-5246, Abschnitt 8.1 und 6.3]) bei ihm sicher gelöscht wird. Damit verbundene SessionTickets MUSS er, falls bei ihm vorhanden, sicher löschen. Das Schlüsselmaterial, dass bei der Erzeugung des SessionTickets (für die Sicherung von Vertraulichkeit und Authentizität der SessionTickets) verwendet wird, MUSS spätestens alle 48 Stunden gewechselt werden und das alte Material MUSS sicher gelöscht werden. Als kryptographische Verfahren zur Erzeugung/Sicherung der SessionTickets MÜSSEN ausschließlich nach [BSI-TR-03116-1] zulässige Verfahren verwendet werden und das Schlüsselmaterial muss die Entropieanforderungen gemäß [gemSpec_Krypt#GS-A_4368] erfüllen.<br/>
  </li>
  <li>Falls ein Produkttyp als <span style="font-style: italic;">Klient</span> oder <span style="font-style: italic;">Server</span> im Rahmen von TLS die Renegotiation unterstützt, so MUSS er dies ausschließlich nach [RFC-5746] tun. Ansonsten MUSS er die Renegotiation-Anfrage des Kommunikationspartners ablehnen.</li>
</ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_5524" type="leafRequirement" severity="MUSS" lastUpdate="2020-10-13" technicalID="ML-7929" revision="539800">
    <title><![CDATA[TLS-Renegotiation eHealth-KT]]></title>
    <description><![CDATA[Das eHealth-KT MUSS beim einen TLS-Verbindungsaufbau die TLS-Extension „re
negotiation_info“ gemäß [RFC-5746] senden, unabhängig davon ob das eHealth-KT 
TLS-Renegotiation unterstützt oder nicht unterstützt. Im weiteren 
TLS-Protokollverlauf MUSS das eHealth-KT eines der beiden folgenden Verhalten au
fweisen:

 * 
Entweder das eHealth-KT lehnt jede Renegotiation mit einem 
„no_renegotiation“-Alert ab, oder

 * 
das eHealth-KT unterstützt die Renegotiation gemäß [RFC-5746], wobei 
ausschließlich „Secure Renegotiation“ durch das eHealth-KT akzeptiert werden 
(d.h., falls das „secure_renegotiation“-flag [RFC-5746#3.7] gleich FALSE ist, 
muss das KT die Renegotiation mit einem „no_renegotiation“-Alert ablehnen).]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Das eHealth-KT MUSS beim einen TLS-Verbindungsaufbau die TLS-Extension &bdquo;r</span><span>e</span><span>negotiation_info&ldquo; gem&auml;&szlig; [RFC-5746] senden, unabh&auml;ngig davon ob das eHealth-KT TLS-Renegotiation unterst&uuml;tzt oder nicht unterst&uuml;tzt. Im weiteren TLS-Protokollverlauf MUSS das eHealth-KT eines der beiden folgenden Verhalten au</span><span>f</span><span>weisen:</span></p><ol><li><p><span>Entweder das eHealth-KT lehnt jede Renegotiation mit einem &bdquo;no_renegotiation&ldquo;-Alert ab, oder</span></p></li><li><p><span>das eHealth-KT unterst&uuml;tzt die Renegotiation gem&auml;&szlig; [RFC-5746], wobei ausschlie&szlig;lich &bdquo;Secure Renegotiation&ldquo; durch das eHealth-KT akzeptiert werden (d.h., falls das &bdquo;secure_renegotiation&ldquo;-flag [RFC-5746#3.7] gleich FALSE ist, muss das KT die Renegotiation mit einem &bdquo;no_renegotiation&ldquo;-Alert ablehnen). </span></p></li></ol>]]></description_html>
  </requirement>
  <requirement id="GS-A_5525" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7930" revision="539800">
    <title><![CDATA[TLS-Renegotiation Konnektor]]></title>
    <description><![CDATA[Der Konnektor MUSS den RFC 5746 (TLS-Renegotiation-Indication-Extension 
[RFC-5746]) unterstützen und nur „Secure Renegotiation“ erlauben und durchfüh
ren.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Der Konnektor MUSS den RFC 5746 (TLS-Renegotiation-Indication-Extension [RFC-5746]) unterst&uuml;tzen und nur &bdquo;Secure Renegotiation&ldquo; erlauben und durchf&uuml;</span><span>h</span><span>ren.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5526" type="leafRequirement" severity="SOLL" lastUpdate="2022-09-27" technicalID="ML-7931" revision="539800">
    <title><![CDATA[TLS-Renegotiation-Indication-Extension]]></title>
    <description><![CDATA[Alle Produkttypen, die das TLS-Protokoll verwenden, SOLLEN den RFC 5746 
(TLS-Renegotiation-Indication-Extension [RFC-5746]) unterstützen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die das TLS-Protokoll verwenden, SOLLEN den RFC 5746 (TLS-Renegotiation-Indication-Extension [RFC-5746]) unterst&uuml;tzen. </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5527" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-7932" revision="539800">
    <title><![CDATA[TLS-Renegotiation-Indication-Extension Intermediär]]></title>
    <description><![CDATA[Der Intermediär MUSS den RFC 5746 (TLS-Renegotiation-Indication-Extension 
[RFC-5746]) unterstützen und nur „Secure Renegotiation“ erlauben und durchfüh
ren.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Der Intermedi&auml;r MUSS den RFC 5746 (TLS-Renegotiation-Indication-Extension [RFC-5746]) unterst&uuml;tzen und nur &bdquo;Secure Renegotiation&ldquo; erlauben und durchf&uuml;</span><span>h</span><span>ren.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5345-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-134941" revision="539800">
    <title><![CDATA[TLS-Verbindungen Konnektor]]></title>
    <description><![CDATA[Der Konnektor MUSS für die TLS gesicherten Verbindungen neben den in 
[gemSpec_Krypt#GS-A_4384-*] aufgeführten Ciphersuiten folgende Vorgaben 
umsetzen:


 * Der Konnektor MUSS zusätzlich folgende Ciphersuiten unterstützen:

 * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xC0, 0x27),

 * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xC0, 0x28),

 * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2f) und

 * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30).

 * Der Konnektor KANN weitere Ciphersuiten aus [TR-02102-2, Abschnitt 3.3.1 
Tabelle 1] unterstützen.

 * Falls Ciphersuiten aus Spiegelstrich (1) oder (2) unterstützt werden,

 *     MÜSSEN bei dem ephemeren 
Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch die Kurven P-256 und P-384 
[FIPS-186-4] unterstützt werden,

 *     MÜSSEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] 
und [RFC-7027]) unterstützt werden.
   Andere Kurven SOLLEN NICHT verwendet werden. 
 * Falls Ciphersuiten aus (1) oder (2) unterstützt werden, so MÜSSEN diese im 
CC-Zertifizierungsverfahren berücksichtigt werden.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS für die TLS gesicherten Verbindungen neben den in [gemSpec_Krypt#GS-A_4384-*]<span id="polarion-comment:474"></span> aufgeführten Ciphersuiten folgende Vorgaben umsetzen:<br/>
 <br/>
 
<ol>
  <li>Der Konnektor MUSS zusätzlich folgende Ciphersuiten unterstützen:<br/>
    </li>
</ol>
 
<div style="margin-left: 2em;">
  
  <ul>
    <li><span style="font-size: 10pt;line-height: 1.5;">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xC0, 0x27)<span style="font-family: Arial, Helvetica, sans-serif;">,</span><br/>
        </span></li>
    <li><span style="font-size: 10pt;line-height: 1.5;">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xC0, 0x28)<span style="font-family: Arial, Helvetica, sans-serif;">,</span><br/>
        </span></li>
    <li><span style="font-size: 10pt;line-height: 1.5;">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2f) <span style="font-family: Arial, Helvetica, sans-serif;">und</span><br/>
        </span></li>
    <li><span style="font-size: 10pt;line-height: 1.5;">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30)<span style="font-family: Arial, Helvetica, sans-serif;">.</span><br/>
        </span></li>
  </ul>
  
</div>
 
<ol class="continue">
  <li>Der Konnektor KANN <span style="color: #000000;">weitere Ciphersuiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] unterstützen.</span><br/>
    </li>
  <li><span style="color: #000000;">Falls Ciphersuiten aus Spiegelstrich (1) oder (2) unterstützt werden,</span><br/>
    </li>
  <ol>
    <li><span style="color: #000000;">    MÜSSEN bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch die Kurven P-256 und P-384 [FIPS-186-4] unterstützt werden,</span><br/>
      </li>
    <li><span style="color: #000000;">    MÜSSEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden.</span><br/>
      </li>
  </ol>
</ol>
 
<div style="margin-left: 40px;">
  <span style="color: #000000;">   Andere Kurven SOLLEN NICHT verwendet werden.</span> 
</div>
 
<ol class="continue">
  <li><span style="color: #000000;">Falls Ciphersuiten aus (1) oder (2) unterstützt werden, so MÜSSEN diese im CC-Zertifizierungsverfahren berücksichtigt werden.</span><br/>
    </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_23226" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-07" technicalID="ML-134470" revision="539800">
    <title><![CDATA[TLS-Verbindung, Konnektor: Legacy-KT-Unterstützung]]></title>
    <description><![CDATA[Der Konnektor MUSS für die Unterstützung von alten eHealth-KT folgende 
TLS-Vorgaben ebenfalls unterstützen:

 * Als Cipher Suite MUSS TLS_DHE_RSA_WITH_AES_128_CBC_SHA oder 
TLS_DHE_RSA_WITH_AES_256_CBC_SHA unterstützt werden. 
 * Dabei MUSS für die Schlüsselaushandlung Gruppe 14 (definiert in [RFC-3526], 
verwendbar bis Ende 2023) verwendet werden. 
 * Der private DH-Exponent für den Schlüsselaustausch MUSS eine Länge von 
mindestens 256 Bit haben.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS für die Unterstützung von alten eHealth-KT folgende TLS-Vorgaben ebenfalls unterstützen:<br/>
 
<ul>
  <li>Als Cipher Suite MUSS TLS_DHE_RSA_WITH_AES_128_CBC_SHA oder TLS_DHE_RSA_WITH_AES_256_CBC_SHA unterstützt werden.</li>
  <li>Dabei MUSS für die Schlüsselaushandlung Gruppe 14 (definiert in [RFC-3526], verwendbar bis Ende 2023) verwendet werden.</li>
  <li>Der private DH-Exponent für den Schlüsselaustausch MUSS eine Länge von mindestens 256 Bit haben.</li>
</ul>]]></description_html>
  </requirement>
  <requirement id="A_18183" type="leafRequirement" severity="MUSS" lastUpdate="2022-01-21" technicalID="ML-96934" revision="539800">
    <title><![CDATA[TLS-Protokoll-Verwendung in WANDA Basic]]></title>
    <description><![CDATA[Falls ein Anbieter einer anderen Anwendung des Gesundheitswesens ohne Zugriff 
auf Dienste der TI in angeschlossenen Netzen des Gesundheitswesens (WANDA 
Basic) das TLS-Protokoll verwendet, so MUSS er dabei ausschließlich 
Ciphersuiten und Domainparameter (Schlüssellängen, Kurvenparameter etc.), die 
nach [TR-02102-2] empfohlen sind, verwenden.]]></description>
    <description_html><![CDATA[Falls ein Anbieter einer anderen Anwendung des Gesundheitswesens ohne Zugriff auf Dienste der TI in angeschlossenen Netzen des Gesundheitswesens (WANDA Basic) das TLS-Protokoll verwendet, so MUSS er dabei ausschließlich Ciphersuiten und Domainparameter (Schlüssellängen, Kurvenparameter etc.), die nach [TR-02102-2] empfohlen sind, verwenden.]]></description_html>
  </requirement>
  <requirement id="A_18986" type="leafRequirement" severity="KANN" lastUpdate="2022-12-06" technicalID="ML-102142" revision="539800">
    <title><![CDATA[Fachdienst-interne TLS-Verbindungen]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, die nur innerhalb 
ihres Produkttypen verlaufen (bspw. ePA-Aktensystem interne TLS-Verbindungen 
zwischen dem Zugangsgateway und der Komponente Authentisierung), KÖNNEN für 
diese TLS-Verbindungen neben den in GS-A_4384-* und ggf. A_17124-*festgelegten 
TLS-Vorgaben ebenfalls alle weiteren in [TR-02102-2] empfohlenen TLS-Versionen 
und TLS-Ciphersuiten mit den jeweiligen in [TR-02102-2] dafür aufgeführten 
Domainparametern (Kurven, Schlüssellängen etc.) verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, die nur innerhalb ihres Produkttypen verlaufen (bspw. ePA-Aktensystem interne TLS-Verbindungen zwischen dem Zugangsgateway und der Komponente Authentisierung), KÖNNEN für diese TLS-Verbindungen neben den in GS-A_4384-* und ggf. A_17124-* <span id="polarion-comment:477"></span>festgelegten TLS-Vorgaben ebenfalls alle weiteren in [TR-02102-2] empfohlenen TLS-Versionen und TLS-Ciphersuiten mit den jeweiligen in [TR-02102-2] dafür aufgeführten Domainparametern (Kurven, Schlüssellängen etc.) verwenden.]]></description_html>
  </requirement>
  <requirement id="GS-A_4388" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-29" technicalID="ML-7937" revision="539800">
    <title><![CDATA[DNSSEC-Kontext]]></title>
    <description><![CDATA[Alle Produkttypen, die DNSSEC verwenden, MÜSSEN die Algorithmen und Vorgaben 
gemäß Tabelle Tab_KRYPT_017 erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die DNSSEC verwenden, M&Uuml;SSEN die Algorithmen und Vorg</span><span>a</span><span>ben gem&auml;&szlig; Tabelle Tab_KRYPT_017 erf&uuml;llen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4389" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-29" technicalID="ML-7941" revision="539800">
    <title><![CDATA[Symmetrischer Anteil der hybriden Verschlüsselung binärer Daten]]></title>
    <description><![CDATA[Produkttypen, die die hybride Verschlüsselung binärer Daten durchführen, MÜS
SEN für den symmetrischen Anteil der Verschlüsselung die folgenden Vorgaben 
berücksichtigen:

 * 
Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schlüssellänge 
von 256 Bit im Galois/Counter Mode (GCM) gemäß [NIST-SP-800-38D] mit der 
Tag-Länge von 128 Bit verwendet werden.

 * 
Die IVs dürfen sich bei gleichem Schlüssel nicht wiederholen (vgl. 
[NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S.24]). Der IV soll eine Bitlänge 
von 96 Bit besitzen, seine Länge muss mindestens 96 Bit sein. Es wird empfohlen 
den IV zufällig zu wählen (vgl. [gemSpec_Krypt#GS-A_4367]).

 * 
Hinweis: Im Normalfall ist davon auszugehen, dass für die Sicherung der In
tegrität und Authentizität der zu verschlüsselnden Daten zudem noch eine 
Signatur dieser Daten notwendig ist.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Produkttypen, die die hybride Verschl&uuml;sselung bin&auml;rer Daten durchf&uuml;hren, M&Uuml;</span><span>S</span><span>SEN f&uuml;r den symmetrischen Anteil der Verschl&uuml;sselung die folgenden Vorgaben ber&uuml;ck</span><span>sic</span><span>h</span><span>tigen:</span></p><ul><li><p><span>Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schl&uuml;s</span><span>sell&auml;nge von 256 Bit im Galois/Counter Mode (GCM) g</span><span>e</span><span>m&auml;&szlig; [NIST-SP-800-38D] mit der Tag-L&auml;nge von 128 Bit verwe</span><span>n</span><span>det werden.</span></p></li><li><p><span>Die IVs d&uuml;rfen sich bei gleichem Schl&uuml;ssel nicht wiederholen (vgl. [NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S.24]). Der IV soll e</span><span>i</span><span>ne Bitl&auml;nge von 96 Bit besitzen, seine L&auml;nge muss mindestens 96 Bit sein. Es wird empfohlen den IV zuf&auml;llig zu w&auml;</span><span>h</span><span>len (vgl. [gem</span><span>Spec_Krypt#GS-A_4367]).</span></p></li><li><p><span>Hinweis: Im Normalfall ist davon auszugehen, dass f&uuml;r die Sicherung der I</span><span>n</span><span>tegrit&auml;t und Authentizit&auml;t der zu verschl&uuml;sselnden Daten zudem noch eine Signatur dieser Daten notwe</span><span>n</span><span>dig ist.</span></p></li></ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_4390" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-29" technicalID="ML-7943" revision="539800">
    <title><![CDATA[Asymmetrischer Anteil der hybriden Verschlüsselung binärer Daten]]></title>
    <description><![CDATA[Produkttypen, die die hybride Verschlüsselung binärer Daten durchführen, MÜSSEN 
für den asymmetrischen Anteil der Verschlüsselung die folgenden Vorgaben 
berücksichtigen:

 * Als asymmetrisches Verschlüsselungsverfahren MUSS RSAES-OAEP gemäß [PKCS#1, 
Kapitel 7.1] verwendet werden.

 * Als Mask-Generation-Function für die Verwendung in RSAES-OAEP MUSS MGF 1 
mit SHA-256 als Hash-Funktion gemäß [PKCS#1, Anhang B.2.1] verwendet werden.]]></description>
    <description_html><![CDATA[Produkttypen, die die hybride Verschlüsselung binärer Daten durchführen, MÜSSEN für den asymmetrischen Anteil der Verschlüsselung die folgenden Vorgaben berücksichtigen:<br/> <ul><li>Als asymmetrisches Verschlüsselungsverfahren MUSS RSAES-OAEP gemäß [PKCS#1, Kapitel 7.1] verwendet werden.<br/></li><li>Als Mask-Generation-Function für die Verwendung in RSAES-OAEP MUSS MGF 1 mit SHA-256 als Hash-Funktion gemäß [PKCS#1, Anhang B.2.1] verwendet werden.<br/></li></ul><br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5016" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7945" revision="539800">
    <title><![CDATA[Symmetrische Verschlüsselung binärer Daten]]></title>
    <description><![CDATA[Produkttypen, die die symmetrische Verschlüsselung binärer Daten durchführen, 
MÜSSEN die folgenden Vorgaben berücksichtigen:

 * 
Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schlüssellänge 
von 256 Bit im Galois/Counter Mode (GCM) gemäß [NIST-SP-800-38D] mit der 
Tag-Länge von 128 Bit verwendet werden.

 * 
Die IVs dürfen sich bei gleichem Schlüssel nicht wiederholen (vgl. 
[NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S.24]). Der IV soll eine Bitlänge 
von 96 Bit besitzen, seine Länge muss mindestens 96 Bit sein. Es wird empfohlen 
den IV zufällig zu wählen (vgl. [gemSpec_Krypt#GS-A_4367]).

 * 
Hinweis: Im Normalfall ist davon auszugehen, dass für die Sicherung der In
tegrität und Authentizität der übertragenen Daten zudem noch eine Signatur der 
zu verschlüsselnden Daten notwendig ist.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Produkttypen, die die symmetrische Verschl&uuml;sselung bin&auml;rer Daten durchf&uuml;hren, M&Uuml;SSEN die folgenden Vorgaben ber&uuml;cksic</span><span>h</span><span>tigen:</span></p><ul><li><p><span>Als symmetrische Block-Chiffre muss AES [FIPS-197] mit einer Schl&uuml;ssell&auml;</span><span>n</span><span>ge von 256 Bit im Galois/Counter Mode (GCM) gem&auml;&szlig; [NIST-SP-800-38D] mit der Tag-L&auml;nge von 128 Bit verwe</span><span>n</span><span>det werden.</span></p></li><li><p><span>Die IVs d&uuml;rfen sich bei gleichem Schl&uuml;ssel nicht wiederholen (vgl. [NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S.24]). Der IV soll e</span><span>i</span><span>ne Bitl&auml;nge von 96 Bit besitzen, seine L&auml;nge muss mindestens 96 Bit sein. Es wird empfohlen den IV zuf&auml;llig zu w&auml;</span><span>h</span><span>len (vgl. [gem</span><span>Spec_Krypt#GS-A_4367]).</span></p></li><li><p><span>Hinweis: Im Normalfall ist davon auszugehen, dass f&uuml;r die Sicherung der I</span><span>n</span><span>tegrit&auml;t und Authentizit&auml;t der &uuml;bertragenen Daten zudem noch eine Signatur der zu verschl&uuml;sselnden Daten notwe</span><span>n</span><span>dig ist.</span></p></li></ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_5080" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-7947" revision="539800">
    <title><![CDATA[Signaturen binärer Daten (Dokumente)]]></title>
    <description><![CDATA[Alle Produkttypen, die CMS-Signaturen [RFC-5652] von Inhaltsdaten (wie bspw. 
Textdokumenten ungleich PDF/A) erzeugen oder prüfen, MÜSSEN die Algorithmen und 
Vorgaben der Tabelle Tab_KRYPT_020 erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die CMS-Signaturen [RFC-5652] von Inhaltsdaten (wie bspw. Textdokumenten ungleich PDF/A) erzeugen oder pr&uuml;fen, M&Uuml;SSEN die Alg</span><span>o</span><span>rithmen und Vorgaben der Tabelle Tab_KRYPT_020 e</span><span>r</span><span>f&uuml;llen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5081" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7949" revision="539800">
    <title><![CDATA[Signaturen von PDF/A-Dokumenten]]></title>
    <description><![CDATA[Alle Produkttypen, die in PDF/A-Dokumenten [PDF/A-2] Signaturen einbetten/er
zeugen oder diese Signaturen prüfen, MÜSSEN die Algorithmen und Vorgaben der 
Tabelle Tab_KRYPT_021 erfüllen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die in PDF/A-Dokumenten [PDF/A-2] Signaturen einbe</span><span>t</span><span>ten/er</span><span>zeugen oder diese Signaturen pr&uuml;fen, M&Uuml;SSEN die Algorithmen und Vorg</span><span>a</span><span>ben der Tabelle Tab_KRYPT_021 e</span><span>r</span><span>f&uuml;llen.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4391" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-7951" revision="539800">
    <title><![CDATA[MAC im Rahmen der Personalisierung der eGK]]></title>
    <description><![CDATA[Der Herausgeber der eGK MUSS sicherstellen, dass bei der Personalisierung der 
eGK die Daten bei der Übermittlung integritätsgeschützt werden. Für die Absiche
rung der Integrität ist in diesem Kontext der AES-256 CMAC nach 
[NIST-SP-800-38B] (vgl. [BSI-TR-03116-1#3.2.2, 4.5.2]) zu verwenden. 

Die Länge des CMAC muss 128 Bit betragen.

Nach [NIST-SP-800-38B#S.13] sollen nicht mehr als 248 Nachrichtenblöcke (222 
GByte) mit demselben Schlüssel verarbeitet werden. Nach [NIST-SP-800-38B#S.14] 
ist ein CMAC anfällig für Replay-Attacken, was bei der Anwendung des CMACs zu 
berücksichtigen ist.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Der Herausgeber der eGK MUSS sicherstellen, dass bei der Personalisierung der eGK die Daten bei der &Uuml;bermittlung integrit&auml;tsgesch&uuml;tzt werden. F&uuml;r die Ab</span><span>sich</span><span>e</span><span>rung der Integrit&auml;t ist in diesem Kontext der AES-256 CMAC nach [NIST-SP-800-38B] (vgl. [BSI-TR-03116-1#3.2.2, 4.5.2]) zu ve</span><span>r</span><span>wenden. </span></p><p style="margin-left: 0px;"><span>Die L&auml;nge des CMAC muss 128 Bit betragen.</span></p><p style="margin-left: 0px;"><span>Nach [NIST-SP-800-38B#S.13] sollen nicht mehr als 2</span><span><sup>48</sup></span><span> Nachrichtenbl&ouml;cke (2</span><span><sup>22</sup></span><span> GByte) mit dem</span><span>selbe</span><span>n</span><span> Schl&uuml;ssel verarbeitet werden. Nach [NIST-SP-800-38B#S.14] ist ein CMAC anf&auml;llig f&uuml;r Replay-Attacken, was bei der Anwendung des CMACs zu ber&uuml;cksichtigen ist.</span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_4392" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-27" technicalID="ML-7953" revision="539800">
    <title><![CDATA[Algorithmus im Rahmen der Bildung der pseudonymisierten Versichertenidentität]]></title>
    <description><![CDATA[Alle Produkttypen, die pseudonymisierte Versichertenidentitäten berechnen, 
MÜSSEN den Hash-Algorithmus SHA-256 [FIPS-180-4] verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die pseudonymisierte Versichertenidentitäten berechnen, MÜSSEN den Hash-Algorithmus SHA-256 [FIPS-180-4] verwenden.]]></description_html>
  </requirement>
  <requirement id="GS-A_4393" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7955" revision="539800">
    <title><![CDATA[Algorithmus bei der Erstellung von Hashwerten von Zertifikaten oder öffentlichen Schlüsseln]]></title>
    <description><![CDATA[Alle Produkttypen, die Fingerprints eines öffentlichen Schlüssels oder eines 
Zertifikates erstellen, MÜSSEN den Hash-Algorithmus SHA-256 [FIPS-180-4] dafür 
verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Fingerprints eines öffentlichen Schlüssels oder eines Zertifikates erstellen, MÜSSEN den Hash-Algorithmus SHA-256 [FIPS-180-4] dafür verwenden.]]></description_html>
  </requirement>
  <requirement id="GS-A_5131" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7956" revision="539800">
    <title><![CDATA[Hash-Algorithmus bei OCSP/CertID]]></title>
    <description><![CDATA[Alle Produkttypen, die OCSP-Anfragen stellen oder beantworten, MÜSSEN bei der 
Erstellung und Verwendung der CertID-Struktur (vgl. [RFC-6960, Abschnitt 4.1.1] 
oder [RFC-2560, Abschnitt 4.1.1]) den Hash-Algorithmus SHA-1 [FIPS-180-4] ver
wenden.

Ein OCSP-Server KANN auch zusätzlich andere Hashfunktionen im Rahmen der 
CertID, die nach [BSI-TR-03116-1] zulässig sind, unterstützen.]]></description>
    <description_html><![CDATA[<p style="margin-left: 0px;"><span>Alle Produkttypen, die OCSP-Anfragen stellen oder beantworten, M&Uuml;SSEN bei der Erstellung und Verwendung der CertID-Struktur (vgl. [RFC-6960, Abschnitt 4.1.1] oder [RFC-2560, Abschnitt 4.1.1]) den Hash-Algorithmus SHA-1 [FIPS-180-4] ve</span><span>r</span><span>wenden.</span></p><p style="margin-left: 0px;"><span>Ein OCSP-Server KANN auch </span><span>zus&auml;tzlich </span><span>andere Hashfunktionen im Rahmen der CertID, die nach [BSI-TR-03116-1] zul&auml;ssig sind, unterst&uuml;tzen.</span><span> </span></p>]]></description_html>
  </requirement>
  <requirement id="GS-A_5071-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-113178" revision="539800">
    <title><![CDATA[kryptographische Vorgaben für eine Signaturprüfung in der SAK-Konnektor]]></title>
    <description><![CDATA[Die SAK des Konnektors MUSS bei der Prüfung von qualifizierten elektronischen 
Signaturen mindestens folgende Verfahren wie im Algorithmenkatalog [ALGCAT] 
benannt, unterstützen:

 * RSA
 * 
 * SHA-256, SHA-384, SHA-512 nach FIPS-180-4 (März 2012) [FIPS-180-4] (jeweils 
Abschnitt 6.2, 6.7, 6.5 und 6.4 ebenda),

 * RSASSA-PSS nach PKCS#1 (PKCS#1 v2.1: RSA Cryptographic Standard, 
14.06.2002) Abschnitt 8.1 und 9.1,

 * RSASSA-PKCS1-v1_5 nach PKCS#1 (PKCS#1 v2.1: RSA Cryptographic Standard, 
14.06.2002) Abschnitt 8.2 und 9.2,

 * bei RSA muss ein Modulus zwischen 1976 bis 4096 Bit verwendbar sein,

 * ECDSA
 * 
 * SHA-256 nach FIPS-180-4 (März 2012) [FIPS-180-4] (Abschnitt 6.2),
 * ECDSA basierend auf E(F_p) (vgl. Technische Richtlinie 03111, Version 2.0) 
auf der Kurve P256r1 [RFC-5639].]]></description>
    <description_html><![CDATA[Die SAK des Konnektors MUSS bei der Prüfung von qualifizierten elektronischen Signaturen mindestens folgende Verfahren wie im Algorithmenkatalog [ALGCAT] benannt, unterstützen:<br/><ul><li>RSA</li><li style="list-style: none"><ul><li>SHA-256, SHA-384, SHA-512 nach FIPS-180-4 (März 2012) [FIPS-180-4] (jeweils Abschnitt 6.2, 6.7, 6.5 und 6.4 ebenda),<br/></li><li>RSASSA-PSS nach PKCS#1 (PKCS#1 v2.1: RSA Cryptographic Standard, 14.06.2002) Abschnitt 8.1 und 9.1,<br/></li><li>RSASSA-PKCS1-v1_5 nach PKCS#1 (PKCS#1 v2.1: RSA Cryptographic Standard, 14.06.2002) Abschnitt 8.2 und 9.2,<br/></li><li>bei RSA muss ein Modulus zwischen 1976 bis 4096 Bit verwendbar sein,<br/></li></ul></li><li>ECDSA</li><li style="list-style: none"><ul><li>SHA-256 nach FIPS-180-4 (März 2012) [FIPS-180-4] (Abschnitt 6.2),</li><li>ECDSA basierend auf E(F_p) (vgl. Technische Richtlinie 03111, Version 2.0) auf der Kurve P256r1 [RFC-5639].<br/></li></ul></li></ul>]]></description_html>
  </requirement>
  <requirement id="GS-A_5079" type="leafRequirement" severity="MUSS" lastUpdate="2020-12-01" technicalID="ML-7961" revision="539800">
    <title><![CDATA[Migration von Algorithmen und Schlüssellängen bei PKI-Betreibern]]></title>
    <description><![CDATA[Der Anbieter einer Schlüsselverwaltung MUSS neue Vorgaben zu Algorithmen 
und/oder Schlüssellängen der gematik nach einer vorgegebenen Übergangsfrist 
umsetzen. Nach Ablauf der Übergangsfrist MÜSSEN ausschließlich diese geänderten 
Parameter bei der Erzeugung von Zertifikaten verwendet werden.]]></description>
    <description_html><![CDATA[Der Anbieter einer Schlüsselverwaltung MUSS neue Vorgaben zu Algorithmen und/oder Schlüssellängen der gematik nach einer vorgegebenen Übergangsfrist umsetzen. Nach Ablauf der Übergangsfrist MÜSSEN ausschließlich diese geänderten Parameter bei der Erzeugung von Zertifikaten verwendet werden.<span style="color: #0000FF;"> </span>]]></description_html>
  </requirement>
  <requirement id="GS-A_5207" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7963" revision="539800">
    <title><![CDATA[Signaturverfahren beim initialen Pairing zwischen Konnektor und eHealth-Kartenterminal]]></title>
    <description><![CDATA[Alle Produkttypen, die beim initialen Pairing zwischen Konnektor und 
eHealth-Kartenterminal

 * die Signatur des Shared-Secret (ShS.AUT.KT vgl. [gemSpec_KT#2.5.2.1, 
3.7.2.1]) erzeugen oder prüfen, und

 * auf Basis von RSA die TLS-Verbindung betreiben, die für das aktuell 
durchzuführende Pairing notwendig ist,
MÜSSEN für die Signatur des Shared-Secret und dessen 
Signaturprüfung RSASSA-PSS [PKCS#1] verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die beim initialen Pairing zwischen Konnektor und eHealth-Kartenterminal<br/> <ol><li>die Signatur des Shared-Secret (ShS.AUT.KT vgl. [gemSpec_KT#2.5.2.1, 3.7.2.1]) erzeugen oder prüfen, und<br/></li><li>auf Basis von RSA die TLS-Verbindung betreiben, die für das aktuell durchzuführende Pairing notwendig ist,<br/></li></ol>MÜSSEN für die Signatur des Shared-Secret und dessen Signaturprüfung RSASSA-PSS [PKCS#1] verwenden.<br/> <br/>]]></description_html>
  </requirement>
  <requirement id="GS-A_5208" type="leafRequirement" severity="MUSS" lastUpdate="2021-08-26" technicalID="ML-7964" revision="539800">
    <title><![CDATA[Signaturverfahren für externe Authentisierung]]></title>
    <description><![CDATA[Der Konnektor MUSS an der Schnittstelle für die externe Authentisierung die 
Signaturverfahren RSASSA-PKCS1-v1_5 [PKCS#1] und RSASSA-PSS [PKCS#1] anbieten.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS an der Schnittstelle für die externe Authentisierung die Signaturverfahren RSASSA-PKCS1-v1_5 [PKCS#1] und RSASSA-PSS [PKCS#1] anbieten.]]></description_html>
  </requirement>
  <requirement id="GS-A_5340" type="leafRequirement" severity="MUSS" lastUpdate="2018-11-09" technicalID="ML-7965" revision="539800">
    <title><![CDATA[Signatur der TSL]]></title>
    <description><![CDATA[Der TSL-Dienst MUSS für die Signatur der TSL das Signaturverfahren RSASSA-PSS 
[PKCS#1] verwenden mit dem XMLDSig-Identifier 
„http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1“ nach [RFC-6931, 
Abschnitt „2.3.10 RSASSA-PSS Without Parameters“].]]></description>
    <description_html><![CDATA[Der TSL-Dienst MUSS für die Signatur der TSL das Signaturverfahren RSASSA-PSS [PKCS#1] verwenden mit dem XMLDSig-Identifier „http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1“ nach [RFC-6931, Abschnitt „2.3.10 RSASSA-PSS Without Parameters“].]]></description_html>
  </requirement>
  <requirement id="A_15546" type="leafRequirement" severity="MUSS" lastUpdate="2020-09-24" technicalID="ML-90038" revision="539800">
    <title><![CDATA[ePA-Frontend des Versicherten: Kommunikation zwischen ePA-FdV und VAU]]></title>
    <description><![CDATA[Das ePA-Frontend des Versicherten MUSS bei der Kommunikation mit der VAU das 
Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt "Kommunikationsprotokoll 
zwischen VAU und ePA-Clients"] verwenden und dabei die Rolle Client einnehmen. 
Dabei MUSS es die CipherConfiguration "AES-256-GCM-BrainpoolP256r1-SHA-256" 
(vgl. Abschnitt 6) verwenden. Das ePA-Frontend des Versicherten MUSS nach 
spätestens 24 Stunden das Aushandeln eines neuen AES-Sitzungsschlüssels 
erzwingen. Es MUSS den abgelaufenen Sitzungsschlüssel bei sich sicher löschen.]]></description>
    <description_html><![CDATA[Das ePA-Frontend des Versicherten MUSS bei der Kommunikation mit der VAU das Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt &quot;Kommunikationsprotokoll zwischen VAU und ePA-Clients&quot;] verwenden und dabei die Rolle Client einnehmen. Dabei MUSS es die CipherConfiguration &quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; (vgl. Abschnitt 6) verwenden. Das ePA-Frontend des Versicherten MUSS nach spätestens 24 Stunden das Aushandeln eines neuen AES-Sitzungsschlüssels erzwingen. Es MUSS den abgelaufenen Sitzungsschlüssel bei sich sicher löschen.<br/>]]></description_html>
  </requirement>
  <requirement id="A_15549" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-90039" revision="539800">
    <title><![CDATA[VAU-Client: Kommunikation zwischen VAU-Client und VAU]]></title>
    <description><![CDATA[Ein Client einer VAU MUSS bei der Kommunikation mit der VAU das 
Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt "Kommunikationsprotokoll 
zwischen VAU und ePA-Clients"] verwenden. Dabei MUSS es die CipherConfiguration 
"AES-256-GCM-BrainpoolP256r1-SHA-256" (vgl. Abschnitt 6) verwenden.
 Der Client einer VAU MUSS nach spätestens 24 Stunden das Aushandeln eines 
neuen AES-Sitzungsschlüssels erzwingen. Er MUSS den abgelaufenen 
Sitzungsschlüssel bei sich sicher löschen.]]></description>
    <description_html><![CDATA[Ein Client einer VAU MUSS bei der Kommunikation mit der VAU das Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt &quot;Kommunikationsprotokoll zwischen VAU und ePA-Clients&quot;] verwenden. Dabei MUSS es die CipherConfiguration &quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; (vgl. Abschnitt 6) verwenden.<br/> Der Client einer VAU MUSS nach spätestens 24 Stunden das Aushandeln eines neuen AES-Sitzungsschlüssels erzwingen. Er MUSS den abgelaufenen Sitzungsschlüssel bei sich sicher löschen.]]></description_html>
  </requirement>
  <requirement id="A_15561" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-90040" revision="539800">
    <title><![CDATA[AES-NI]]></title>
    <description><![CDATA[Wenn der eingesetzte Konnektor AES-NI unterstützt und AES-NI dort aktiviert ist 
(vgl. [BSI-TR-03116-1#Abschnitt "4.7  Hardware-Unterstützung AES (AES-NI)"]), 
MUSS der Konnektor für alle AES-Ausführungen die AES-NI verwenden.]]></description>
    <description_html><![CDATA[Wenn der eingesetzte Konnektor AES-NI unterstützt und AES-NI dort aktiviert ist (vgl. [BSI-TR-03116-1#Abschnitt &quot;4.7  Hardware-Unterstützung AES (AES-NI)&quot;]), MUSS der Konnektor für alle AES-Ausführungen die AES-NI verwenden.]]></description_html>
  </requirement>
  <requirement id="A_15547" type="leafRequirement" severity="MUSS" lastUpdate="2021-04-12" technicalID="ML-90041" revision="539800">
    <title><![CDATA[VAU: Kommunikation zwischen VAU und ePA-FdV bez. FM ePA]]></title>
    <description><![CDATA[Das ePA-Aktensystem MUSS sicherstellen, dass dessen VAU bei der Kommunikation 
mit dem ePA-Frontend des Versicherten oder dem FM ePA das 
Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt "Kommunikationsprotokoll 
zwischen VAU und ePA-Clients"] verwendet und dabei die Rolle Server einnimmt.  
Dabei MUSS es die CipherConfiguration"AES-256-GCM-BrainpoolP256r1-SHA-256" 
(vgl. Abschnitt 6) verwenden.
 Die VAU MUSS nach spätestens 24 Stunden das Aushandeln eines neuen 
AES-Sitzungsschlüssels erzwingen. Die VAU MUSS den abgelaufenen 
Sitzungsschlüssel und das ephemere EC-Schlüsselpaar, das im ECDH Grundlage der 
Schlüsselableitung für diesen Schlüssel war, sicher löschen.
 Die VAU MUSS ein Zertifikat aus der Komponenten-PKI der TI besitzen (mit 
Rollenkennung-OID "oid_epa_vau"), das einen ECC-EE-Schlüssel der VAU bestätigt. 
Die VAU MUSS für die Erstellung der VAUServerHello-Nachricht mit dem 
zugehörigen privaten EE-Schlüssel signieren (Signatur der VAUHelloServerData). 
In der VAUHelloServer-Nachricht MUSS die VAU das Zertifikat aufführen und die 
dazugehörige OCSP-Response.]]></description>
    <description_html><![CDATA[Das ePA-Aktensystem MUSS sicherstellen, dass dessen VAU bei der Kommunikation mit dem ePA-Frontend des Versicherten oder dem FM ePA das Kommunikationsprotokoll aus [gemSpec_Krypt#Abschnitt &quot;Kommunikationsprotokoll zwischen VAU und ePA-Clients&quot;] verwendet und dabei die Rolle Server einnimmt.  Dabei MUSS es die CipherConfiguration&quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; (vgl. Abschnitt 6) verwenden.<br/>
Die VAU MUSS nach spätestens 24 Stunden das Aushandeln eines neuen AES-Sitzungsschlüssels erzwingen. Die VAU MUSS den abgelaufenen Sitzungsschlüssel und das ephemere EC-Schlüsselpaar, das im ECDH Grundlage der Schlüsselableitung für diesen Schlüssel war, sicher löschen.<br/>
Die VAU MUSS ein Zertifikat aus der Komponenten-PKI der TI besitzen (mit Rollenkennung-OID &quot;oid_epa_vau&quot;), das einen ECC-EE-Schlüssel der VAU bestätigt. Die VAU MUSS für die Erstellung der VAUServerHello-Nachricht mit dem zugehörigen privaten EE-Schlüssel signieren (Signatur der VAUHelloServerData). In der VAUHelloServer-Nachricht MUSS die VAU das Zertifikat aufführen und die dazugehörige OCSP-Response<span style="text-decoration: line-through;background-color: #FFFF99;"></span>.<br/>]]></description_html>
  </requirement>
  <requirement id="A_15705" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-90044" revision="539800">
    <title><![CDATA[Vorgaben Aktenschlüssel (RecordKey) und Kontextschlüssel (ContextKey)]]></title>
    <description><![CDATA[Ein Client eines ePA-Aktensystems MUSS sicherstellen, dass

 * die von ihnen erzeugten Aktenschlüssel (RecordKey) und Kontextschlüssel 
(ContextKey) AES-Schlüssel [FIPS-197] mit 256 Bit Schlüssellänge sind,

 * diese Schlüssel von ihnen ausschließlich mittels AES/GCM analog 
[gemSpec_Krypt#GS-A_4373] bzw. [gemSpec_Krypt#GS-A_4389] verwendet werden und

 * sie die Arbeit mit Aktenschlüssel (RecordKey) und Kontextschlüssel 
(ContextKey), die nicht Spiegelstrich 1. erfüllen, ablehnen.]]></description>
    <description_html><![CDATA[Ein Client eines ePA-Aktensystems MUSS sicherstellen, dass<br/> <ol><li>die von ihnen erzeugten Aktenschlüssel (RecordKey) und Kontextschlüssel (ContextKey) AES-Schlüssel [FIPS-197] mit 256 Bit Schlüssellänge sind,<br/></li><li>diese Schlüssel von ihnen ausschließlich mittels AES/GCM analog [gemSpec_Krypt#GS-A_4373] bzw. [gemSpec_Krypt#GS-A_4389] verwendet werden und<br/></li><li>sie die Arbeit mit Aktenschlüssel (RecordKey) und Kontextschlüssel (ContextKey), die nicht Spiegelstrich 1. erfüllen, ablehnen.<br/></li></ol><br/>]]></description_html>
  </requirement>
  <requirement id="A_18004" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-95034" revision="539800">
    <title><![CDATA[Vorgaben für die Kodierung von Chiffraten (innerhalb von ePA)]]></title>
    <description><![CDATA[Ein Client eines ePA-Aktensystems MUSS Folgendes sicherstellen. 

 * Der bei der Verschlüsselung mittels AES/GCM verwendete IV MUSS immer 
zufällig erzeugt werden und dessen Länge MUSS stets 96 Bits (12 Byte) betragen.

 * Ein Chiffrat (base64-dekodiert) MUSS immer die Struktur:
    12 Byte IV + AES-GCM-Ciphertext + 16 Byte AuthTag (ICV)
 aufweisen.]]></description>
    <description_html><![CDATA[Ein Client eines ePA-Aktensystems MUSS Folgendes sicherstellen. <br/> <ol><li>Der bei der Verschlüsselung mittels AES/GCM verwendete IV MUSS immer zufällig erzeugt werden und dessen Länge MUSS stets 96 Bits (12 Byte) betragen.<br/></li><li>Ein Chiffrat (base64-dekodiert) MUSS immer die Struktur:<br/> <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;">    12 Byte IV + AES-GCM-Ciphertext + 16 Byte AuthTag (ICV)</span><br/> aufweisen.<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_15745" type="leafRequirement" severity="MUSS" lastUpdate="2020-11-06" technicalID="ML-90045" revision="539800">
    <title><![CDATA[Verschlüsselte Speicherung der verschlüsselten ePA-Daten]]></title>
    <description><![CDATA[Ein ePA-Aktensystem MUSS sicherstellen, dass

 * 
es einen betreiberspezifischen Schlüssel (BS) gibt,

 * 
dieser Schlüssel ein AES-Schlüssel [FIPS-197] mit 256 Bit Schlüssellänge ist,

 * 
dieser Schlüssel in einem mindestens nach FIPS-140-2 Level 3 zertifizierten 
HSM liegt und nur dort verwendet wird,

 * 
dieser Schlüssel im Betrieb ausschließlich der VAU des entsprechenden 
ePA-Aktensystem zugänglich ist,

 * 
dieser Schlüssel nur zur Schlüsselableitung nach einem in 
[gemSpec_Krypt#Abschnitt 2.4] zulässigen Verfahren verwendet wird,

 * 
es eine Schlüsselableitung mit diesem betreiberspezifischen Schlüssel und 
einem aktenspezifischen Merkmal (bspw. der KVNR) gibt und daraus ein 
aktenspezifischer Schlüssel (ABS) abgeleitet wird,

 * 
dieser aktenspezifische Schlüssel ein AES-Schlüssel [FIPS-197] mit 256 Bit 
Schlüssellänge ist,

 * 
die verschlüsselten ePA-Daten einer Akte mit diesem aktenspezifischen 
Schlüssel verschlüsselt werden,

 * 
die verschlüsselten ePA-Daten außerhalb der VAU niemals im Klartext (also ohne 
mittels des ABS verschlüsselt zu sein) liegen,

 * 
dieser Schlüssel (ABS) ausschließlich mittels AES/GCM 
analog [gemSpec_Krypt#GS-A_4389] verwendet wird (der ABS wird durch Anfrage der 
VAU im HSM berechnet (Schlüsselableitung) und dann von dort an die VAU 
übermittelt, die AES/GCM-Operationen mit dem ABS finden in der VAU statt),

 * 
dieser Schlüssel (ABS) im Betrieb ausschließlich der VAU des entsprechenden 
ePA-Aktensystem zugänglich ist.


​​]]></description>
    <description_html><![CDATA[<html><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" name="generator"><title></title></head><body><p><span>Ein ePA-Aktensystem MUSS sicherstellen, dass</span></p><ol><li><p><span>es einen betreiberspezifischen Schl&uuml;ssel (BS) gibt,</span></p></li><li><p><span>dieser Schl&uuml;ssel ein AES-Schl&uuml;ssel [FIPS-197] mit 256 Bit Schl&uuml;ssell&auml;nge ist,</span></p></li><li><p><span>dieser Schl&uuml;ssel in einem mindestens nach FIPS-140-2 Level 3 zertifizierten HSM liegt und nur dort verwendet wird,</span></p></li><li><p><span>dieser Schl&uuml;ssel im Betrieb ausschlie&szlig;lich der VAU des entsprechenden ePA-Aktensystem zug&auml;nglich ist,</span></p></li><li><p><span>dieser Schl&uuml;ssel nur zur Schl&uuml;sselableitung nach einem in [gemSpec_Krypt#Abschnitt 2.4] zul&auml;ssigen Verfahren verwendet wird,</span></p></li><li><p><span>es eine Schl&uuml;sselableitung mit diesem betreiberspezifischen Schl&uuml;ssel und einem aktenspezifischen Merkmal (bspw. der KVNR) gibt und daraus ein aktenspezifischer Schl&uuml;ssel (ABS) abgeleitet wird,</span></p></li><li><p><span>dieser aktenspezifische Schl&uuml;ssel&nbsp;ein AES-Schl&uuml;ssel [FIPS-197] mit 256 Bit Schl&uuml;ssell&auml;nge ist,</span></p></li><li><p><span>die verschl&uuml;sselten ePA-Daten einer Akte mit diesem aktenspezifischen Schl&uuml;ssel verschl&uuml;sselt werden,</span></p></li><li><p><span>die verschl&uuml;sselten ePA-Daten au&szlig;erhalb der VAU niemals im Klartext (also ohne mittels des ABS verschl&uuml;sselt zu sein) liegen,</span></p></li><li><p><span>dieser Schl&uuml;ssel (ABS) ausschlie&szlig;lich mittels AES/GCM analog&nbsp;[gemSpec_Krypt#GS-A_4389] verwendet wird (der ABS wird durch Anfrage der VAU im HSM berechnet (Schl&uuml;sselableitung) und dann von dort an die VAU &uuml;bermittelt, die AES/GCM-Operationen mit dem ABS finden in der VAU statt),</span></p></li><li><p><span>dieser Schl&uuml;ssel (ABS) im Betrieb ausschlie&szlig;lich der VAU des entsprechenden ePA-Aktensystem zug&auml;nglich ist.</span></p></li></ol><p><span><br>​​</span></p></body></html>]]></description_html>
  </requirement>
  <requirement id="A_15746" type="leafRequirement" severity="MUSS" lastUpdate="2021-04-12" technicalID="ML-90046" revision="539800">
    <title><![CDATA[Sicherstellung der Verfügbarkeit des betreiberspezifischen Schlüssels]]></title>
    <description><![CDATA[Ein ePA-Aktensystem MUSS sicherstellen, dass für die Sicherstellung der 
Verfügbarkeit des betreiberspezifischen Schlüssels (vgl. A_15745) eine 
sicherheitstechnisch geeignete Sicherung des Schlüsselmaterials erzeugt und 
sicher verwahrt wird.]]></description>
    <description_html><![CDATA[Ein ePA-Aktensystem MUSS sicherstellen, dass für die Sicherstellung der Verfügbarkeit des betreiberspezifischen Schlüssels (vgl. A_15745) eine sicherheitstechnisch geeignete Sicherung des Schlüsselmaterials erzeugt und sicher verwahrt wird.<br/>
<br/>]]></description_html>
  </requirement>
  <requirement id="A_16176" type="leafRequirement" severity="MUSS" lastUpdate="2021-04-12" technicalID="ML-90048" revision="539800">
    <title><![CDATA[Mindestvorgaben für ePA-Aktensystem-interne Schlüssel]]></title>
    <description><![CDATA[Ein ePA-Aktensystem MUSS bei innerhalb des Aktensystems eingesetzten 
Schlüsselmaterial, das nicht aus der TI-PKI kommt (Signatur 
Authorisierungstoken etc.), folgende Vorgaben umsetzen:

 * Alle verwendeten nicht-TI-Schlüssel MÜSSEN ein Sicherheitsniveau von 120 
Bit ermöglichen (vgl. [gemSpec_Krypt#5 "Migration 120-Bit Sicherheitsniveau"]). 
 * Alle nicht-TI-RSA-Schlüssel MÜSSEN eine Mindestschlüssellänge von 3000 Bit 
besitzen. 
 * Alle nicht-TI-ECC-Schlüssel MÜSSEN auf einem folgenden der Domainparametern 
(Kurven) basieren: 
 * P-256 oder P-384 [FIPS-186-4], 
 * brainpoolP256r1, brainpoolP384r1 oder brainpoolP512r1 [RFC-5639].]]></description>
    <description_html><![CDATA[Ein ePA-Aktensystem MUSS bei innerhalb des Aktensystems eingesetzten Schlüsselmaterial, das nicht aus der TI-PKI kommt (Signatur Authorisierungstoken etc.), folgende Vorgaben umsetzen:<br/>
 
<ol>
  <li>Alle verwendeten nicht-TI-Schlüssel MÜSSEN ein Sicherheitsniveau von 120 Bit ermöglichen (vgl. [gemSpec_Krypt#5 &quot;Migration 120-Bit Sicherheitsniveau&quot;]).</li>
  <li>Alle nicht-TI-RSA-Schlüssel MÜSSEN eine Mindestschlüssellänge von 3000 Bit besitzen.</li>
  <li>Alle nicht-TI-ECC-Schlüssel MÜSSEN auf einem folgenden der Domainparametern (Kurven) basieren:</li>
  <ol>
    <li>P-256 oder P-384 [FIPS-186-4],</li>
    <li>brainpoolP256r1, brainpoolP384r1 oder brainpoolP512r1 [RFC-5639].</li>
  </ol>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_20519" type="leafRequirement" severity="MUSS" lastUpdate="2020-10-08" technicalID="ML-110792" revision="539800">
    <title><![CDATA[Wechsel des betreiberspezifischen Schlüssels]]></title>
    <description><![CDATA[Ein ePA-Aktensystem MUSS sicherstellen, dass

 * der betreiberspezifische Schlüssel (BS) (vgl. A_15745) mindestens alle 5 
Jahre gewechselt wird, 
 * nach Erzeugung eines neuen BS alle auf Grundlage des alten BS erzeugten 
Chiffrate umgeschlüsselt werden (neue Schlüsselableitung der aktenspezifischen 
Schlüssel (ABS) A_15745#6, Umschlüsselung der chiffrierten Aktendaten), 
 * anschließend die alten Chiffrate und der alte BS sicher gelöscht werden, und
 * die Schritte 2. und 3. spätestens 4 Wochen nach Schlüsselwechsel des BS 
abgeschlossen sind.]]></description>
    <description_html><![CDATA[Ein ePA-Aktensystem MUSS sicherstellen, dass<br/>
 
<ol>
  <li>der betreiberspezifische Schlüssel (BS) (vgl. A_15745) mindestens alle 5 Jahre gewechselt wird,</li>
  <li>nach Erzeugung eines neuen BS alle auf Grundlage des alten BS erzeugten Chiffrate umgeschlüsselt werden (neue Schlüsselableitung der aktenspezifischen Schlüssel (ABS) A_15745#6, Umschlüsselung der chiffrierten Aktendaten),</li>
  <li>anschließend die alten Chiffrate und der alte BS sicher gelöscht werden, und</li>
  <li>die Schritte 2. und 3. spätestens 4 Wochen nach Schlüsselwechsel des BS abgeschlossen sind.</li>
</ol>
<div style="margin-left: 35.4pt;"></div>]]></description_html>
  </requirement>
  <requirement id="A_15751" type="leafRequirement" severity="MUSS" lastUpdate="2020-09-24" technicalID="ML-90047" revision="539800">
    <title><![CDATA[TLS-Verbindung zwischen ePA-Aktensystem und ePA-FdV]]></title>
    <description><![CDATA[Ein ePA-Aktensystem und ein ePA-Frontend des Versicherten MÜSSEN in Bezug auf 
die TLS-Verbindung zwischen ihnen
 * folgende Ciphersuiten unterstützen
 * 
 * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30),
 * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2F),
 * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x2C),
 * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2B).
 * Sie KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 
1] unterstützen. 
 * Bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch und bei 
der Signaturprüfung mittels ECDSA MÜSSEN die Kurven P-256 oder P-384 
[FIPS-186-4] unterstützt werden. Daneben SOLLEN die Kurven brainpoolP256r1, 
brainpoolP384r1 oder brainpoolP512r1 (vgl. [RFC-5639] und [RFC-7027]) 
unterstützt werden. Andere Kurven SOLLEN NICHT verwendet werden (Hinweis: die 
Intention des letzten Satzes ist insbesondere, dass die Ordnung des 
Basispunktes in E(F_p) nicht zu klein werden darf).]]></description>
    <description_html><![CDATA[Ein ePA-Aktensystem und ein ePA-Frontend des Versicherten MÜSSEN in Bezug auf die TLS-Verbindung zwischen ihnen <ol><li>folgende Ciphersuiten unterstützen</li><li style="list-style: none"><ul><li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30),</li><li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2F),</li><li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x2C),</li><li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2B).</li></ul></li><li>Sie KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] unterstützen. </li><li>Bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch und bei der Signaturprüfung mittels ECDSA MÜSSEN die Kurven P-256 oder P-384 [FIPS-186-4] unterstützt werden. Daneben SOLLEN die Kurven brainpoolP256r1, brainpoolP384r1 oder brainpoolP512r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven SOLLEN NICHT verwendet werden (Hinweis: die Intention des letzten Satzes ist insbesondere, dass die Ordnung des Basispunktes in E(F_p) nicht zu klein werden darf).</li></ol>]]></description_html>
  </requirement>
  <requirement id="A_15833" type="leafRequirement" severity="MUSS" lastUpdate="2020-09-24" technicalID="ML-90049" revision="539800">
    <title><![CDATA[TLS-Verbindungen ePA-FdV]]></title>
    <description><![CDATA[Ein ePA-Frontend des Versicherten MUSS die TLS-Vorgaben in A_15751 bei allen 
seinen TLS-Verbindungen einhalten.]]></description>
    <description_html><![CDATA[Ein ePA-Frontend des Versicherten MUSS die TLS-Vorgaben in A_15751 bei allen seinen TLS-Verbindungen einhalten.<br/>]]></description_html>
  </requirement>
  <requirement id="A_21269" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-28" technicalID="ML-116193" revision="539800">
    <title><![CDATA[ePA-FdV: TLS-Session-Resumption per Session-ID und per Session-Ticket]]></title>
    <description><![CDATA[Ein ePA-Frontend des Versicherten MUSS sowohl TLS-Session-Resumption per 
Session-ID als auch TLS-Session-Resumption per Session-Tickets unterstützen. 
Falls im ePA-FdV (Rolle TLS-Client) Session-Daten (Session-ID oder oder 
Session-Ticket -- jeweils inkl. kryptographischer Daten (Premaster-Secret 
etc.)) vorliegen, so MUSS das ePA-FdV bei einem erneuten TLS-Verbindungsaufbau 
zum Zugangsgateway des Versicherten (Rolle TLS-Server) diese Session-Daten im 
Rahmen des TLS-Verbindungsaufbaus mit Session-Resumption verwenden.
 Ein ePA-FdV (Rolle TLS-Client) MUSS falls ein Zugangsgateway des Versicherten 
(Rolle TLS-Server) im Rahmen eines TLS-Handshakes ein TLS-Session-Tickets 
sendet und der TLS-Handshake erfolgreich war, dieses Session-Ticket inkl. der 
für eine spätere TLS-Session-Resumption notwendigen kryptographischen Parameter 
(Premaster-Secret etc.) lokal speichern.
 Ein ePA-FdV (Rolle TLS-Client) MUSS falls ein Zugangsgateway des Versicherten 
(Rolle TLS-Server) im Rahmen eines TLS-Handshakes kein TLS-Session-Tickets 
sendet und der TLS-Handshake erfolgreich war, alle für eine spätere 
TLS-Session-Resumption per Session-ID notwendigen Daten lokal speichern.

 Ein ePA-FdV MUSS nach Ende der Aktensitzung (bspw. der Versicherte beendet 
die ePA-FdV-App) alle für eine TLS-Session-Resumption notwendigen Daten lokal 
löschen.]]></description>
    <description_html><![CDATA[Ein ePA-Frontend des Versicherten MUSS sowohl TLS-Session-Resumption per Session-ID als auch TLS-Session-Resumption per Session-Tickets unterstützen. Falls im ePA-FdV (Rolle TLS-Client) Session-Daten (Session-ID oder oder Session-Ticket -- jeweils inkl. kryptographischer Daten (Premaster-Secret etc.)) vorliegen, so MUSS das ePA-FdV bei einem erneuten TLS-Verbindungsaufbau zum Zugangsgateway des Versicherten (Rolle TLS-Server) diese Session-Daten im Rahmen des TLS-Verbindungsaufbaus mit Session-Resumption verwenden.<br/>
Ein ePA-FdV (Rolle TLS-Client) MUSS falls ein Zugangsgateway des Versicherten (Rolle TLS-Server) im Rahmen eines TLS-Handshakes ein TLS-Session-Tickets sendet und der TLS-Handshake erfolgreich war, dieses Session-Ticket inkl. der für eine spätere TLS-Session-Resumption notwendigen kryptographischen Parameter (Premaster-Secret etc.) lokal speichern.<br/>
Ein ePA-FdV (Rolle TLS-Client) MUSS falls ein Zugangsgateway des Versicherten (Rolle TLS-Server) im Rahmen eines TLS-Handshakes kein TLS-Session-Tickets sendet und der TLS-Handshake erfolgreich war, alle für eine spätere TLS-Session-Resumption per Session-ID notwendigen Daten lokal speichern.<br/>
 <br/>
Ein ePA-FdV MUSS nach Ende der Aktensitzung (bspw. der Versicherte beendet die ePA-FdV-App) alle für eine TLS-Session-Resumption notwendigen Daten lokal löschen.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17876" type="leafRequirement" severity="MUSS" lastUpdate="2019-05-10" technicalID="ML-94673" revision="539800">
    <title><![CDATA[SGD: Schlüsselableitung der spezifischen Schlüssel]]></title>
    <description><![CDATA[Ein SGD ePA MUSS folgende Vorgaben durchsetzen:

 * Als Ableitungsverfahren für die Schlüsselableitung der 
versichertenindividuellen Schlüssel MUSS das HKDF nach [RFC-5869] auf Basis von 
SHA-256 verwendet werden.

 * Die Ableitungsschlüssel MÜSSEN eine Mindestentropie von 512 Bit besitzen.]]></description>
    <description_html><![CDATA[Ein SGD ePA MUSS folgende Vorgaben durchsetzen:<br/>
<ol>
  <li>Als Ableitungsverfahren für die Schlüsselableitung der versichertenindividuellen Schlüssel MUSS das HKDF nach [RFC-5869] auf Basis von SHA-256 verwendet werden.<br/>
  </li>
  <li>Die Ableitungsschlüssel MÜSSEN eine Mindestentropie von 512 Bit besitzen.<br/>
  </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_17872" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-94669" revision="539800">
    <title><![CDATA[Ver- und Entschlüsselung der Akten und Kontextschlüssel (Schlüsselableitungsfunktionalität ePA)]]></title>
    <description><![CDATA[Ein Client eines SGD ePA MUSS bei der Ver- und Entschlüsselung der Akten- und 
Kontextschlüssel im Kontext Schlüsselableitungsfunktionalität ePA folgende 
Vorgaben umsetzen.

 * Als symmetrische Block-Chiffre MUSS AES [FIPS-197] mit einer Schlüssellänge 
von 256 Bit im Galois/Counter Mode (GCM) gemäß [NIST-SP-800-38D] mit der 
Tag-Länge von 128 Bit verwendet werden.

 * Der IV MUSS dabei zufällig erzeugt werden (vgl. [NIST-SP-800-38D#S.25] und 
[BSI-TR-02102-1#S.24]).

 * Der IV MUSS eine Bitlänge von 96 Bit (12 Byte) besitzen.]]></description>
    <description_html><![CDATA[Ein Client eines SGD ePA MUSS bei der Ver- und Entschlüsselung der Akten- und Kontextschlüssel im Kontext Schlüsselableitungsfunktionalität ePA folgende Vorgaben umsetzen.<br/>
<ol>
  <li>Als symmetrische Block-Chiffre MUSS AES [FIPS-197] mit einer Schlüssellänge von 256 Bit im Galois/Counter Mode (GCM) gemäß [NIST-SP-800-38D] mit der Tag-Länge von 128 Bit verwendet werden.<br/>
  </li>
  <li>Der IV MUSS dabei zufällig erzeugt werden (vgl. [NIST-SP-800-38D#S.25] und [BSI-TR-02102-1#S.24]).<br/>
  </li>
  <li>Der IV MUSS eine Bitlänge von 96 Bit (12 Byte) besitzen.<br/>
  </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_17873" type="leafRequirement" severity="MUSS" lastUpdate="2020-02-12" technicalID="ML-94670" revision="539800">
    <title><![CDATA[SGD, SGD-HSM-authentisiertes ECIES-Schlüsselpaar]]></title>
    <description><![CDATA[Ein SGD ePA MUSS sicherstellen, dass die zwei Schlüsselpaare (vgl. 
[gemSpec_SGD_ePA# (S4) ]) für  den ECIES-Nachrichtenempfang durch das SGD-HSM 
auf Basis der Kurvenparameter brainpoolP256r1 [RFC-5639] gewählt werden. Für 
die Authentisierung der öffentlichen ECIES-Schlüssels (Signatur mit 
[gemSpec_SGD_ePA# (S1) ] und Kodierung nach [gemSpec_SGD_ePA# ]) MUSS ECDSA 
[BSI-TR-03111] verwendet werden.]]></description>
    <description_html><![CDATA[Ein SGD ePA MUSS sicherstellen, dass die zwei Schlüsselpaare (vgl. [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17910" data-url="/wiki/Spezifikation/gemSpec_SGD?selection=ML-94715"></span> (S4) ]) für  den ECIES-Nachrichtenempfang durch das SGD-HSM auf Basis der Kurvenparameter brainpoolP256r1 [RFC-5639] gewählt werden. Für die Authentisierung der öffentlichen ECIES-Schlüssels (Signatur mit [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17910" data-url="/wiki/Spezifikation/gemSpec_SGD?selection=ML-94715"></span> (S1) ] und Kodierung nach [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17894" data-url="/wiki/Spezifikation/gemSpec_SGD_ePA?selection=ML-94692"></span> ]) MUSS ECDSA [BSI-TR-03111] verwendet werden.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17874" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-94671" revision="539800">
    <title><![CDATA[SGD-Client, Client-authentisiertes ECIES-Schlüsselpaar]]></title>
    <description><![CDATA[Ein Client eines SGD ePA MUSS für den Nachrichtenempfang mittels des 
ECIES-Verfahrens im Kontext der Schlüsselableitungsfunktionalität ePA bei den 
verwendeten ECC-Schlüsseln die Kurvenparameter brainpoolP256r1 [RFC-5639] 
verwenden. Für die Authentisierung des öffentlichen ECIES-Schlüssels des 
Clients (Signatur mit AUT-Identität des Nutzers des Clients gemäß 
[gemSpec_SGD_ePA#]) MUSS ECDSA [BSI-TR-03111] verwendet werden.]]></description>
    <description_html><![CDATA[Ein Client eines SGD ePA MUSS für den Nachrichtenempfang mittels des ECIES-Verfahrens im Kontext der Schlüsselableitungsfunktionalität ePA bei den verwendeten ECC-Schlüsseln die Kurvenparameter brainpoolP256r1 [RFC-5639] verwenden. Für die Authentisierung des öffentlichen ECIES-Schlüssels des Clients (Signatur mit AUT-Identität des Nutzers des Clients gemäß [gemSpec_SGD_ePA#<span data-url="/wiki/Spezifikation/gemSpec_SGD_ePA?selection=ML-94701" data-custom-label="A_17901" id="fake" data-type="polarion" class="polarion-rte-link"></span>]) MUSS ECDSA [BSI-TR-03111] verwendet werden.<br/>]]></description_html>
  </requirement>
  <requirement id="A_19971" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-108403" revision="539800">
    <title><![CDATA[SGD und SGD-Client, Hashfunktion für Signaturerstellung und -prüfung]]></title>
    <description><![CDATA[Ein SGD ePA und ein Client eines SGD ePA MÜSSEN bei der Signaturerstellung und 
-prüfung im Kontext:

 * Signaturerstellung mit [gemSpec_SGD_ePA# (S1) ] und Kodierung nach 
[gemSpec_SGD_ePA#] (vgl. ), bzw. Prüfung dieser Signatur, und 
 * Signaturerstellung für die Authentisierung der öffentlichen 
ECIES-Schlüssels des Clients (vgl. ), bzw. Prüfung dieser Signatur  die 
Hashfunktion SHA-256 [FIPS-180-4] verwenden.]]></description>
    <description_html><![CDATA[Ein SGD ePA und ein Client eines SGD ePA MÜSSEN bei der Signaturerstellung und -prüfung im Kontext:<br/>
 
<ol>
  <li>Signaturerstellung mit [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17910" data-url="/wiki/Spezifikation/gemSpec_SGD?selection=ML-94715"></span> (S1) ] und Kodierung nach [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17894" data-url="/wiki/Spezifikation/gemSpec_SGD_ePA?selection=ML-94692"></span>] (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_17873" data-item-id="ML-94670" data-option-id="custom"></span>), bzw. Prüfung dieser Signatur, und</li>
  <li>Signaturerstellung für die Authentisierung der öffentlichen ECIES-Schlüssels des Clients (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_17874" data-item-id="ML-94671" data-option-id="custom"></span>), bzw. Prüfung dieser Signatur</li>
</ol>
die Hashfunktion SHA-256 [FIPS-180-4] verwenden.]]></description_html>
  </requirement>
  <requirement id="A_17875" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-94672" revision="539800">
    <title><![CDATA[ECIES-verschlüsselter Nachrichtenversand zwischen SGD-Client und SGD-HSM]]></title>
    <description><![CDATA[Ein SGD ePA und ein Client eines SGD ePA MÜSSEN folgende Vorgaben umsetzen.

 * Für den Ende-zu-Ende-verschlüsselten Datenaustausch zwischen SGD-Client und 
SGD-HSM MUSS das ECIES-Verfahren [SEC1-2009] verwendet werden.

 * Der ECDH-Schlüsselaustausch innerhalb von ECIES zwischen SGD-Client und 
SGD-HSM MUSS nach [NIST-800-56-A#5.7.1.2] (Hinweis: ist fachlich identisch zu 
[SEC1-2009#3.3.1]) durchgeführt werden.

 * Aus dem gemeinsamen ECDH-Geheimnis MUSS mit der HKDF nach [RFC-5869] auf 
Basis von SHA-256  ein AES-256-Bit-Schlüssel abgeleitet werden.

 * Dieser Schlüssel (siehe Punkt 3) MUSS mittels AES-GCM und den fachlichen 
Vorgaben für AES-GCM aus   verwendet werden, um den symmetrisch Teil der 
ECIES-Verschlüsselung authentisiert zu ver- bzw. zu entschlüsseln.
Hinweis: die Kodierung der Chiffrate wird in [gemSpec_SGD_ePA] festgelegt.]]></description>
    <description_html><![CDATA[Ein SGD ePA und ein Client eines SGD ePA MÜSSEN folgende Vorgaben umsetzen.<br/> <ol><li>Für den Ende-zu-Ende-verschlüsselten Datenaustausch zwischen SGD-Client und SGD-HSM MUSS das ECIES-Verfahren [SEC1-2009] verwendet werden.<br/></li><li>Der ECDH-Schlüsselaustausch innerhalb von ECIES zwischen SGD-Client und SGD-HSM MUSS nach [NIST-800-56-A#5.7.1.2] (Hinweis: ist fachlich identisch zu [SEC1-2009#3.3.1]) durchgeführt werden.<br/></li><li>Aus dem gemeinsamen ECDH-Geheimnis MUSS mit der HKDF nach [RFC-5869] auf Basis von SHA-256  ein AES-256-Bit-Schlüssel abgeleitet werden.<br/></li><li>Dieser Schlüssel (siehe Punkt 3) MUSS mittels AES-GCM und den fachlichen Vorgaben für AES-GCM aus <span data-option-id="custom" data-item-id="ML-94669" data-custom-label="A_17872" id="fake" data-type="crossReference" class="polarion-rte-link"></span>  verwendet werden, um den symmetrisch Teil der ECIES-Verschlüsselung authentisiert zu ver- bzw. zu entschlüsseln.<br/></li></ol>Hinweis: die Kodierung der Chiffrate wird in [gemSpec_SGD_ePA] festgelegt.<br/>]]></description_html>
  </requirement>
  <requirement id="A_18023" type="leafRequirement" severity="MUSS" lastUpdate="2019-05-10" technicalID="ML-96279" revision="539800">
    <title><![CDATA[SGD, Ableitungschlüssel Authentisierungstoken]]></title>
    <description><![CDATA[Ein SGD ePA MUSS folgende Vorgaben umsetzen.

 * Die Ableitungsschlüssel für die Erstellung der Authentisierungstoken 
[gemSpec_SGD_ePA#  (S5)] MÜSSEN eine Mindestentropie von 256 Bit besitzen.

 * Diese Ableitungsschlüssel MÜSSEN mit der HKDF nach [RFC-5869] auf Basis von 
SHA-256 verwendet werden.]]></description>
    <description_html><![CDATA[Ein SGD ePA MUSS folgende Vorgaben umsetzen.<br/>
<ol>
  <li>Die Ableitungsschlüssel für die Erstellung der Authentisierungstoken [gemSpec_SGD_ePA#<span class="polarion-rte-link" data-type="polarion" id="fake" data-custom-label="A_17910" data-url="/wiki/Spezifikation/gemSpec_SGD_ePA?selection=ML-94715"></span>  (S5)] MÜSSEN eine Mindestentropie von 256 Bit besitzen.<br/>
  </li>
  <li>Diese Ableitungsschlüssel MÜSSEN mit der HKDF nach [RFC-5869] auf Basis von SHA-256 verwendet werden.<br/>
  </li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_21332" type="leafRequirement" severity="MUSS" lastUpdate="2022-07-28" technicalID="ML-116459" revision="539800">
    <title><![CDATA[E-Rezept: TLS-Vorgaben]]></title>
    <description><![CDATA[Ein E-Rezept-FD, ein Apothekenverzeichnis, ein E-Rezept-Client und ein IDP 
MÜSSEN in Bezug auf die TLS-Verbindung zwischen ihnen 
 * folgende Ciphersuiten unterstützen 
 * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30), 
 * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2F), 
 * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x2C), 
 * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2B). 
 * Sie KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 
1] unterstützen.  
 * Bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch und bei 
der Signaturprüfung mittels ECDSA MÜSSEN die Kurven P-256 oder P-384 
[FIPS-186-4] unterstützt werden. Daneben SOLLEN die Kurven brainpoolP256r1, 
brainpoolP384r1 oder brainpoolP512r1 (vgl. [RFC-5639] und [RFC-7027]) 
unterstützt werden. Andere Kurven SOLLEN NICHT verwendet werden (Hinweis: die 
Intention des letzten Satzes ist insbesondere, dass die Ordnung des 
Basispunktes in E(F_p) nicht zu klein werden darf).]]></description>
    <description_html><![CDATA[Ein E-Rezept-FD, ein Apothekenverzeichnis, ein E-Rezept-Client und ein IDP MÜSSEN in Bezug auf die TLS-Verbindung zwischen ihnen 
<ol>
  <li>folgende Ciphersuiten unterstützen</li>
  <ul>
    <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x30),</li>
    <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2F),</li>
    <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0, 0x2C),</li>
    <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0, 0x2B).</li>
  </ul>
  <li>Sie KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] unterstützen. </li>
  <li>Bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch und bei der Signaturprüfung mittels ECDSA MÜSSEN die Kurven P-256 oder P-384 [FIPS-186-4] unterstützt werden. Daneben SOLLEN die Kurven brainpoolP256r1, brainpoolP384r1 oder brainpoolP512r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven SOLLEN NICHT verwendet werden (Hinweis: die Intention des letzten Satzes ist insbesondere, dass die Ordnung des Basispunktes in E(F_p) nicht zu klein werden darf).</li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_22698" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-19" technicalID="ML-128549" revision="539800">
    <title><![CDATA[E-Rezept, Erzeugung des Nutzerpseudonyms LEI]]></title>
    <description><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.

 * Die VAU MUSS einen mindestens 120-Bit-Entropie-haltigen 
Pseudonymisierungsschlüssel erzeugen und zur Verwendung durch die VAU vorhalten.
 * Dieser Pseudonymisierungsschlüssel MUSS ausschließlich durch die VAU 
verwendbar sein (Backups durch den Betreiber, welche durch ein 
Mehr-Augen-Prinzip geschützt werden, sind zulässig).
 * Dieser Pseudonymisierungsschlüssel MUSS halbjährlich automatisch durch die 
VAU neu erzeugt (gewechselt) werden.
 * Die VAU MUSS im Falle, dass der Nutzer eine LEI ist, die Telematik-ID des 
Nutzers ermitteln und dann mittels der HKDF nach [RFC-5869] auf Basis von 
SHA-256, dem geheimen Pseudonymisierungsschlüssel und der Telematik-ID ein 256 
Bit langes LEI-Pseudonym erzeugen (d. h., Ausgabelänge der HKDF ist also 256 
Bit (32 Byte), IKM (vgl. [RFC-5869) = PS, info (vgl. [RFC-5869]) = 
Telematik-ID, salt (vgl. [RFC-5869] = „“ (leere Zeichenkette)).
 * Die VAU MUSS das in (4) erzeuge LEI-Pseudonym zusammen  mit den weiteren, 
für die Rohdatenlieferung definierten, Informationen an den äußeren E-Rezept-FD 
(!= VAU) weiter geben.]]></description>
    <description_html><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.<br/> <ol><li>Die VAU MUSS einen mindestens 120-Bit-Entropie-haltigen Pseudonymisierungsschlüssel erzeugen und zur Verwendung durch die VAU vorhalten.</li><li>Dieser Pseudonymisierungsschlüssel MUSS ausschließlich durch die VAU verwendbar sein (Backups durch den Betreiber, welche durch ein Mehr-Augen-Prinzip geschützt werden, sind zulässig).</li><li>Dieser Pseudonymisierungsschlüssel MUSS halbjährlich automatisch durch die VAU neu erzeugt (gewechselt) werden.</li><li>Die VAU MUSS im Falle, dass der Nutzer eine LEI ist, die Telematik-ID des Nutzers ermitteln und dann mittels der HKDF nach [RFC-5869] auf Basis von SHA-256, dem geheimen Pseudonymisierungsschlüssel und der Telematik-ID ein 256 Bit langes LEI-Pseudonym erzeugen (d. h., Ausgabelänge der HKDF ist also 256 Bit (32 Byte), IKM (vgl. [RFC-5869) = PS, info (vgl. [RFC-5869]) = Telematik-ID, salt (vgl. [RFC-5869] = „“ (leere Zeichenkette)).</li><li>Die VAU MUSS das in (4) erzeuge LEI-Pseudonym zusammen  mit den weiteren, für die Rohdatenlieferung definierten, Informationen an den äußeren E-Rezept-FD (!= VAU) weiter geben.</li></ol>]]></description_html>
  </requirement>
  <requirement id="A_19644" type="leafRequirement" severity="MUSS" lastUpdate="2021-02-04" technicalID="ML-107287" revision="539800">
    <title><![CDATA[Hashfunktion für Hashwert-Referenzen beim Fachdienst Download-Server (KAS)]]></title>
    <description><![CDATA[Ein KOM-LE-Client und der Fachdienst Download-Server (KAS) MÜSSEN bei der 
Erzeugung und Verwendung von Hashwert-Referenzen für Anhänge - die auf dem 
Fachdienst Download-Server (KAS) abgelegt werden -  die Hashfunktion SHA-256 
[FIPS-180-4] verwenden.]]></description>
    <description_html><![CDATA[Ein KOM-LE-Client und der Fachdienst Download-Server (KAS) MÜSSEN bei der Erzeugung und Verwendung von Hashwert-Referenzen für Anhänge - die auf dem Fachdienst Download-Server (KAS) abgelegt werden -  die Hashfunktion SHA-256 [FIPS-180-4] verwenden.]]></description_html>
  </requirement>
  <requirement id="GS-A_5091" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-7968" revision="539800">
    <title><![CDATA[Verwendung von RSASSA-PSS bei XMLDSig-Signaturen]]></title>
    <description><![CDATA[Produkttypen, die RSASSA-PSS-Signaturen [PKCS#1] innerhalb von XMLDSig 
erstellen oder prüfen, MÜSSEN die Identifier aus [RFC-6931] Abschnitt „2.3.9 
RSASSA-PSS With Parameters“ und „2.3.10 RSASSA-PSS Without Parameters“ für die 
Kodierung dieser Signaturen verwenden.]]></description>
    <description_html><![CDATA[Produkttypen, die RSASSA-PSS-Signaturen [PKCS#1] innerhalb von XMLDSig erstellen oder prüfen, MÜSSEN die Identifier aus [RFC-6931] Abschnitt „2.3.9 RSASSA-PSS With Parameters“ und „2.3.10 RSASSA-PSS Without Parameters“ für die Kodierung dieser Signaturen verwenden.<span style="color: #0000FF;"> </span> <br/>]]></description_html>
  </requirement>
  <requirement id="A_17205" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-92906" revision="539800">
    <title><![CDATA[Signatur der TSL: Signieren und Prüfen (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die die TSL(ECC-RSA) signieren oder prüfen, MÜSSEN dafür das 
Signaturverfahren ECDSA [BSI-TR-03111] auf Basis der Domainparameter 
brainpoolP256r1 verwenden mit dem XMLDSig-Identifier „
http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256 
<http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256>“ [XMLDSig]. Als 
Hashfunktion (Messagedigest) MUSS SHA-256 [FIPS-180-4] verwendet werden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die die TSL(ECC-RSA) signieren oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] auf Basis der Domainparameter brainpoolP256r1 verwenden mit dem XMLDSig-Identifier „ <a class="descriptionLink" target="_blank" href="http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256">http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256</a>“ [XMLDSig]. Als Hashfunktion (Messagedigest) MUSS SHA-256 [FIPS-180-4] verwendet werden.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17124-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-134942" revision="539800">
    <title><![CDATA[TLS-Verbindungen (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die 
folgenden Vorgaben erfüllen:

 * Zur Authentifizierung MUSS eine X.509-Identität gemäß 
[gemSpec_Krypt#GS-A_4359] verwendet werden.

 * Als Ciphersuiten MÜSSEN TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 
(0xC0,0x2B) und  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 
(0xC0,0x2C) unterstützt werden.

 * Falls der Produkttyp in der Rolle als TLS-Client agiert, so MUSS er die 
eben genannten Ciphersuiten gegenüber evtl. ebenfalls von ihm unterstützen 
RSA-basierte Ciphersuiten (vgl. GS-A_4384-*) bevorzugen (in der Liste 
"cipher_suites" beim ClientHello vorne an stellen, vgl.  [RFC-5246#7.4.1.2 
Client Hello]). 

 *  Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. 
"ECDHE" im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 
[FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und 
brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere 
Kurven als in A_17124-* aufgeführt DÜRFEN NICHT verwendet werden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN die folgenden Vorgaben erfüllen:<br/>
 
<ol>
  <li>Zur Authentifizierung MUSS eine X.509-Identität gemäß [gemSpec_Krypt#GS-A_4359] verwendet werden.<br/>
    </li>
  <li>Als Ciphersuiten MÜSSEN TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0,0x2B) und  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0,0x2C) unterstützt werden.<br/>
    </li>
  <li>Falls der Produkttyp in der Rolle als TLS-Client agiert, so MUSS er die eben genannten Ciphersuiten gegenüber evtl. ebenfalls von ihm unterstützen RSA-basierte Ciphersuiten (vgl. GS-A_4384-*)<span id="polarion-comment:479"></span> bevorzugen (in der Liste &quot;cipher_suites&quot; beim ClientHello vorne an stellen, vgl.  [RFC-5246#7.4.1.2 Client Hello]). <br/>
    </li>
  <li> Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. &quot;ECDHE&quot; im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 [FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven als in A_17124-* aufgeführt DÜRFEN NICHT verwendet werden.</li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_17775" type="leafRequirement" severity="SOLL" lastUpdate="2022-09-27" technicalID="ML-94320" revision="539800">
    <title><![CDATA[TLS-Verbindungen Reihenfolge Ciphersuiten (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen und in der Rolle 
TLS-Server agieren, SOLLEN die Reihenfolge der Ciphersuiten in der Liste 
"cipher_suites" aus dem TLS-ClientHello bei der Auswahl der Ciphersuite 
befolgen.]]></description>
    <description_html><![CDATA[<html><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" name="generator"><title></title></head><body><p><span>Alle Produkttypen, die &Uuml;bertragungen mittels TLS durchf&uuml;hren und in der Rolle TLS-Server agieren, SOLLEN die Reihenfolge der Ciphersuiten in der&nbsp;Liste "cipher_suites" aus dem TLS-ClientHello bei der Auswahl der Ciphersuite befolgen.</span></p></body></html>]]></description_html>
  </requirement>
  <requirement id="A_17322" type="leafRequirement" severity="MUSS" lastUpdate="2022-09-27" technicalID="ML-93497" revision="539800">
    <title><![CDATA[TLS-Verbindungen nur zulässige Ciphersuiten und TLS-Versionen (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN 
sicherstellen, dass sie nur (durch andere Anforderungen) zugelassene 
TLS-Ciphersuiten bzw. TLS-Versionen anbieten bzw. verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die Übertragungen mittels TLS durchführen, MÜSSEN sicherstellen, dass sie nur (durch andere Anforderungen) zugelassene TLS-Ciphersuiten bzw. TLS-Versionen anbieten bzw. verwenden. <br/>]]></description_html>
  </requirement>
  <requirement id="A_22342" type="leafRequirement" severity="KANN" lastUpdate="2022-12-13" technicalID="ML-125231" revision="539800">
    <title><![CDATA[Konnektor, IKE-Schlüsselaushandlung – Erleichterung Migrationsphase 1 (ECC-Migration)]]></title>
    <description><![CDATA[Solange ein Konnektor nur mit einem RSA-Zertifikat am VPN-Zugangsdienst 
registriert ist, KANN der Konnektor den IKE-Verbindungsaufbau gemäß der 
Vorgaben aus GS-A_4382-* durchführen.]]></description>
    <description_html><![CDATA[Solange ein Konnektor nur mit einem RSA-Zertifikat am VPN-Zugangsdienst registriert ist, KANN der Konnektor den IKE-Verbindungsaufbau gemäß der Vorgaben aus GS-A_4382-* durchführen.]]></description_html>
  </requirement>
  <requirement id="A_22343-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-133472" revision="539800">
    <title><![CDATA[Verwendung von ECC beim Verbindungsaufbau nach RE-Registrierung mit ECC-NK-Zertifikat (ECC-Migration)]]></title>
    <description><![CDATA[Sobald der Konnektor mit einem ECC-Zertifikat am VPN-Zugangsdienst registriert 
ist, MUSS er den nächsten regulären Verbindungsaufbau zum VPN-Konzentrator 
gemäß der Vorgaben aus A_17125 durchführen.]]></description>
    <description_html><![CDATA[Sobald der Konnektor mit einem ECC-Zertifikat am VPN-Zugangsdienst registriert ist, MUSS er den nächsten regulären Verbindungsaufbau zum VPN-Konzentrator gemäß der Vorgaben aus A_17125 durchführen.]]></description_html>
  </requirement>
  <requirement id="A_17210" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-92912" revision="539800">
    <title><![CDATA[Konnektor, IKE-Schlüsselaushandlung Fallback  (ECC-Migration)]]></title>
    <description><![CDATA[Ein Konnektor MUSS, falls beim IKE-Verbindungsaufbau klar wird, dass der 
IKE-Responder (VPN-Konzentrator, VPN-Zugangsdienst) (noch) keine ECC-Verfahren 
unterstützt (INVALID_KE_PAYLOAD-Nachricht), auf die Vorgaben aus GS-A_4382-* 
"zurückfallen".]]></description>
    <description_html><![CDATA[Ein Konnektor MUSS, falls beim IKE-Verbindungsaufbau klar wird, dass der IKE-Responder (VPN-Konzentrator, VPN-Zugangsdienst) (noch) keine ECC-Verfahren unterstützt (INVALID_KE_PAYLOAD-Nachricht), auf die Vorgaben aus GS-A_4382-* &quot;zurückfallen&quot;.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17125" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92705" revision="539800">
    <title><![CDATA[IKE-Schlüsselaushandlung für IPsec (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die die Authentifizierung, den Schlüsselaustausch und die 
verschlüsselte Kommunikation im IPsec-Kontext durchführen, MÜSSEN die 
Schlüsselvereinbarung mittels IKEv2 [RFC-7296] gemäß den folgenden Vorgaben 
durchführen:

 * Zur Authentisierung MUSS eine Identität mit einem X.509-Zertifikat gemäß 
[gemSpec_Krypt#GS-A_4360] Schlüsselgeneration "ECDSA" verwendet werden.

 * Für „Hash und URL“ MUSS SHA-1(vgl. [RFC-7296#3.6]) verwendet werden. 

 * Für den Schlüsselaustausch MUSS ein ephemer ECDH verwendet werden. Dabei 
MUSS die Kurve brainpoolP256r1 [RFC-6954] unterstützt werden. Es KÖNNEN die 
Kurven brainpoolP384r1, brainpoolP512r1 [RFC-6954] und ECP Gruppen 19, 20 und 
21 [RFC-5903] unterstützt werden.

 * Als Verschlüsselungsverfahren im Rahmen von IKE MUSS AEAD_AES_128_GCM 
und AEAD_AES_256_GCM [RFC-5282] unterstützt werden (IANA.-Nr. 20) (Hinweis 
verpflichtend Unterstützung nach [RFC-5282#3.2]). Es MÜSSEN zudem 
AEAD_AES_128_GCM_12 und AEAD_AES_256_GCM_12 (IANA-Nr. 19) unterstützt werden. 
Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.2.1 Tabelle 2] unterstützt 
werden.

 * Als PRF für die Schlüsselerzeugung MUSS PRF_HMAC_SHA2_256 (IANA-Nr. 5) 
[RFC-4868] unterstützt werden. Es KÖNNEN weitere Verfahren nach 
[TR-02021-3#3.2.2 Tabelle 3] unterstützt werden.

 * Als Authentisierungsverfahren MUSS ECDSA-256 als Basis von brainpoolP256r1 
(IANA-Nr. 14) [RFC-7427] unterstützt werden. Es KÖNNEN weitere Verfahren nach 
[TR-02021-3#3.2.5 Tabelle 6] unterstützt werden.

 * Für die Verschlüsselung der ESP-Pakete MUSS AES-GCM mit 16 Byte großem ICV 
(IANA-Nr. 20) und AES-GCM mit 12 Byte großem ICV (IANA-Nr. 19) [RFC-4106] 
jeweils mit 128 und 256 Bit Schlüssellänge unterstützt werden.
 Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.3.1 Tabelle 7] unterstützt 
werden.

 * Falls weitere Verfahren nach [TR-02021-3#3.3.1 Tabelle 7] unterstützt 
werden, so MUSS mindestens ein Verfahren zum Integritätsschutz der ESP-Pakete 
aus [TR-02021-3#3.3.2 Tabelle 8] unterstützt werden. (Hinweis: bei den 
verpflichtend zu unterstützenden AEAD-Verfahren aus Spiegelstrich 7 ist ein 
zusätzlicher Integritätsschutz by-design nicht notwendig.)]]></description>
    <description_html><![CDATA[Alle Produkttypen, die die Authentifizierung, den Schlüsselaustausch und die verschlüsselte Kommunikation im IPsec-Kontext durchführen, MÜSSEN die Schlüsselvereinbarung mittels IKEv2 [RFC-7296] gemäß den folgenden Vorgaben durchführen:<br/> <ol><li>Zur Authentisierung MUSS eine Identität mit einem X.509-Zertifikat gemäß [gemSpec_Krypt#GS-A_4360] Schlüsselgeneration &quot;ECDSA&quot; verwendet werden.<br/></li><li>Für „Hash und URL“ MUSS <span style="font-size: 10pt;line-height: 1.5;">SHA-1(vgl. [RFC-7296#3.6])</span> verwendet werden. <br/></li><li>Für den Schlüsselaustausch MUSS ein ephemer ECDH verwendet werden. Dabei MUSS die Kurve brainpoolP256r1 [RFC-6954] unterstützt werden. Es KÖNNEN die Kurven brainpoolP384r1, brainpoolP512r1 [RFC-6954] und ECP Gruppen 19, 20 und 21 [RFC-5903] unterstützt werden.<br/></li><li>Als Verschlüsselungsverfahren im Rahmen von IKE MUSS AEAD_AES_128_GCM und AEAD_AES_256_GCM [RFC-5282] unterstützt werden (IANA.-Nr. 20) (Hinweis verpflichtend Unterstützung nach [RFC-5282#3.2]). Es MÜSSEN zudem AEAD_AES_128_GCM_12 und AEAD_AES_256_GCM_12 (IANA-Nr. 19) unterstützt werden. Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.2.1 Tabelle 2] unterstützt werden.<br/></li><li>Als PRF für die Schlüsselerzeugung MUSS PRF_HMAC_SHA2_256 (IANA-Nr. 5) [RFC-4868] unterstützt werden. Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.2.2 Tabelle 3] unterstützt werden.<br/></li><li>Als Authentisierungsverfahren MUSS ECDSA-256 als Basis von brainpoolP256r1 (IANA-Nr. 14) [RFC-7427] unterstützt werden. Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.2.5 Tabelle 6] unterstützt werden.<br/></li><li>Für die Verschlüsselung der ESP-Pakete MUSS AES-GCM mit 16 Byte großem ICV (IANA-Nr. 20) und AES-GCM mit 12 Byte großem ICV (IANA-Nr. 19) [RFC-4106] jeweils mit 128 und 256 Bit Schlüssellänge unterstützt werden.<br/> Es KÖNNEN weitere Verfahren nach [TR-02021-3#3.3.1 Tabelle 7] unterstützt werden.<br/></li><li>Falls weitere Verfahren nach [TR-02021-3#3.3.1 Tabelle 7] unterstützt werden, so MUSS mindestens ein Verfahren zum Integritätsschutz der ESP-Pakete aus [TR-02021-3#3.3.2 Tabelle 8] unterstützt werden. (Hinweis: bei den verpflichtend zu unterstützenden AEAD-Verfahren aus Spiegelstrich 7 ist ein zusätzlicher Integritätsschutz by-design nicht notwendig.)<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17126" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-92706" revision="539800">
    <title><![CDATA[IPsec-Kontext -- Verschlüsselte Kommunikation (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die mittels IPsec-Daten schützen, MÜSSEN dies ausschließlich 
auf Grundlage der in  (und ggf. GS-A_4382-* vgl. diesbezüglich A_17210) als 
zulässig aufgeführten Verfahren und Vorgaben tun.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die mittels IPsec-Daten schützen, MÜSSEN dies ausschließlich auf Grundlage der in <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_17125" data-item-id="ML-92705" data-option-id="custom"></span>  (und ggf. GS-A_4382-* vgl. diesbezüglich A_17210) als zulässig aufgeführten Verfahren und Vorgaben tun.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17206" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92908" revision="539800">
    <title><![CDATA[XML-Signaturen (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Signaturen auf Basis eines ECC-Schlüssels erzeugen 
oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] auf Basis 
der Domainparameter brainpoolP256r1 verwenden. Sie MÜSSEN dabei den 
XMLDSig-Identifier „http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256 
<http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256>“ [XMLDSig verwenden. Als 
Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 [FIPS-180-4] verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die XML-Signaturen auf Basis eines ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] auf Basis der Domainparameter brainpoolP256r1 verwenden. Sie MÜSSEN dabei den XMLDSig-Identifier „ <a class="descriptionLink" target="_blank" href="http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256">http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256</a>“ [XMLDSig verwenden. Als Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 [FIPS-180-4] verwenden. <br/>]]></description_html>
  </requirement>
  <requirement id="A_17360" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-93560" revision="539800">
    <title><![CDATA[XML-Signaturen (Dokumente) (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Signaturen von Dokumenten auf Basis eines 
ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dabei die Vorgaben aus A_17206 
umsetzen und die Signatur nach [ETSI-XAdES] (interoperables Container-Format) 
bei der Erzeugung kodieren bzw. bei der Prüfung auswerten.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die XML-Signaturen von Dokumenten auf Basis eines ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dabei die Vorgaben aus A_17206 umsetzen und die Signatur nach [ETSI-XAdES] (interoperables Container-Format) bei der Erzeugung kodieren bzw. bei der Prüfung auswerten.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17207" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92909" revision="539800">
    <title><![CDATA[Signaturen binärer Daten  (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen von Daten auf Basis eines 
ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA 
[BSI-TR-03111] auf Basis der Domainparameter brainpoolP256r1 verwenden (vgl. 
[RFC-5753] und [RFC-6090]). Als Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 
[FIPS-180-4] verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen von Daten auf Basis eines ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] auf Basis der Domainparameter brainpoolP256r1 verwenden (vgl. [RFC-5753] und [RFC-6090]). Als Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 [FIPS-180-4] verwenden. <br/>]]></description_html>
  </requirement>
  <requirement id="A_17359" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-93559" revision="539800">
    <title><![CDATA[Signaturen binärer Daten (Dokumente) (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen von Dokumenten auf Basis eines 
ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dabei die Vorgaben aus A_17207 
umsetzen und die Signatur nach [ETSI-CAdES] (interoperables Container-Format) 
bei der Erzeugung kodieren bzw. bei der Prüfung auswerten.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen von Dokumenten auf Basis eines ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dabei die Vorgaben aus A_17207 umsetzen und die Signatur nach [ETSI-CAdES] (interoperables Container-Format) bei der Erzeugung kodieren bzw. bei der Prüfung auswerten.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17208" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92910" revision="539800">
    <title><![CDATA[Signaturen von PDF/A-Dokumenten (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen auf Basis eines ECC-Schlüssels 
erzeugen oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] 
auf Basis der Domainparameter brainpoolP256r1 nach [PAdES-3] und [PDF/A-2] 
verwenden. Als Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 [FIPS-180-4] 
verwenden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die (nicht-XML-)Signaturen auf Basis eines ECC-Schlüssels erzeugen oder prüfen, MÜSSEN dafür das Signaturverfahren ECDSA [BSI-TR-03111] auf Basis der Domainparameter brainpoolP256r1 nach [PAdES-3] und [PDF/A-2] verwenden. Als Hashfunktion (Messagedigest) MÜSSEN sie SHA-256 [FIPS-180-4] verwenden.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17220" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92933" revision="539800">
    <title><![CDATA[Verschlüsselung binärer Daten (ECIES) (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die binäre Daten (also nicht XML-Daten) ECC-basiert 
verschlüsseln (im Folgenden als Nutzerdaten bezeichnet) und diese mittels CMS 
[RFC-5626] kodieren, MÜSSEN folgende Vorgaben umsetzen.

 * Zunächst MUSS ein 256-Bit AES-Schlüssel zufällig erzeugt werden 
(vgl. GS-A_4368),
 Dieser Schlüssel wird im Folgenden als Transportschlüssel bezeichnet (vgl. 
Erklärung in Abschnitt [gemSpec_Krypt#]).

 * Mit diesem Transportschlüssel MÜSSEN die Nutzerdaten mittels AES-GCM und 
den Vorgaben aus GS-A_4389 verschlüsselt werden.

 * Der Transportschlüssel MUSS unkodiert mit den in [gemSpec_COS#6.8.1.4 ELC 
Verschlüsselung] aufgeführten Vorgaben mittels ECIES verschlüsselt werden 
(siehe Erklärung in [gemSpec_Krypt#ECIES]). Das damit entstehende Chiffrat wird 
im Folgenden als Transport-Chiffrat bezeichnet.

 * Das Transport-Chiffrat MUSS wie in [gemSpec_Krypt#] beschrieben in eine 
ASN.1-Struktur (Tupel (PO, C, T) in kartenkompatibler ASN.1-Binärverpackung 
kodiert werden.

 * Diese Kodierung MUSS in eine keyEncryptionAlgorithm-Datenstruktur mit der 
OID oid_ti_ecies_transport_encryption [gemSpec_OID] eingebracht werden.

 * Die restliche Kodierung des mittels AES-GCM erzeugten Chiffrats der 
Nutzerdaten MUSS wie in CMS üblich [RFC-5626] [RFC-5084] erfolgen (vgl. 
Darstellung in  [gemSpec_Krypt#]).]]></description>
    <description_html><![CDATA[Alle Produkttypen, die binäre Daten (also nicht XML-Daten) ECC-basiert verschlüsseln (im Folgenden als Nutzerdaten bezeichnet) und diese mittels CMS [RFC-5626] kodieren, MÜSSEN folgende Vorgaben umsetzen.<br/> <ol><li>Zunächst MUSS ein 256-Bit AES-Schlüssel zufällig erzeugt werden (vgl. GS-A_4368),<br/> Dieser Schlüssel wird im Folgenden als Transportschlüssel bezeichnet (vgl. Erklärung in Abschnitt [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>]).<br/></li><li>Mit diesem Transportschlüssel MÜSSEN die Nutzerdaten mittels AES-GCM und den Vorgaben aus GS-A_4389 verschlüsselt werden.<br/></li><li>Der Transportschlüssel MUSS unkodiert mit den in [gemSpec_COS#6.8.1.4 ELC Verschlüsselung] aufgeführten Vorgaben mittels ECIES verschlüsselt werden (siehe Erklärung in [gemSpec_Krypt#ECIES]). Das damit entstehende Chiffrat wird im Folgenden als Transport-Chiffrat bezeichnet.<br/></li><li>Das Transport-Chiffrat MUSS wie in [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>] beschrieben in eine ASN.1-Struktur (Tupel (PO, C, T) in kartenkompatibler ASN.1-Binärverpackung kodiert werden.<br/></li><li>Diese Kodierung MUSS in eine keyEncryptionAlgorithm-Datenstruktur mit der OID oid_ti_ecies_transport_encryption [gemSpec_OID] eingebracht werden.<br/></li><li>Die restliche Kodierung des mittels AES-GCM erzeugten Chiffrats der Nutzerdaten MUSS wie in CMS üblich [RFC-5626] [RFC-5084] erfolgen (vgl. Darstellung in  [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>]).<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17221-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-110890" revision="539800">
    <title><![CDATA[XML-Verschlüsselung (ECIES) (ECC-Migration)]]></title>
    <description><![CDATA[Alle Produkttypen, die XML-Dokumente mittels [XMLEnc-1.1] und ECC-basierte 
verschlüsseln, MÜSSEN die Vorgaben aus A_17220 Spiegelstrich 1 bis 3 umsetzen. 
Weiter MÜSSEN sie folgende Vorgaben umsetzen:

 * Das Transport-Chiffrat MUSS wie in [gemSpec_Krypt#] beschrieben in eine 
ASN.1-Struktur (Tupel (PO, C, T) in kartenkompatibler ASN.1-Binärverpackung 
kodiert werden.

 * Diese ASN.1-Binärverpackung MUSS Base64-kodiert werden und so kodiert in 
eine XML-Datenstruktur, so wie sie in [gemSpec_Krypt#] beschrieben ist, 
eingebracht werden (Hinweis: man beachte ohne "RecipientKeyInfo" Tags).

 * Die mittels AES-GCM verschlüsselten Nutzerdaten MÜSSEN ebenfalls 
Base64-kodiert in die eben erzeugte XML-Datenstruktur gemäß [gemSpec_Krypt#] 
eingebracht werden.]]></description>
    <description_html><![CDATA[Alle Produkttypen, die XML-Dokumente mittels [XMLEnc-1.1] und ECC-basierte verschlüsseln, MÜSSEN die Vorgaben aus A_17220 Spiegelstrich 1 bis 3 umsetzen. Weiter MÜSSEN sie folgende Vorgaben umsetzen:<br/> <ol><li>Das Transport-Chiffrat MUSS wie in [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>] beschrieben in eine ASN.1-Struktur (Tupel (PO, C, T) in kartenkompatibler ASN.1-Binärverpackung kodiert werden.<br/></li><li>Diese ASN.1-Binärverpackung MUSS Base64-kodiert werden und so kodiert in eine XML-Datenstruktur, so wie sie in [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>] beschrieben ist, eingebracht werden (Hinweis: man beachte ohne &quot;<span style="font-size: 10pt;font-family: 'Courier New', Courier, monospace, HanWangKanTan;line-height: 1.5;">RecipientKeyInfo&quot;</span> Tags).<br/></li><li>Die mittels AES-GCM verschlüsselten Nutzerdaten MÜSSEN ebenfalls Base64-kodiert in die eben erzeugte XML-Datenstruktur gemäß [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>] eingebracht werden.</li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17575" type="leafRequirement" severity="MUSS" lastUpdate="2019-05-13" technicalID="ML-94025" revision="539800">
    <title><![CDATA[MobKT: Verschlüsselung binärer Daten (ECIES) (ECC-Migration)]]></title>
    <description><![CDATA[Ein Mobiles Kartenterminal MUSS folgende Vorgaben umsetzen. 

 * Für die Verschlüsselung der Versichertendaten MUSS ein 256-Bit 
AES-Schlüssel zufällig erzeugt werden (vgl. GS-A_4368). Dieser Schlüssel wird 
im Folgenden als Transportschlüssel bezeichnet.

 * Mit diesem Transportschlüssel MÜSSEN die Versichertendaten mit AES-GCM und 
den Vorgaben aus GS-A_4389 verschlüsselt werden.

 * Der Transportschlüssel MUSS mit den in [gemSpec_COS#6.8.1.4 ELC 
Verschlüsselung] aufgeführten Vorgaben mittels ECIES verschlüsselt werden 
(siehe Erklärung in [gemSpec_Krypt#] und [gemSpec_Krypt#Hinweis zu A_17575]).

 * Falls auf dem gesteckten HBA ein ECC-basiertes ENC-Zertifikat vorhanden 
ist, so MUSS ECIES für die Ver- und Entschlüsselung des Transportschlüssels 
verwendet werden, anstatt von RSA-OAEP. Falls noch kein ECIES-verschlüsselter 
Transportschlüssel im Mobilen Kartenterminal vorliegt, sondern 
ein RSA-OAEP-verschlüsselter Transportschlüssel, so MUSS dieser 
Transportschlüssel zusätzlich mittels ECIES und dem ECC-ENC-Schlüssel des HBAs 
des LE verschlüsselt werden.]]></description>
    <description_html><![CDATA[Ein Mobiles Kartenterminal MUSS folgende Vorgaben umsetzen. <br/> <ol><li>Für die Verschlüsselung der Versichertendaten MUSS ein 256-Bit AES-Schlüssel zufällig erzeugt werden (vgl. GS-A_4368). Dieser Schlüssel wird im Folgenden als Transportschlüssel bezeichnet.<br/></li><li>Mit diesem Transportschlüssel MÜSSEN die Versichertendaten mit AES-GCM und den Vorgaben aus GS-A_4389 verschlüsselt werden.<br/></li><li>Der Transportschlüssel MUSS mit den in [gemSpec_COS#6.8.1.4 ELC Verschlüsselung] aufgeführten Vorgaben mittels ECIES verschlüsselt werden (siehe Erklärung in [gemSpec_Krypt#<span data-option-id="longoutline" data-item-id="ML-92597" id="fake" data-type="crossReference" class="polarion-rte-link"></span>] und [gemSpec_Krypt#Hinweis zu A_17575]).<br/></li><li>Falls auf dem gesteckten HBA ein ECC-basiertes ENC-Zertifikat vorhanden ist, so MUSS ECIES für die Ver- und Entschlüsselung des Transportschlüssels verwendet werden, anstatt von RSA-OAEP. Falls noch kein ECIES-verschlüsselter Transportschlüssel im Mobilen Kartenterminal vorliegt, sondern ein RSA-OAEP-verschlüsselter Transportschlüssel, so MUSS dieser Transportschlüssel zusätzlich mittels ECIES und dem ECC-ENC-Schlüssel des HBAs des LE verschlüsselt werden.<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17089-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-01" technicalID="ML-134944" revision="539800">
    <title><![CDATA[eHealth-Kartenterminals: TLS-Verbindungen (ECC-Migration)]]></title>
    <description><![CDATA[Ein eHealth-Kartenterminal MUSS prüfen, ob die in ihm gesteckte SMC-KT für die 
TLS-Verbindung zum Konnektor eine RSA-basierte Identität (AUT) und/oder eine 
ECDSA-basierte Identität besitzt (vgl. [gemSpec_gSMC-KT_ObjSys_G2.1], bspw. 
jeweils EFs mit ShortFileIdentifier 1 und 4 prüfen).
 Falls eine RSA-basierte Identität dort vorhanden ist, so MUSS das 
eHealth-Kartenterminal folgende TLS-folgende Vorgaben erfüllen:

 * Als Cipher-Suite MÜSSEN TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 
und TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 unterstützt werden. 
 * Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. 
"ECDHE" im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 
[FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und 
brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere 
Kurven als in A_17089-* aufgeführt DÜRFEN NICHT verwendet werden.

 * Es KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] 
unterstützen.
 Falls eine ECDSA-basierte Identität vorhanden ist, so MUSS das 
eHealth-Kartenterminal zusätzlich folgende Vorgaben erfüllen:

 *  Als Ciphersuiten MÜSSEN TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 
(0xC0,0x2B) und  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 
(0xC0,0x2C) unterstützt werden. 
 * Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. 
"ECDHE" im Namen der Cipher-Suites) MÜSSEN die Kurven P-256 und P-384 
[FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und 
brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere 
Kurven als in GS-A_17089-* aufgeführt DÜRFEN NICHT verwendet werden.  Dies 
bedeutet, falls beide Identitäten auf der SMC-KT vorhanden sind (wie bei 
[gemSpec_gSMC-KT_ObjSys_G2.1]), so MÜSSEN alle vier oben genannten Ciphersuiten 
unterstützt werden.]]></description>
    <description_html><![CDATA[Ein eHealth-Kartenterminal MUSS prüfen, ob die in ihm gesteckte SMC-KT für die TLS-Verbindung zum Konnektor eine RSA-basierte Identität (AUT) und/oder eine ECDSA-basierte Identität besitzt (vgl. [gemSpec_gSMC-KT_ObjSys_G2.1], bspw. jeweils EFs mit ShortFileIdentifier 1 und 4 prüfen).<br/>
Falls eine RSA-basierte Identität dort vorhanden ist, so MUSS das eHealth-Kartenterminal folgende TLS-folgende Vorgaben erfüllen: <br/>
 
<ol>
  <li>Als Cipher-Suite MÜSSEN <span style="font-size: 10pt;line-height: 1.5;">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 und TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 unterstützt werden.</span> <span style="font-size: 10pt;line-height: 1.5;"><div style="margin-left: 40px;"></div></span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. &quot;ECDHE&quot; im Namen der Cipher-Suites) </span>MÜSSEN die Kurven P-256 und P-384 [FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven als in A_17089-* aufgeführt DÜRFEN NICHT verwendet werden.<br/>
    <span style="font-size: 10pt;line-height: 1.5;"><div style="margin-left: 40px;"></div> 
      <div style="margin-left: 40px;"> </div>
      </span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Es KÖNNEN weitere Cipher-Suiten aus [TR-02102-2, Abschnitt 3.3.1 Tabelle 1] unterstützen.</span><br/>
    </li>
</ol>
Falls eine ECDSA-basierte Identität vorhanden ist, so MUSS das eHealth-Kartenterminal zusätzlich folgende Vorgaben erfüllen:<br/>
 
<ol>
  <li> Als Ciphersuiten MÜSSEN TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xC0,0x2B) und  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xC0,0x2C) unterstützt werden.</li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Beim ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch (vgl. &quot;ECDHE&quot; im Namen der Cipher-Suites) </span>MÜSSEN die Kurven P-256 und P-384 [FIPS-186-4] unterstützt werden. Es SOLLEN die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden. Andere Kurven als in GS-A_17089-* aufgeführt DÜRFEN NICHT verwendet werden.</li>
</ol>
 Dies bedeutet, falls beide Identitäten auf der SMC-KT vorhanden sind (wie bei [gemSpec_gSMC-KT_ObjSys_G2.1]), so MÜSSEN alle vier oben genannten Ciphersuiten unterstützt werden.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17090-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-10-18" technicalID="ML-126197" revision="539800">
    <title><![CDATA[eHealth-Kartenterminals: Signaturverfahren beim initialen Pairing zwischen Konnektor und eHealth-Kartenterminal (ECC-Migration)]]></title>
    <description><![CDATA[Ein eHealth-Kartenterminal MUSS in Bezug auf das verwendete Signaturverfahren 
beim initialen Pairing zwischen Konnektor und eHealth-Kartenterminal folgende 
Vorgaben umsetzen:

 * Falls für die aktuelle TLS-Verbindung mit dem Konnektor eine RSA-basierte 
Ciphersuite verwendet wird, so MUSS für die Signatur des Shared-Secret 
(ShS.AUT.KT vgl. [gemSpec_KT#2.5.2.1, 3.7.2.1]) RSASSA-PSS [PKCS#1] und SHA-256 
verwendet werden. (Hinweis: die Parameter für RSASSA-PSS wie MGF oder 
Salt-Länge sind durch die SMC-KT eindeutig und fest vorgegeben und werden 
deshalb hier nicht aufgeführt.)

 * Falls für die aktuelle TLS-Verbindung mit dem Konnektor eine ECDSA-basierte 
Ciphersuite verwendet wird, so MUSS für die Signatur des Shared-Secret ECDSA 
[BSI-TR-03111] und SHA-256 verwendet werden (Hinweis: die zu verwendenden 
Domainparameter (Kurve etc.) sind durch die SMC-KT eindeutig und fest 
vorgegeben). Für die Kodierung der ECC-Parameter in der Signatur MUSS die 
plain-Kodierung nach[TR-03111#5.2.1] verwendet werden.]]></description>
    <description_html><![CDATA[Ein eHealth-Kartenterminal MUSS in Bezug auf das verwendete Signaturverfahren beim initialen Pairing zwischen Konnektor und eHealth-Kartenterminal folgende Vorgaben umsetzen:<br/> <ol><li>Falls für die aktuelle TLS-Verbindung mit dem Konnektor eine RSA-basierte Ciphersuite verwendet wird, so MUSS für die Signatur des Shared-Secret (ShS.AUT.KT vgl. [gemSpec_KT#2.5.2.1, 3.7.2.1]) RSASSA-PSS [PKCS#1] und SHA-256 verwendet werden. (Hinweis: die Parameter für RSASSA-PSS wie MGF oder Salt-Länge sind durch die SMC-KT eindeutig und fest vorgegeben und werden deshalb hier nicht aufgeführt.)<br/></li><li>Falls für die aktuelle TLS-Verbindung mit dem Konnektor eine ECDSA-basierte Ciphersuite verwendet wird, so MUSS für die Signatur des Shared-Secret ECDSA [BSI-TR-03111] und SHA-256 verwendet werden (Hinweis: die zu verwendenden Domainparameter (Kurve etc.) sind durch die SMC-KT eindeutig und fest vorgegeben). Für die Kodierung der ECC-Parameter in der Signatur MUSS die plain-Kodierung nach <span style="font-size: 10pt;line-height: 1.5;">[TR-03111#5.2.1]</span> verwendet werden.<br/></li></ol>]]></description_html>
  </requirement>
  <requirement id="A_17183" type="leafRequirement" severity="MUSS" lastUpdate="2019-05-13" technicalID="ML-92826" revision="539800">
    <title><![CDATA[CA-Zertifikate der relevanten TSP speichern (ECC-Migration)]]></title>
    <description><![CDATA[Das eHealth-Kartenterminal MUSS bei der Umsetzung von [gemSpec_KT#TIP1-A_3255] 
sowohl RSA-basierte CA-Zertifikate der Komponenten-PKI als auch ECC-basierte 
CA-Zertifikate (TSL(ECC-RSA)) der Komponten-PKI speichern.]]></description>
    <description_html><![CDATA[Das eHealth-Kartenterminal MUSS bei der Umsetzung von [gemSpec_KT#TIP1-A_3255] sowohl RSA-basierte CA-Zertifikate der Komponenten-PKI als auch ECC-basierte CA-Zertifikate (TSL(ECC-RSA)) der Komponten-PKI speichern.<br/>]]></description_html>
  </requirement>
  <requirement id="A_22458" type="leafRequirement" severity="MUSS" lastUpdate="2022-10-18" technicalID="ML-126198" revision="539800">
    <title><![CDATA[TLS-Algorithmus passend zum Pairing]]></title>
    <description><![CDATA[Der Konnektor MUSS beim TLS-Verbindungsaufbau (TLS-Handshake) zu einem 
eHealth-Kartenterminal ausschließlich Ciphersuiten mit solchen 
Authentisierungsalgorithmen (entweder RSA oder ECDSA) anbieten, die zum 
Algorithmus des gespeicherten KT-Zertifikats passen, wenn zu diesem 
Kartenterminal bereits Pairinginformationen (Shared Secret in Kombination mit 
dem Zertifikat des Kartenterminals) gespeichert sind.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS beim TLS-Verbindungsaufbau (TLS-Handshake) zu einem eHealth-Kartenterminal ausschließlich Ciphersuiten mit solchen Authentisierungsalgorithmen (entweder RSA oder ECDSA) anbieten, die zum Algorithmus des gespeicherten KT-Zertifikats passen, wenn zu diesem Kartenterminal bereits Pairinginformationen (Shared Secret in Kombination mit dem Zertifikat des Kartenterminals) gespeichert sind.]]></description_html>
  </requirement>
  <requirement id="A_22451" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-126169" revision="539800">
    <title><![CDATA[ClientHello ohne akzeptable Cipher-Suite]]></title>
    <description><![CDATA[Falls die ClientHello-Nachricht keine der gemäß [gemSpec_Krypt#A_17089-01] zu 
unterstützenden Cipher-Suiten enthält, dann MUSS das eHealth-Kartenterminal die 
ClientHello-Nachricht mit einem "handshake_failure" beantworten, siehe 
[RFC-5426#7.4.1.2].]]></description>
    <description_html><![CDATA[Falls die ClientHello-Nachricht keine der gemäß [gemSpec_Krypt#A_17089-01]<span id="polarion-comment:489"></span> zu unterstützenden Cipher-Suiten enthält, dann MUSS das eHealth-Kartenterminal die ClientHello-Nachricht mit einem &quot;handshake_failure&quot; beantworten, siehe [RFC-5426#7.4.1.2].]]></description_html>
  </requirement>
  <requirement id="A_22453" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-126174" revision="539800">
    <title><![CDATA[ServerHello, Cipher-Suite]]></title>
    <description><![CDATA[Von den gemäß [gemSpec_Krypt#A_17089-01] zu unterstützenden Cipher-Suiten wählt 
das eHealth-Kartenterminal eine aus, vergleiche [RFC-5426#7.4.1.3]. Falls das 
eHealth-Kartenterminal eine Cipher-Suite aus [gemSpec_Krypt#A_17089-01] in der 
Form

 * TLS_DHE_RSA... (also RSA) auswählt, dann MUSS es eine RSA-basierte 
Identität zur Authentisierung im Kontext des TLS-Protokols verwenden. 
 * TLS_ECDHE_ECDSA... (also ECDSA) auswählt, dann MUSS es eine ECDSA-basierte 
Identität zur Authentisierung im Kontext des TLS-Protokols verwenden.]]></description>
    <description_html><![CDATA[Von den gemäß [gemSpec_Krypt#A_17089-01]<span id="polarion-comment:490"></span> zu unterstützenden Cipher-Suiten wählt das eHealth-Kartenterminal eine aus, vergleiche [RFC-5426#7.4.1.3]. Falls das eHealth-Kartenterminal eine Cipher-Suite aus [gemSpec_Krypt#A_17089-01]<span id="polarion-comment:491"></span> in der Form<br/>
 
<ol>
  <li>TLS_DHE_RSA... (also RSA) auswählt, dann MUSS es eine RSA-basierte Identität zur Authentisierung im Kontext des TLS-Protokols verwenden.</li>
  <li>TLS_ECDHE_ECDSA... (also ECDSA) auswählt, dann MUSS es eine ECDSA-basierte Identität zur Authentisierung im Kontext des TLS-Protokols verwenden.</li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_22454" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-126173" revision="539800">
    <title><![CDATA[CertificateRequest]]></title>
    <description><![CDATA[Das eHealth-Kartenterminal MUSS eine CertificateRequest-Nachricht schicken, für 
die folgendes gilt:

 * Die Struktur CertificateRequest gemäß [RFC-5246#7.4.4] MUSS im Abschnitt 
certificate_types genau ein Element vom Typ ClientCertificateType enthalten. 
 * Falls das eHealth-Kartenterminal in der ServerHello-Nachricht eine 
Cipher-Suite aus [gemSpec_Krypt#A_17089-01] in der Form 
 * TLS_DHE_RSA... (also RSA) anzeigt, dann MUSS als ClientCertificateType 
"rsa_sign" gewählt werden, siehe [RFC-5246#7.4.4]. 
 * TLS_ECDHE_ECDSA... (also ECDSA) anzeigt, dann MUSS als 
ClientCertificateType "ecdsa_sign" gewählt werden, siehe [RFC-8422#5.5].]]></description>
    <description_html><![CDATA[Das eHealth-Kartenterminal MUSS eine CertificateRequest-Nachricht schicken, für die folgendes gilt:<br/>
 
<ol>
  <li>Die Struktur CertificateRequest gemäß [RFC-5246#7.4.4] MUSS im Abschnitt certificate_types genau ein Element vom Typ ClientCertificateType enthalten.</li>
  <li>Falls das eHealth-Kartenterminal in der ServerHello-Nachricht eine Cipher-Suite aus [gemSpec_Krypt#A_17089-01]<span id="polarion-comment:492"></span> in der Form</li>
  <ol>
    <li>TLS_DHE_RSA... (also RSA) anzeigt, dann MUSS als ClientCertificateType &quot;rsa_sign&quot; gewählt werden, siehe [RFC-5246#7.4.4].</li>
    <li>TLS_ECDHE_ECDSA... (also ECDSA) anzeigt, dann MUSS als ClientCertificateType &quot;ecdsa_sign&quot; gewählt werden, siehe [RFC-8422#5.5].<br/>
      </li>
  </ol>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_22455" type="leafRequirement" severity="MUSS" lastUpdate="2022-02-01" technicalID="ML-126176" revision="539800">
    <title><![CDATA[ClientCertificate]]></title>
    <description><![CDATA[Bezüglich der ClientCertificate-Nachricht (siehe [RFC-5246#7.4.6]) gilt für das 
eHealth-Kartenterminal folgendes Verhalten:

 * Falls der Client keine ClientCertificate-Nachricht schickt, dann MUSS der 
TLS-Handshake mit einem "failure alert" abgebrochen werden. 
 * Der TLS-Handshake MUSS fortgesetzt werden, selbst wenn die 
"certificate_list" 
 * leer ist (also kein Element enthält), oder 
 * kein End-Entity-Zertifikat daraus erfolgreich extrahiert und erfolgreich 
gegen eine im eHealth-Kartenterminal gespeicherte CA geprüft werden konnte, oder
 * ein End-Entity-Zertifikat unpassenden Typs enthält (beispielsweise 
RSA-PublicKey statt ECDSA-PublicKey).]]></description>
    <description_html><![CDATA[Bezüglich der ClientCertificate-Nachricht (siehe [RFC-5246#7.4.6]) gilt für das eHealth-Kartenterminal folgendes Verhalten:<br/>
 
<ol>
  <li>Falls der Client keine ClientCertificate-Nachricht schickt, dann MUSS der TLS-Handshake mit einem &quot;failure alert&quot; abgebrochen werden.</li>
  <li>Der TLS-Handshake MUSS fortgesetzt werden, selbst wenn die &quot;certificate_list&quot;</li>
  <ol>
    <li>leer ist (also kein Element enthält), oder</li>
    <li>kein End-Entity-Zertifikat daraus erfolgreich extrahiert und erfolgreich gegen eine im eHealth-Kartenterminal gespeicherte CA geprüft werden konnte, oder</li>
    <li>ein End-Entity-Zertifikat unpassenden Typs enthält (beispielsweise RSA-PublicKey statt ECDSA-PublicKey).</li>
  </ol>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_17094-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-108707" revision="539800">
    <title><![CDATA[TLS-Verbindungen Konnektor (ECC-Migration)]]></title>
    <description><![CDATA[Der Konnektor MUSS zusätzlich zu den RSA-basierten TLS-Ciphersuiten (vgl. 
GS-A_4385 und GS-A_5345-01) die TLS-Ciphersuiten

 * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 und 

 * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
unterstützen. Dabei MÜSSEN bei dem ephemeren 
Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch die Kurven P-256 und P-384 
[FIPS-186-4] und die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. 
[RFC-5639] und [RFC-7027]) unterstützt werden.   Andere Kurven SOLLEN NICHT 
verwendet werden.
Falls der Konnektor in der Rolle TLS-Client agiert, so MUSS er die eben 
genannten Ciphersuiten gegenüber RSA-basierten Ciphersuiten (vgl. GS-A_4384-*) 
bevorzugen (in der Liste "cipher_suites" beim ClientHello vorne an stellen, 
vgl.  [RFC-5256#7.4.1.2 Client Hello]).]]></description>
    <description_html><![CDATA[Der Konnektor MUSS zusätzlich zu den RSA-basierten TLS-Ciphersuiten (vgl. GS-A_4385 und GS-A_5345-01)<span id="polarion-comment:511"></span> die TLS-Ciphersuiten<br/> <ol><li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 und <br/></li><li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384<br/></li></ol>unterstützen. Dabei MÜSSEN bei dem ephemeren Elliptic-Curve-Diffie-Hellman-Schlüsselaustausch die Kurven P-256 und P-384 [FIPS-186-4] und die Kurven brainpoolP256r1 und brainpoolP384r1 (vgl. [RFC-5639] und [RFC-7027]) unterstützt werden.   Andere Kurven SOLLEN NICHT verwendet werden.<br/>Falls der Konnektor in der Rolle TLS-Client agiert, so MUSS er die eben genannten Ciphersuiten gegenüber RSA-basierten Ciphersuiten (vgl. GS-A_4384-*)<span id="polarion-comment:480"></span> bevorzugen (in der Liste &quot;cipher_suites&quot; beim ClientHello vorne an stellen, vgl.  [RFC-5256#7.4.1.2 Client Hello]).<br/>]]></description_html>
  </requirement>
  <requirement id="A_17209" type="leafRequirement" severity="MUSS" lastUpdate="2022-03-28" technicalID="ML-92911" revision="539800">
    <title><![CDATA[Signaturverfahren für externe Authentisierung (ECC-Migration)]]></title>
    <description><![CDATA[Der Konnektor MUSS an der Schnittstelle für die externe Authentisierung 
die Signaturverfahren RSASSA-PKCS1-v1_5 [PKCS#1], RSASSA-PSS [PKCS#1]  und 
ECDSA [BSI-TR-03111] anbieten.]]></description>
    <description_html><![CDATA[Der Konnektor MUSS an der Schnittstelle für die externe Authentisierung die Signaturverfahren RSASSA-PKCS1-v1_5 [PKCS#1], RSASSA-PSS [PKCS#1]  und ECDSA [BSI-TR-03111] anbieten.]]></description_html>
  </requirement>
  <requirement id="A_16884" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-90062" revision="539800">
    <title><![CDATA[VAU-Protokoll: Nachrichtentypen und HTTP-Content-Type]]></title>
    <description><![CDATA[Es gibt genau zwei Nachrichtenarten: (1) Nachrichten zur Schlüsselaushandlung 
(VAUClientHello, VAUServerHello, VAUClientSigFin und VAUServerFin) und 
Fehlermeldungsübermittlung (VAUServerError) und (2) Nachrichten, die 
kryptographisch geschützte Nutzerdaten transportieren.
 Typ-(1)-Nachrichten MÜSSEN vom Client und vom Server jeweils per HTTP mit dem 
Content-Type 'application/json' übermittelt werden und Typ-(2)-Nachrichten mit 
dem Content-Type 'application/octet-stream'.]]></description>
    <description_html><![CDATA[Es gibt genau zwei Nachrichtenarten: (1) Nachrichten zur Schlüsselaushandlung (VAUClientHello, VAUServerHello, VAUClientSigFin und VAUServerFin) und Fehlermeldungsübermittlung (VAUServerError) und (2) Nachrichten, die kryptographisch geschützte Nutzerdaten transportieren.<br/> Typ-(1)-Nachrichten MÜSSEN vom Client und vom Server jeweils per HTTP mit dem Content-Type 'application/json' übermittelt werden und Typ-(2)-Nachrichten mit dem Content-Type 'application/octet-stream'.]]></description_html>
  </requirement>
  <requirement id="A_17074" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-92431" revision="539800">
    <title><![CDATA[VAU-Protokoll: Ignorieren von zusätzlichen Datenfeldern in Protokoll-Nachrichten]]></title>
    <description><![CDATA[Ein Client oder ein Server MUSS zusätzliche (i. S. v. ihm unbekannte) 
Datenfelder (Key-Value-Paare) in JSON-Objekten (Typ-(1)-Nachrichten und 
"Data"-Feldern darin) im Rahmen des VAU-Protokolls ignorieren.]]></description>
    <description_html><![CDATA[Ein Client oder ein Server MUSS zusätzliche (i. S. v. ihm unbekannte) Datenfelder (Key-Value-Paare) in JSON-Objekten (Typ-(1)-Nachrichten und &quot;Data&quot;-Feldern darin) im Rahmen des VAU-Protokolls ignorieren.]]></description_html>
  </requirement>
  <requirement id="A_17081" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-92440" revision="539800">
    <title><![CDATA[VAUProtokoll: zu verwendende Signaturschlüssel]]></title>
    <description><![CDATA[Ein Client und ein Server MUSS für die Signatur im Rahmen des VAU-Protokolls 
(VAUServerHello- und VAUClientSigFin-Nachrichten) Schlüsselmaterial verwenden, 
dass dediziert für die Entity-Authentication vorgesehen ist 
(AUT-Schlüsselmaterial (einer eGK, einer SMC-B etc.) oder privates 
Schlüsselmaterial der VAU-Server-Identität (Rollenprofil "oid_epa_vau")).]]></description>
    <description_html><![CDATA[Ein Client und ein Server MUSS für die Signatur im Rahmen des VAU-Protokolls (VAUServerHello- und VAUClientSigFin-Nachrichten) Schlüsselmaterial verwenden, dass dediziert für die Entity-Authentication vorgesehen ist (AUT-Schlüsselmaterial (einer eGK, einer SMC-B etc.) oder privates Schlüsselmaterial der VAU-Server-Identität (Rollenprofil &quot;oid_epa_vau&quot;)).]]></description_html>
  </requirement>
  <requirement id="A_16883-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-102745" revision="539800">
    <title><![CDATA[VAU-Protokoll: Aufbau VAUClientHello-Nachricht]]></title>
    <description><![CDATA[Der Client MUSS die Kommunikation mittels einer VAUClientHello-Nachricht 
initiieren. Dafür erzeugt er zunächst eine VAUClientHelloData-Datenstruktur der 
Form
{
"DataType" : "VAUClientHelloData",
"CipherConfiguration" : [ "AES-256-GCM-BrainpoolP256r1-SHA-256" ],
"PublicKey"  : "...Base64-kodierter-ECC-Schlüssel(DER)...",
 "AuthorizationAssertion" : "Authorizaton Assertion (Base64-kodiert)",
 "CertificateHash" : "...Base64-kodierter SHA-256 Hashwert des 
Client-X.509-Zertifikats"
}
 Der Client MUSS im Rahmen der Schlüsselaushandlung ein ECDH-Schlüsselpaar 
basierend auf der Kurve BrainpoolP256r1 [RFC-5639] erzeugen. Er MUSS im 
"PublicKey"-Feld den öffentlichen Punkt des ephemeren ECDH-Schlüsselpaares  
Base64-kodiert gemäß [TR-03111#5.1.1 X9.62 Format] eintragen. Im 
”AuthorizationAssertion”-Feld MUSS der Client die Base64-kodierte 
Authorization-Assertion gemäß A_15592-03eintragen. Der Client MUSS im 
”CertificateHash”-Feld den Base64-kodierten Hashwert seines Client-Zertifikats 
(AUT- oder AUT_alt-Zertifikat) eintragen (Der Hashwert wird vom kompletten 
DER-kodierten X.509-Zertifikat inkl. äußerer Zertifikatssignatur erzeugt. Der 
SHA-256 Hashwert (d. h. 256-Bit = 32 Byte) wird anschließend Base64-kodiert. 
Diese Kodierung wird als Wert bei ”CertificateHash” eingetragen.).

Beispiel:
{
"DataType" : "VAUClientHelloData",
"CipherConfiguration": [ "AES-256-GCM-BrainpoolP256r1-SHA-256" ],
"PublicKey" : 
"MFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDY8OMZlrJpLUdgnm8gHbevpFjemkL8IxMXohQlw3VHePf+T1lW+P0nW9VpnU1SxwCkjY1PU6HGTT+3wawKvRIE=",
 "AuthorizationAssertion" : ".......",
 "CertificateHash" : "wu72yzp4KdtcWV/vJUcKW14UL+FIJyWcwgETbxwDK+4="
}

Hinweis: Der öffentliche Schlüssel im Beispiel hat nach der Base64-Dekodierung 
folgende ASN.1-Datenstruktur:
  0  90: SEQUENCE {
  2  20:   SEQUENCE {
  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 13   9:     OBJECT IDENTIFIER brainpoolP256r1 (1 3 36 3 3 2 8 1 1 7)
       :     }
 24  66:   BIT STRING
       :     04 36 3C 38 C6 65 AC 9A 4B 51 D8 27 9B C8 07 6D
       :     EB E9 16 37 A6 90 BF 08 C4 C5 E8 85 09 70 DD 51
       :     DE 3D FF 93 D6 55 BE 3F 49 D6 F5 5A 67 53 54 B1
       :     C0 29 23 63 53 D4 E8 71 93 4F ED F0 6B 02 AF 44
       :     81
       :   }

 Der Client MUSS diese Datenstruktur Base64-kodieren und vom Ergebnis 
einen SHA-256-Hashwert bilden, den er später mit dem im VAUServerHello 
aufgeführten Wert vergleichen muss. In das Datenfeld "Data" in der 
folgenden VAUClientHello-Nachricht MUSS er die Base64-kodierte 
VAUClientHelloData-Daten eintragen.

Die VAUClientHello-Nachricht hat folgenden Aufbau:
{ 
"MessageType" : "VAUClientHello",
"Data"        : "...Base64-kodierte-VAUClientHelloData..."
}]]></description>
    <description_html><![CDATA[Der Client MUSS die Kommunikation mittels einer VAUClientHello-Nachricht initiieren. Dafür erzeugt er zunächst eine VAUClientHelloData-Datenstruktur der Form<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;DataType&quot; : &quot;VAUClientHelloData&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;CipherConfiguration&quot; : [ &quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; ],</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;PublicKey&quot;  : &quot;...Base64-kodierter-ECC-Schlüssel(DER)...&quot;,<br/>
  &quot;AuthorizationAssertion&quot; : &quot;Authorizaton Assertion (Base64-kodiert)&quot;,<br/>
  &quot;CertificateHash&quot; : &quot;...Base64-kodierter SHA-256 Hashwert des Client-X.509-Zertifikats&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
Der Client MUSS im Rahmen der Schlüsselaushandlung ein ECDH-Schlüsselpaar basierend auf der Kurve BrainpoolP256r1 [RFC-5639] erzeugen. Er MUSS im &quot;PublicKey&quot;-Feld den öffentlichen Punkt des ephemeren ECDH-Schlüsselpaares  Base64-kodiert gemäß [TR-03111#5.1.1 X9.62 Format] eintragen. Im ”AuthorizationAssertion”-Feld MUSS der Client die Base64-kodierte Authorization-Assertion gemäß A_15592-03 <span id="polarion-comment:509"></span>eintragen. Der Client MUSS im ”CertificateHash”-Feld den Base64-kodierten Hashwert seines Client-Zertifikats (AUT- oder AUT_alt-Zertifikat) eintragen (Der Hashwert wird vom kompletten DER-kodierten X.509-Zertifikat inkl. äußerer Zertifikatssignatur erzeugt. Der SHA-256 Hashwert (d. h. 256-Bit = 32 Byte) wird anschließend Base64-kodiert. Diese Kodierung wird als Wert bei ”CertificateHash” eingetragen.).<br/>
 <br/>
 <span style="font-size: 10pt;line-height: 1.5;">Beispiel:</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;DataType&quot; : &quot;VAUClientHelloData&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;CipherConfiguration&quot;: [ &quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; ],</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;PublicKey&quot; : &quot;MFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDY8OMZlrJpLUdgnm8gHbevpFjemkL8IxMXohQlw3VHePf+T1lW+P0nW9VpnU1SxwCkjY1PU6HGTT+3wawKvRIE=&quot;,<br/>
  &quot;AuthorizationAssertion&quot; : &quot;.......&quot;,<br/>
  &quot;CertificateHash&quot; : &quot;wu72yzp4KdtcWV/vJUcKW14UL+FIJyWcwgETbxwDK+4=&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}<br/>
</span> <br/>
 <span style="font-size: 10pt;line-height: 1.5;">Hinweis: Der öffentliche Schlüssel im Beispiel hat nach der Base64-Dekodierung folgende ASN.1-Datenstruktur:</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">  0  90: SEQUENCE {</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">  2  20:   SEQUENCE {</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;"> 13   9:     OBJECT IDENTIFIER brainpoolP256r1 (1 3 36 3 3 2 8 1 1 7)</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     }</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;"> 24  66:   BIT STRING</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     04 36 3C 38 C6 65 AC 9A 4B 51 D8 27 9B C8 07 6D</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     EB E9 16 37 A6 90 BF 08 C4 C5 E8 85 09 70 DD 51</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     DE 3D FF 93 D6 55 BE 3F 49 D6 F5 5A 67 53 54 B1</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     C0 29 23 63 53 D4 E8 71 93 4F ED F0 6B 02 AF 44</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :     81</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">       :   }</span><br/>
 <br/>
Der Client MUSS diese Datenstruktur Base64-kodieren und vom Ergebnis einen SHA-256-Hashwert bilden, den er später mit dem im VAUServerHello aufgeführten Wert vergleichen muss. In das Datenfeld &quot;Data&quot; in der folgenden VAUClientHello-Nachricht MUSS er die Base64-kodierte VAUClientHelloData-Daten eintragen.<br/>
 <br/>
 <span style="font-size: 10pt;line-height: 1.5;">Die VAUClientHello-Nachricht hat folgenden Aufbau:</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{ </span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;MessageType&quot; : &quot;VAUClientHello&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Data&quot;        : &quot;...Base64-kodierte-VAUClientHelloData...&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
 <br/>]]></description_html>
  </requirement>
  <requirement id="A_16897" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-90067" revision="539800">
    <title><![CDATA[VAU-Protokoll: Versand der VAUClientHello-Nachricht]]></title>
    <description><![CDATA[Der Client MUSS die VAUClientHello-Nachricht per HTTP mit dem Content-Type 
'application/json' an den Server senden.]]></description>
    <description_html><![CDATA[Der Client MUSS die VAUClientHello-Nachricht per HTTP mit dem Content-Type &#39;application/json&#39; an den Server senden.]]></description_html>
  </requirement>
  <requirement id="A_16898" type="leafRequirement" severity="MUSS" lastUpdate="2019-08-29" technicalID="ML-90069" revision="539800">
    <title><![CDATA[VAU-Protokoll: Erzeugung des Hashwert vom Data-Feld aus der VAUClientHello-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS beim Empfang der VAUClientHello-Nachricht einen 
SHA-256-Hashwert der Daten im Data-Feld (zunächst keine Base64-Dekodierung 
durchführen) erzeugen.]]></description>
    <description_html><![CDATA[Der Server MUSS beim Empfang der VAUClientHello-Nachricht einen SHA-256-Hashwert der Daten im Data-Feld (zunächst keine Base64-Dekodierung durchführen) erzeugen.]]></description_html>
  </requirement>
  <requirement id="A_16901-02" type="leafRequirement" severity="MUSS" lastUpdate="2020-06-08" technicalID="ML-109363" revision="539800">
    <title><![CDATA[VAU-Protokoll: Aufbau der VAUServerHello-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS auf die VAUClientHello-Nachricht mit einer 
VAUServerHello-Nachricht, folgender Form, antworten
{ 
"MessageType" : "VAUServerHello",
"Data"        : "...Base64-kodierte-Daten...",
"Signature"   : "...Base64-kodierte-ECDSA-Signatur...",
"Certificate" : "...Base64-kodiertes-Signaturzertifikat...",
"OCSPResponse" : "...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat..."
}

 Die ECDSA-Signatur MUSS nach [TR-03111#5.2.2. X9.62 Format] 
("ecdsa-with-Sha256") kodiert sein.
 In den Daten von "Data" MUSS der Server in die Base64-kodierte 
VAUServerHelloData-Datenstruktur der folgenden Form eintragen. Der Server MUSS 
im "CertificateHash"-Feld den Base64-kodierten SHA-256 Hashwert des 
Server-X.509-Zertifikats eintragen. (Der Hashwert wird vom kompletten 
DER-kodierten X.509-Zertifikat inkl. äußerer Zertifikatssignatur erzeugt. Der 
SHA-256 Hashwert (d. h. 256-Bit = 32 Byte) wird anschließend Base64-kodiert. 
Diese Kodierung wird als Wert bei ”CertificateHash” eingetragen.)
{
"DataType" : "VAUServerHelloData",
"CipherConfiguration" : [ "AES-256-GCM-BrainpoolP256r1-SHA-256" ],
"VAUClientHelloDataHash" :  
"...SHA-256-Hashwert-des-erhaltenen-Data-Felds-in-VAUClientHello...",
"PublicKey"  : "...Base64-kodierter-ECC-Schlüssel(DER)...",
 "CertificateHash" : "...Base64-kodierter SHA-256 Hashwert des 
Server-X.509-Zertifikats"
}
 Der Server MUSS im "PublicKey"-Feld den öffentlichen Punkt seines ephemeren 
ECDH-Schlüsselpaares Base64-kodiert gemäß [TR-03111#5.1.1 X9.62 Format] 
eintragen.

 Der Server MUSS im Feld "VAUClientHelloDataHash" den Base64-kodierten 
SHA-256-Hashwert der empfangenen VAUClientHelloData (ohne Base64-Dekodierung) 
eintragen (vgl.). 

 Der Server MUSS die in der Datenstruktur (VAUServerHello) angegebene Signatur 
erzeugen (über den Base64-kodieren Wert im "Data"-Feld). Im "Certificate"-Feld 
MUSS er das für eine Signaturprüfung notwendige EE-Zertifikat eintragen und im 
"OCSPResponse"-Feld die OCSP-Response, die nicht älter als 24 Stunden sein 
darf, für dieses EE-Zertifikat.]]></description>
    <description_html><![CDATA[Der Server MUSS auf die VAUClientHello-Nachricht mit einer VAUServerHello-Nachricht, folgender Form, antworten<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{ </span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;MessageType&quot; : &quot;VAUServerHello&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Data&quot;        : &quot;...Base64-kodierte-Daten...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Signature&quot;   : &quot;...Base64-kodierte-ECDSA-Signatur...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Certificate&quot; : &quot;...Base64-kodiertes-Signaturzertifikat...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;OCSPResponse&quot; : &quot;...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat...&quot;<br/>
  </span> <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
 <br/>
Die ECDSA-Signatur MUSS nach [TR-03111#5.2.2. X9.62 Format] (&quot;ecdsa-with-Sha256&quot;) kodiert sein.<br/>
 In den Daten von &quot;Data&quot; MUSS der Server in die Base64-kodierte VAUServerHelloData-Datenstruktur der folgenden Form eintragen. Der Server MUSS im &quot;CertificateHash&quot;-Feld den Base64-kodierten SHA-256 Hashwert des Server-X.509-Zertifikats eintragen. (Der Hashwert wird vom kompletten DER-kodierten X.509-Zertifikat inkl. äußerer Zertifikatssignatur erzeugt. Der SHA-256 Hashwert (d. h. 256-Bit = 32 Byte) wird anschließend Base64-kodiert. Diese Kodierung wird als Wert bei ”CertificateHash” eingetragen.)<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;DataType&quot; : &quot;VAUServerHelloData&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;CipherConfiguration&quot; : [ &quot;AES-256-GCM-BrainpoolP256r1-SHA-256&quot; ],</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;VAUClientHelloDataHash&quot; :  &quot;...SHA-256-Hashwert-des-erhaltenen-Data-Felds-in-VAUClientHello...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;PublicKey&quot;  : &quot;...Base64-kodierter-ECC-Schlüssel(DER)...&quot;,<br/>
  &quot;CertificateHash&quot; : &quot;...Base64-kodierter SHA-256 Hashwert des Server-X.509-Zertifikats&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
Der Server MUSS im &quot;PublicKey&quot;-Feld den öffentlichen Punkt seines ephemeren ECDH-Schlüsselpaares Base64-kodiert gemäß [TR-03111#5.1.1 X9.62 Format] eintragen.<br/>
 <br/>
Der Server MUSS im Feld &quot;VAUClientHelloDataHash&quot; den Base64-kodierten SHA-256-Hashwert der empfangenen VAUClientHelloData (ohne Base64-Dekodierung) eintragen (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_16898" data-item-id="ML-90069" data-option-id="custom"></span>). <br/>
 <br/>
Der Server MUSS die in der Datenstruktur (VAUServerHello) angegebene Signatur erzeugen (über den Base64-kodieren Wert im &quot;Data&quot;-Feld). Im &quot;Certificate&quot;-Feld MUSS er das für eine Signaturprüfung notwendige EE-Zertifikat eintragen und im &quot;OCSPResponse&quot;-Feld die OCSP-Response, die nicht älter als 24 Stunden sein darf, für dieses EE-Zertifikat.<br/>]]></description_html>
  </requirement>
  <requirement id="A_16902" type="leafRequirement" severity="MUSS" lastUpdate="2019-08-29" technicalID="ML-90074" revision="539800">
    <title><![CDATA[VAU-Protokoll: Versand der VAUServerHello-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS auf eine VAUClientHello-Nachricht mit einer 
VAUServerHello-Nachricht antworten. Der Server MUSS die 
VAUServerHello-Nachricht per HTTP mit dem Content-Type 'application/json' an 
den Client senden.]]></description>
    <description_html><![CDATA[Der Server MUSS auf eine VAUClientHello-Nachricht mit einer VAUServerHello-Nachricht antworten. Der Server MUSS die VAUServerHello-Nachricht per HTTP mit dem Content-Type &#39;application/json&#39; an den Client senden.]]></description_html>
  </requirement>
  <requirement id="A_16903" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-90073" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, Prüfung des VAUClientHelloDataHash-Werts (aus VAUServerHelloData)]]></title>
    <description><![CDATA[Der Client MUSS beim Empfang der VAUServerHello-Nachricht den Hashwert 
"VAUClientHelloDataHash" (vgl. A_16901-*) mit dem vom ihm (Client) vor dem 
Versand der VAUClientHello-Nachricht (vgl. A_16883-01) errechneten Wert 
vergleichen. Sind die beiden Werte verschieden, so MUSS der Client den 
Protokollablauf abbrechen.]]></description>
    <description_html><![CDATA[Der Client MUSS beim Empfang der VAUServerHello-Nachricht den Hashwert &quot;VAUClientHelloDataHash&quot; (vgl. A_16901-*)<span id="polarion-comment:510"></span> mit dem vom ihm (Client) vor dem Versand der VAUClientHello-Nachricht (vgl. A_16883-01)<span id="polarion-comment:512"></span> errechneten Wert vergleichen. Sind die beiden Werte verschieden, so MUSS der Client den Protokollablauf abbrechen.]]></description_html>
  </requirement>
  <requirement id="A_16941-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-11-23" technicalID="ML-102747" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, Prüfung der Signatur der VAUServerHelloData]]></title>
    <description><![CDATA[Der Client MUSS die Signatur der Daten von "Data" prüfen (bitgenau den 
Datenwert von "Data" nehmen, ohne eine Base64-Dekodierung) der "Data"-Daten 
vorzunehmen. Der Client MUSS dafür den Signaturschlüssel des Servers auf 
Authentizität und Integrität prüfen. (Hinweis: in einem Client wird die TSL der 
TI als Prüfgrundlage für die Prüfung von TI-Zertifikaten verwendet.) Falls die 
Signaturprüfung kein positives Ergebnis erbringt, so MUSS der Client den 
Protokollablauf abbrechen (vgl. A_16849).
 Der Client MUSS prüfen, ob der im VAUServerHelloData->CertificateHash 
aufgeführter Hashwert mit dem Hashwert des Server-Zertifikats im 
VAUServerHello->Certificate-Feld übereinstimmt (vgl. Erzeugung des Hashwerts in 
A_16901-*). Falls nein, so MUSS der Client den Protokollablauf abbrechen (vgl.).]]></description>
    <description_html><![CDATA[Der Client MUSS die Signatur der Daten von &quot;Data&quot; prüfen (bitgenau den Datenwert von &quot;Data&quot; nehmen, ohne eine Base64-Dekodierung) der &quot;Data&quot;-Daten vorzunehmen. Der Client MUSS dafür den Signaturschlüssel des Servers auf Authentizität und Integrität prüfen. (Hinweis: in einem Client wird die TSL der TI als Prüfgrundlage für die Prüfung von TI-Zertifikaten verwendet.) Falls die Signaturprüfung kein positives Ergebnis erbringt, so MUSS der Client den Protokollablauf abbrechen (vgl. A_16849).<br/>
Der Client MUSS prüfen, ob der im VAUServerHelloData-&gt;CertificateHash aufgeführter Hashwert mit dem Hashwert des Server-Zertifikats im VAUServerHello-&gt;Certificate-Feld übereinstimmt (vgl. Erzeugung des Hashwerts in A_16901-*). Falls nein, so MUSS der Client den Protokollablauf abbrechen (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_16849" data-item-id="ML-90091" data-option-id="custom"></span>).]]></description_html>
  </requirement>
  <requirement id="A_23273" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-134975" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, Prüfung der Signatur der VAUServerHelloData, Gültigkeit von OCSP-Antworten]]></title>
    <description><![CDATA[Der Client MUSS bei der Signaturprüfung der VAUServerHelloData die im 
"OCSPResponse"-Feld enthaltene OCSP-Response verwenden, wenn diese nicht älter 
als 24 Stunden ist.
 Dabei MUSS geprüft werden: Systemzeit - 24h <= producedAt. (Eine zusätzliche 
Auswertung von nextUpdate SOLL NICHT erfolgen.)
 Andernfalls MUSS der Client eine frische OCSP-Response einholen.]]></description>
    <description_html><![CDATA[<span style="font-size: 10pt;color: #172B4D;line-height: 1.5;">Der Client MUSS bei der Signaturprüfung der VAUServerHelloData die im &quot;OCSPResponse&quot;-Feld enthaltene OCSP-Response verwenden, wenn diese nicht älter als 24 Stunden ist.<br/> Dabei MUSS geprüft werden: Systemzeit - 24h &lt;= producedAt. (Eine zusätzliche Auswertung von nextUpdate SOLL NICHT erfolgen.)<br/> Andernfalls MUSS der Client eine frische OCSP-Response einholen.</span>]]></description_html>
  </requirement>
  <requirement id="A_16852-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-102751" revision="539800">
    <title><![CDATA[VAU-Protokoll: ECDH durchführen]]></title>
    <description><![CDATA[Der Client und auch der Server MÜSSEN jeweils für sich prüfen, ob der 
empfangene ephemere öffentliche elliptische Kurvenpunkt der Gegenseite auch auf 
der von ihnen verwendeten Kurve (BrainpoolP256r1) liegt.
 Falls nein, MÜSSEN sie jeweils den Protokollablauf abbrechen. Falls der 
Server derjenige ist, der in diesem Fall abbricht, MUSS der zuvor an den Client 
eine VAUServerError-Nachricht mit der Fehlermeldung "invalid curve (ECDH)" 
senden.
 Falls ja, MÜSSEN beide einen ECDH nach [NIST-800-56-A] durchführen. Das dabei 
erzeugte gemeinsame Geheimnis ist folgend Grundlage von drei 
Schlüsselableitungen (vgl. ).]]></description>
    <description_html><![CDATA[Der Client und auch der Server MÜSSEN jeweils für sich prüfen, ob der empfangene ephemere öffentliche elliptische Kurvenpunkt der Gegenseite auch auf der von ihnen verwendeten Kurve (BrainpoolP256r1) liegt.<br/> Falls nein, MÜSSEN sie jeweils den Protokollablauf abbrechen. Falls der Server derjenige ist, der in diesem Fall abbricht, MUSS der zuvor an den Client eine VAUServerError-Nachricht mit der Fehlermeldung &quot;invalid curve (ECDH)&quot; senden. <br/> Falls ja, MÜSSEN beide einen ECDH nach [NIST-800-56-A] durchführen. Das dabei erzeugte gemeinsame Geheimnis ist folgend Grundlage von drei Schlüsselableitungen (vgl. <span data-option-id="custom" data-item-id="ML-102752" data-custom-label="A_16943-01" id="fake" data-type="crossReference" class="polarion-rte-link"></span> ).]]></description_html>
  </requirement>
  <requirement id="A_16943-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-102752" revision="539800">
    <title><![CDATA[VAU-Protokoll: Schlüsselableitung (HKDF)]]></title>
    <description><![CDATA[Für die Schlüsselableitung MÜSSEN Client und Server die HKDF nach 
[RFC-5869] auf Basis von SHA-256 verwenden.
Das ”Input Keying Material” (IKM) [RFC-5869] ist das in  erzeugte gemeinsame 
ECDH-Geheimnis zwischen Server und Client.
 Die erste Schlüsselableitung hat den Ableitungsvektor ”KeyID” (”info” 
Parameter aus [RFC-5869] ist dann also ”KeyID”) und erzeugt einen 256 Bit 
langen Schlüsselidentifier.
 Die zweite Schlüsselableitung mit dem Ableitungsvektor 
”AES-256-GCM-Key-Client-to-Server” erzeugt den 256-Bit AES-Schlüssel für die 
Verwendung innerhalb von AES-256-GCM für Nachrichten, die der Client für den 
Server verschlüsselt.
 Die dritte Schlüsselableitung mit dem Ableitungsvektor ” 
AES-256-GCM-Key-Server-to-Client” erzeugt den 256-Bit AES-Schlüssel für die 
Verwendung innerhalb von AES-256-GCM für Nachrichten, die der Server für den 
Client verschlüsselt.]]></description>
    <description_html><![CDATA[Für die Schlüsselableitung MÜSSEN Client und Server die HKDF nach [RFC-5869] auf Basis von SHA-256 verwenden.<br/> <span style="font-size: 10pt;line-height: 1.5;">Das ”Input Keying Material” (IKM) [RFC-5869] ist das in <span data-option-id="custom" data-item-id="ML-102751" data-custom-label="A_16852-01" id="fake" data-type="crossReference" class="polarion-rte-link"></span> erzeugte gemeinsame ECDH-Geheimnis zwischen Server und Client.<br/> Die erste Schlüsselableitung hat den Ableitungsvektor ”KeyID” (”info” Parameter aus [RFC-5869] ist dann also ”KeyID”) und erzeugt einen 256 Bit langen Schlüsselidentifier.<br/> Die zweite Schlüsselableitung mit dem Ableitungsvektor ”AES-256-GCM-Key-Client-to-Server” erzeugt den 256-Bit AES-Schlüssel für die Verwendung innerhalb von AES-256-GCM für Nachrichten, die der Client für den Server verschlüsselt.<br/> Die dritte Schlüsselableitung mit dem Ableitungsvektor ” AES-256-GCM-Key-Server-to-Client” erzeugt den 256-Bit AES-Schlüssel für die Verwendung innerhalb von AES-256-GCM für Nachrichten, die der Server für den Client verschlüsselt.</span>]]></description_html>
  </requirement>
  <requirement id="A_17070-02" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-109364" revision="539800">
    <title><![CDATA[VAU-Protokoll: Aufbau der VAUClientSigFin-Nachricht]]></title>
    <description><![CDATA[Der Client MUSS auf eine VAUServerHello-Nachricht mit einer wie folgt 
definierten VAUClientSigFin-Nachricht antworten.
 Die VAUClientSigFin-Nachricht hat folgenden Aufbau:
{ 
"MessageType"    : "VAUClientSigFin",
"VAUClientHelloDataHash" 
: "...SHA-256-Hashwert-der-Base64-kodierten-VAUClientHelloData...",
"VAUServerHelloDataHash" 
: "...SHA-256-Hashwert-der-erhaltenen-Base64-kodierten-VAUServerHelloData...", 
"Signature" : "...Base64-kodierte-Signatur...",
"Certificate" : "...Base64-kodiertes-Signaturzertifikat...",
"OCSPResponse" : "...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat...",
"FinishedData" : "...Base64-kodierte-verschlüsselte-Finished-Daten ..."
}

 Im "VAUClientHelloDataHash"-Feld MUSS der Client den Base64-kodieren Hashwert 
seiner Base64-kodierten VAUClientHelloData eintragen.
 Im "VAUServerHelloDataHash"-Feld MUSS der Client den Base64-kodieren Hashwert 
der empfangenen Base64-kodierten VAUServerHelloData eintragen.
 Die folgende Signatur MUSS der Client über die beiden konkatenierten 
Base64-kodierten Zeichenketten (Inhalt vom "VAUClientHelloDataHash"-Feld || 
Inhalt vom "VAUClientServerDataHash"-Feld) bilden.

 Eine ECDSA-Signatur im "Signature"-Feld MUSS nach [TR-03111#5.2.2. X9.62 
Format] ("ecdsa-with-Sha256") kodiert sein.
Diese so kodierte Signatur wird Base64-kodiert und als Wert im 
"Signature"-Feld eingetragen.
 Eine RSASSA-PSS-Signatur MUSS nach [RFC-8017] (PKCS#1) kodiert werden. Diese 
so kodierte Signatur wird Base64-kodiert und als Wert im "Signature"-Feld 
eingetragen.
 (Verständnishinweis: Eine G2-Karte kann in Bezug auf AUT-Schlüssel nur 
RSA-Signaturen erzeugen. Eine G2.x-Karte kann und MUSS im Kontext VAU-Protokoll 
ECDSA-Signaturen erzeugen.)

 Der Client MUSS im "Certificate"-Feld das für die Prüfung der Signatur 
notwendige X.509-EE-Zertifikat Base64-kodiert eintragen.

 Er SOLL für dieses Zertifikat im "OCSPResponse"-Feld die OCSP-Response, die 
nicht älter als 24 Stunden sein darf, eintragen.
Falls ihm keine OCSP-Response zur Verfügung steht, so MUSS er im 
OCSPResponse-Feld den Leerstring als Wert eintragen ("OCSPResponse" : "").

 Der Client MUSS für die Berechnung des "FinishedData"-Feldes zunächst 
folgende Zeichenkette bilden
"VAUClientSigFin" ||
unkodierter Hashwert aus "VAUClientHelloDataHash" ||
unkodierter Hashwert aus  "VAUServerHelloDataHash"
 Diese Zeichenkette MUSS 15+32+32=79 Bytes lang sein. Der Client MUSS diese 
Zeichenkette mittels AES-GCM (vgl.) verschlüsseln und dabei folgende 
Zeichenkette bilden
256-Bit KeyID || 96-Bit Nonce (IV) mit Ciphertext und 128 Bit 
Authentication-Tag
 Diese Zeichenkette MUSS er Base64-kodieren und das Ergebnis als Wert 
des "FinishedData"-Feld eintragen.]]></description>
    <description_html><![CDATA[Der Client MUSS auf eine VAUServerHello-Nachricht mit einer wie folgt definierten VAUClientSigFin-Nachricht antworten.<br/>
Die VAUClientSigFin-Nachricht hat folgenden Aufbau:<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{ </span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;MessageType&quot;    : &quot;VAUClientSigFin&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;VAUClientHelloDataHash&quot; : &quot;...SHA-256-Hashwert-der-Base64-kodierten-VAUClientHelloData...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;VAUServerHelloDataHash&quot; : &quot;...SHA-256-Hashwert-der-erhaltenen-Base64-kodierten-VAUServerHelloData...&quot;, </span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Signature&quot; : &quot;...Base64-kodierte-Signatur...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Certificate&quot; : &quot;...Base64-kodiertes-Signaturzertifikat...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;OCSPResponse&quot; : &quot;...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;FinishedData&quot; : &quot;...Base64-kodierte-verschlüsselte-Finished-Daten ...&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
 <br/>
Im &quot;VAUClientHelloDataHash&quot;-Feld MUSS der Client den Base64-kodieren Hashwert seiner Base64-kodierten VAUClientHelloData eintragen.<br/>
 Im &quot;VAUServerHelloDataHash&quot;-Feld MUSS der Client den Base64-kodieren Hashwert der empfangenen Base64-kodierten VAUServerHelloData eintragen.<br/>
 Die folgende Signatur MUSS der Client über die beiden konkatenierten Base64-kodierten Zeichenketten (Inhalt vom &quot;VAUClientHelloDataHash&quot;-Feld || Inhalt vom &quot;VAUClientServerDataHash&quot;-Feld) bilden.<br/>
 <br/>
Eine ECDSA-Signatur im &quot;Signature&quot;-Feld MUSS nach [TR-03111#5.2.2. X9.62 Format] (&quot;ecdsa-with-Sha256&quot;) kodiert sein.<br/>
 <span style="font-size: 10pt;line-height: 1.5;">Diese so kodierte Signatur wird Base64-kodiert und als Wert im &quot;Signature&quot;-Feld eingetragen.<br/>
  Eine RSASSA-PSS-Signatur MUSS nach [RFC-8017] (PKCS#1) kodiert werden. Diese so kodierte Signatur wird Base64-kodiert und als Wert im &quot;Signature&quot;-Feld eingetragen.<br/>
  (Verständnishinweis: Eine G2-Karte kann in Bezug auf AUT-Schlüssel nur RSA-Signaturen erzeugen. Eine G2.x-Karte kann und MUSS im Kontext VAU-Protokoll ECDSA-Signaturen erzeugen.)<br/>
</span> <br/>
 Der Client MUSS im &quot;Certificate&quot;-Feld das für die Prüfung der Signatur notwendige X.509-EE-Zertifikat Base64-kodiert eintragen.<br/>
 <br/>
Er SOLL für dieses Zertifikat im &quot;OCSPResponse&quot;-Feld die OCSP-Response, die nicht älter als 24 Stunden sein darf, eintragen.<br/>
 <span style="font-size: 10pt;line-height: 1.5;">Falls ihm keine OCSP-Response zur Verfügung steht, so MUSS er im OCSPResponse-Feld den Leerstring als Wert eintragen (&quot;OCSPResponse&quot; : &quot;&quot;).<br/>
</span> <br/>
 Der Client MUSS für die Berechnung des &quot;FinishedData&quot;-Feldes zunächst folgende Zeichenkette bilden<br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;VAUClientSigFin&quot; ||</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">unkodierter Hashwert aus &quot;VAUClientHelloDataHash&quot; ||</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">unkodierter Hashwert aus  &quot;VAUServerHelloDataHash&quot;</span><br/>
 Diese Zeichenkette MUSS 15+32+32=79 Bytes lang sein. Der Client MUSS diese Zeichenkette mittels AES-GCM (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_16943-01" data-item-id="ML-102752" data-option-id="custom"></span>) verschlüsseln und dabei folgende Zeichenkette bilden<br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">256-Bit KeyID || 96-Bit Nonce (IV) mit Ciphertext und 128 Bit Authentication-Tag</span><br/>
 Diese Zeichenkette MUSS er Base64-kodieren und das Ergebnis als Wert des &quot;FinishedData&quot;-Feld eintragen.<br/>]]></description_html>
  </requirement>
  <requirement id="A_17071" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-92425" revision="539800">
    <title><![CDATA[VAU-Protokoll: Versand der VAUClientSigFin-Nachricht]]></title>
    <description><![CDATA[Der Client MUSS auf eine VAUServerHello-Nachricht mit einer 
VAUClientSigFin-Nachricht antworten. Der Client MUSS die 
VAUClientSigFin-Nachricht per HTTP mit dem Content-Type 'application/json' an 
den Server senden.]]></description>
    <description_html><![CDATA[Der Client MUSS auf eine VAUServerHello-Nachricht mit einer VAUClientSigFin-Nachricht antworten. Der Client MUSS die VAUClientSigFin-Nachricht per HTTP mit dem Content-Type &#39;application/json&#39; an den Server senden.]]></description_html>
  </requirement>
  <requirement id="A_17072-01" type="leafRequirement" severity="MUSS" lastUpdate="2021-04-12" technicalID="ML-102749" revision="539800">
    <title><![CDATA[VAU-Protokoll: Empfang der VAUClientSigFin-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS beim Empfang der VAUClientSigFin-Nachricht prüfen,

 * ob die darin enthaltene Signatur gültig ist,  
 * ob der Hashwert des Client-Zertifikats aus dem ”Certificate”-Feld gleich 
dem Hashwert aus dem ClientHelloData->CertificateHash-Feld ist (vgl. Erzeugung 
des Hashwerts in), und 
 * ob der Wert im "FinishedData"-Feld der nach  zu erwartenden Wert entspricht.
Falls eine der Prüfungen 1 bis 3 ein nicht-positives Prüfergebnis liefert, so 
MUSS der Server mit einer VAUServerError-Nachricht antworten und die weitere 
Protokolldurchführung abbrechen. Wobei er folgende Fehlermeldung pro Prüfung 
verwenden MUSS:

 * -> "Signature from VAUClientSigFin invalid" 
 * -> "Client Certificate inconsistent", und 
 * -> "VAUClientSigFin invalid".]]></description>
    <description_html><![CDATA[Der Server MUSS beim Empfang der VAUClientSigFin-Nachricht prüfen,<br/>
 
<ol>
  <li>ob die darin enthaltene Signatur gültig ist, </li>
  <li><span style="font-size: 10pt;line-height: 1.5;">ob der Hashwert des Client-Zertifikats aus dem ”Certificate”-Feld gleich dem Hashwert aus dem ClientHelloData-&gt;CertificateHash-Feld ist (vgl. Erzeugung des Hashwerts in <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_16883-01" data-item-id="ML-102745" data-option-id="custom"></span>), und</span></li>
  <li>ob der Wert im &quot;FinishedData&quot;-Feld der nach <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_17070-02" data-item-id="ML-109364" data-option-id="custom"></span> zu erwartenden Wert entspricht.</li>
</ol>
<span style="font-size: 10pt;line-height: 1.5;">Falls eine der Prüfungen 1 bis 3 ein nicht-positives Prüfergebnis liefert, so MUSS der Server mit einer VAUServerError-Nachricht antworten und die weitere Protokolldurchführung abbrechen. Wobei er folgende Fehlermeldung pro Prüfung verwenden MUSS:<br/>
</span> 
<ol>
  <li><span style="font-size: 10pt;line-height: 1.5;">-&gt; &quot;Signature from VAUClientSigFin invalid&quot;</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">-&gt; &quot;Client Certificate inconsistent&quot;, und</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">-&gt; &quot;VAUClientSigFin invalid&quot;.</span></li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_16899" type="leafRequirement" severity="MUSS" lastUpdate="2021-04-12" technicalID="ML-90070" revision="539800">
    <title><![CDATA[VAU-Protokoll: Aufbau der VAUServerFin-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS eine wie folgt aufgebaute VAUServerFin-Nachricht erzeugen.
{ 
"MessageType"    : "VAUServerFin",
"FinishedData" : "...Base64-kodierte-verschlüsselte-Finished-Daten..."
}
 Der Server MUSS für die Berechnung des "FinishedData"-Feldes zunächst 
folgende Zeichenkette bilden
"VAUServerFin" ||
unkodierter Hashwert aus "VAUClientHelloDataHash" ||
unkodierter Hashwert aus "VAUServerHelloDataHash"
 Diese Zeichenkette MUSS 12+32+32=76 Bytes lang sein. Der Server MUSS diese 
Zeichenkette mittels AES-GCM (vgl. ) verschlüsseln und dabei folgende 
Zeichenkette bilden
256-Bit KeyID || 96-Bit Nonce (IV) mit Ciphertext und 128 Bit 
Authentication-Tag
 Diese Zeichenkette MUSS er Base64-kodieren und das Ergebnis als Wert 
des "FinishedData"-Feld eintragen.]]></description>
    <description_html><![CDATA[Der Server MUSS eine wie folgt aufgebaute VAUServerFin-Nachricht erzeugen.<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">{ </span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;MessageType&quot;    : &quot;VAUServerFin&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;FinishedData&quot; : &quot;...Base64-kodierte-verschlüsselte-Finished-Daten...&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
 Der Server MUSS für die Berechnung des &quot;FinishedData&quot;-Feldes zunächst folgende Zeichenkette bilden<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;VAUServerFin&quot; ||</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">unkodierter Hashwert aus &quot;VAUClientHelloDataHash&quot; ||</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">unkodierter Hashwert aus &quot;VAUServerHelloDataHash&quot;</span><br/>
Diese Zeichenkette MUSS 12+32+32=76 Bytes lang sein. Der Server MUSS diese Zeichenkette mittels AES-GCM (vgl. <span class="polarion-rte-link" data-type="crossReference" id="fake" data-custom-label="A_16943-01" data-item-id="ML-102752" data-option-id="custom"></span>) verschlüsseln und dabei folgende Zeichenkette bilden<br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">256-Bit KeyID || 96-Bit Nonce (IV) mit Ciphertext und 128 Bit Authentication-Tag</span><br/>
Diese Zeichenkette MUSS er Base64-kodieren und das Ergebnis als Wert des &quot;FinishedData&quot;-Feld eintragen.]]></description_html>
  </requirement>
  <requirement id="A_17073" type="leafRequirement" severity="MUSS" lastUpdate="2019-08-29" technicalID="ML-92427" revision="539800">
    <title><![CDATA[VAU-Protokoll: Versand der VAUServerFin-Nachricht]]></title>
    <description><![CDATA[Der Server MUSS nach dem Erhalt einer VAUClientSigFin-Nachricht mit einer 
VAUServerFin-Nachricht antworten. Der Server MUSS die VAUServerFin-Nachricht 
per HTTP mit dem Content-Type 'application/json' an den Client senden.]]></description>
    <description_html><![CDATA[Der Server MUSS nach dem Erhalt einer VAUClientSigFin-Nachricht mit einer VAUServerFin-Nachricht antworten. Der Server MUSS die VAUServerFin-Nachricht per HTTP mit dem Content-Type &#39;application/json&#39; an den Client senden.]]></description_html>
  </requirement>
  <requirement id="A_17084" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-92454" revision="539800">
    <title><![CDATA[VAU-Protokoll: Empfang der VAUServerFin-Nachricht]]></title>
    <description><![CDATA[Der Client MUSS beim Empfang der VAUServerFin-Nachricht prüfen, ob der Wert im 
"FinishedData"-Feld der nach A_16899 zu erwartenden Wert entspricht. Falls 
nein, so MUSS der Client den weiteren Protokollablauf abbrechen (vgl. A_16849).]]></description>
    <description_html><![CDATA[Der Client MUSS beim Empfang der VAUServerFin-Nachricht prüfen, ob der Wert im &quot;FinishedData&quot;-Feld der nach A_16899 zu erwartenden Wert entspricht. Falls nein, so MUSS der Client den weiteren Protokollablauf abbrechen (vgl. A_16849).]]></description_html>
  </requirement>
  <requirement id="A_16945-02" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-110893" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, verschlüsselte Kommunikation (1)]]></title>
    <description><![CDATA[Wie bei der Schlüsselaushandlung MUSS der Client mittels HTTP-POST-Request die 
nun verschlüsselte Kommunikation initiieren.
Der Client MUSS einen unsigned 64-Bit-Nachrichtenzähler führen, die er bei 
jeder abgeschickten Nachricht um zwei erhöhen MUSS.

Er bildet die Datenstruktur "P1" mit
 P1=Version (ein Byte mit dem Wert 0x01) || 
     Nachrichtenzähler (unsigned 64-Bit im Big-Endian-Format) || 
     Anzahl der Bytes der folgenden zusätzlichen HTTP-
 Header-Informationen (unsigned 32-Bit im Big-Endian-Format) || 
     zusätzliche HTTP-Header-Informationen || 
     Plaintext 
 wobei „Plaintext“ die zu übertragende Nutzlast (bspw. SOAP-Request) 
bezeichnet. 

 Wenn die Anzahl der Bytes der folgenden zusätzlichen 
HTTP-Header-Informationen mit 0 (also 0x00000000) angegeben wird, so gibt es 
keine folgenden zusätzlichen HTTP-Header-Informationen, d. h. es folgen direkt 
die Plaintext-Bytes. 

 Der Nachrichtenzähler MUSS initial mit 1 starten. 
Der Client MUSS zunächst einen IV wie folgt erzeugen:

 * Sei a ein zufällig erzeugtes 32-Bitfeld.
 * Sei IV=a (32 Bit) || Nachrichtenzähler (unsigned 64-Bit im 
Big-Endian-Format).Damit ist der IV 96-Bit lang. Unter Verwendung dieses IV und 
des zweiten aus abgeleiteten Schlüssel (Client-to-Server-Schlüssel) wird P1 
verschlüsselt. Der Client berechnet so den "Ciphertext".
 Die vom Client nun an den Server zu übermittelnde Datenstruktur MUSS folgende 
Form besitzen.
 256-Bit KeyID || 96-Bit IV mit Ciphertext und 128 Bit Authentication-Tag

 Diese Nachricht MUSS der Client per HTTP-POST-Request mit Content-Type 
'application/octet-stream' ohne weitere Kodierungen versenden.]]></description>
    <description_html><![CDATA[Wie bei der Schlüsselaushandlung MUSS der Client mittels HTTP-POST-Request die nun verschlüsselte Kommunikation initiieren. <br/>Der Client MUSS einen unsigned 64-Bit-Nachrichtenzähler führen, die er bei jeder abgeschickten Nachricht um zwei erhöhen MUSS. <br/> <br/>Er bildet die Datenstruktur &quot;P1&quot; mit<br/> <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;"> P1=Version (ein Byte mit dem Wert 0x01) || <br/>     Nachrichtenzähler (unsigned 64-Bit im Big-Endian-Format) || <br/>     Anzahl der Bytes der folgenden zusätzlichen HTTP-<br/> Header-Informationen (unsigned 32-Bit im Big-Endian-Format) || <br/>     zusätzliche HTTP-Header-Informationen || <br/>     Plaintext <br/></span> wobei „Plaintext“ die zu übertragende Nutzlast (bspw. SOAP-Request) bezeichnet. <br/> <br/> Wenn die Anzahl der Bytes der folgenden zusätzlichen HTTP-Header-Informationen mit 0 (also 0x00000000) angegeben wird, so gibt es keine folgenden zusätzlichen HTTP-Header-Informationen, d. h. es folgen direkt die Plaintext-Bytes. <br/> <br/> Der Nachrichtenzähler MUSS initial mit 1 starten. <br/> <span style="font-size: 10pt;line-height: 1.5;">Der Client MUSS zunächst einen IV wie folgt erzeugen:<br/></span> <ol><li><span style="font-size: 10pt;line-height: 1.5;">Sei a ein zufällig erzeugtes 32-Bitfeld.</span></li><li><span style="font-size: 10pt;line-height: 1.5;">Sei IV=a (32 Bit) || Nachrichtenzähler (unsigned 64-Bit im Big-Endian-Format).</span></li></ol><span style="font-size: 10pt;line-height: 1.5;">Damit ist der IV 96-Bit lang. Unter Verwendung dieses IV und des zweiten aus <span data-option-id="custom" data-item-id="ML-102752" data-custom-label="A_16943-01" id="fake" data-type="crossReference" class="polarion-rte-link"></span> abgeleiteten Schlüssel (Client-to-Server-Schlüssel) wird P1 verschlüsselt. </span>Der Client berechnet so den &quot;Ciphertext&quot;.<br/> Die vom Client nun an den Server zu übermittelnde Datenstruktur MUSS folgende Form besitzen.<br/> <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;"> 256-Bit KeyID || 96-Bit IV mit Ciphertext und 128 Bit Authentication-Tag<br/></span> <br/> Diese Nachricht MUSS der Client per HTTP-POST-Request mit Content-Type 'application/octet-stream' ohne weitere Kodierungen versenden.]]></description_html>
  </requirement>
  <requirement id="A_16952-02" type="leafRequirement" severity="MUSS" lastUpdate="2020-11-25" technicalID="ML-110894" revision="539800">
    <title><![CDATA[VAU-Protokoll: Server, verschlüsselte Kommunikation]]></title>
    <description><![CDATA[Der Server erkennt aus der KeyID, welchen AES-Schlüssel er für die 
Entschlüsselung verwenden muss (vgl. A_16943-*zweiter abgeleiteter Schlüssel 
(Client-to-Server-Schlüssel)). 
Falls ihm die KeyID unbekannt ist, so MUSS er mit einer 
VAUServerError-Nachricht mit der Fehlermeldung "KeyID XXX not found" antworten, 
wobei er XXX durch die empfangene KeyID in Hexadezimalform ersetzen MUSS.
Falls bei der Entschlüsselung ein Fehler auftritt (bspw. Authentication-Tag 
passt nicht zur Nachricht), MUSS der Server mit einer VAUServerError-Nachricht 
mit der Fehlermeldung "AES-GCM decryption error." antworten.

Falls die Entschlüsselung erfolgreich war, MUSS der Server den Klartext gemäß 
der Struktur von P1 aus A_16945-*  interpretieren.

Falls die Version in P1 ungleich 0x01 ist, so MUSS der Server (1) eine 
VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”invalid 
protocoll version” senden und gemäß A_16849 die Protokollausführung abbrechen.

 Sei mit ”Server-Zählerwert” der letzte vom Server für den Nachrichtenversand 
verwendete Zählerwert bezeichnet. Initial (d. h. es wurde innerhalb eines 
Protokollablaufs noch nie eine Nachricht vom Server versendet) MUSS dieser 
Server-Zählerwert gleich 0 sein.
 Der Server MUSS prüfen, ob der Zählerwert im Klartext größer als der 
”Server-Zählerwert” ist. Falls nein, so MUSS der Server (1) eine 
VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”invalid counter 
value” senden und (2) gemäß A_16849 die Protokollausführung abbrechen.
 Der Server MUSS den ”Server-Zählerwert” auf Zählerwert + 1 setzen.
 Falls es dabei zu einem Zählerüberlauf kommt, so MUSS der Server (1) eine 
VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”message counter 
overflow” senden und (2) gemäß A_16849 die Protokollausführung abbrechen.
 Der Server MUSS zusätzliche HTTP-Header-Informationen analog zu A_16945-* 
interpretieren und verwenden. Falls dies nicht möglich ist (bspw. Längenwert 
ist größer als eigentliche Nachrichtengröße), so MUSS der Server (1) eine 
VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”HTTP additional 
header length error” senden und (2) gemäß A_16849 die Protokollausführung 
abbrechen.

Der Server erzeugt zunächst die Datenstruktur "P2" mit
 P2 = Version (ein Byte mit dem Wert 0x01) || 
       Server-Zählerwert (unsigned 64-Bit, big-endian-format) ||
       Anzahl der Bytes der folgenden zusätzlichen HTTP-Header-Informationen 
(unsigned 32-Bit im Big-Endian-Format) || 
        zusätzliche HTTP-Header-Informationen || 
       Klartext-Antwort des Servers

Der Server MUSS P2 mit AES-256-GCM verschlüsseln. Dafür MUSS der Server 
zufällig eine 96-Bit-großen IV wie folgt erzeugen:

 * Sei a ein zufällig erzeugtes 32-Bitfeld.
 * Sei IV=a (32 Bit) || Server-Nachrichtenzähler (unsigned 64-Bit im 
Big-Endian-Format).Damit ist der IV 96-Bit lang. Unter Verwendung dieses IV und 
des dritten aus A_16943-* abgeleiteten Schlüssel (Server-to-Client-Schlüssel) 
MUSS der Server P2 verschlüsseln.

 Die zu übermittelnde Datenstruktur MUSS folgende Form besitzen
 256-Bit KeyID || 96-Bit IV mit Ciphertext und 128 Bit Authentication-Tag

Diese Datenstruktur MUSS der Server per HTTP-Response mit Content-Type 
'application/octet-stream' ohne weitere Kodierungen versenden.]]></description>
    <description_html><![CDATA[Der Server erkennt aus der KeyID, welchen AES-Schlüssel er für die Entschlüsselung verwenden muss (vgl. A_16943-* <span style="font-size: 10pt;line-height: 1.5;">zweiter abgeleiteter Schlüssel (Client-to-Server-Schlüssel)</span>). <br/>Falls ihm die KeyID unbekannt ist, so MUSS er mit einer VAUServerError-Nachricht mit der Fehlermeldung &quot;KeyID XXX not found&quot; antworten, wobei er XXX durch die empfangene KeyID in Hexadezimalform ersetzen MUSS.<br/>Falls bei der Entschlüsselung ein Fehler auftritt (bspw. Authentication-Tag passt nicht zur Nachricht), MUSS der Server mit einer VAUServerError-Nachricht mit der Fehlermeldung &quot;AES-GCM decryption error.&quot; antworten.<br/> <br/>Falls die Entschlüsselung erfolgreich war, MUSS der Server <span style="font-size: 10pt;line-height: 1.5;">den Klartext gemäß der Struktur von P1 aus A_16945-*  interpretieren.<br/></span> <br/> <span style="font-size: 10pt;line-height: 1.5;">Falls die Version in P1 ungleich 0x01 ist, so MUSS der Server (1) eine VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”invalid protocoll version” senden und gemäß A_16849 die Protokollausführung abbrechen.<br/><br/> Sei mit ”Server-Zählerwert” der letzte vom Server für den Nachrichtenversand verwendete Zählerwert bezeichnet. Initial (d. h. es wurde innerhalb eines Protokollablaufs noch nie eine Nachricht vom Server versendet) MUSS dieser Server-Zählerwert gleich 0 sein.<br/> Der Server MUSS prüfen, ob der Zählerwert im Klartext größer als der ”Server-Zählerwert” ist. Falls nein, so MUSS der Server (1) eine VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”invalid counter value” senden und (2) gemäß A_16849 die Protokollausführung abbrechen.<br/> Der Server MUSS den ”Server-Zählerwert” auf Zählerwert + 1 setzen.<br/> Falls es dabei zu einem Zählerüberlauf kommt, so MUSS der Server (1) eine VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”message counter overflow” senden und (2) gemäß A_16849 die Protokollausführung abbrechen.<br/> Der Server MUSS zusätzliche HTTP-Header-Informationen analog zu A_16945-* interpretieren und verwenden. Falls dies nicht möglich ist (bspw. Längenwert ist größer als eigentliche Nachrichtengröße), so MUSS der Server (1) eine VAUServerError-Nachricht gemäß A_16851-* mit der Fehlermeldung ”HTTP additional header length error” senden und (2) gemäß A_16849 die Protokollausführung abbrechen.</span><br/> <br/>Der Server erzeugt zunächst die Datenstruktur &quot;P2&quot; mit<br/> <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;"> P2 = <span style="font-size: 10pt;line-height: 1.5;">Version (ein Byte mit dem Wert 0x01) || </span><br/>       Server-Zählerwert (unsigned 64-Bit, big-endian-format) ||<br/>       Anzahl der Bytes der folgenden zusätzlichen HTTP-Header-Informationen (unsigned 32-Bit im Big-Endian-Format) || <br/>        zusätzliche HTTP-Header-Informationen || <br/>       Klartext-Antwort des Servers</span><br/> <br/>Der Server MUSS P2 mit AES-256-GCM verschlüsseln. Dafür MUSS der Server zufällig eine 96-Bit-großen IV wie folgt erzeugen:<br/> <ol><li>Sei <span style="font-size: 10pt;line-height: 1.5;">a ein zufällig erzeugtes 32-Bitfeld.</span></li><li><span style="font-size: 10pt;line-height: 1.5;">Sei IV=a (32 Bit) || Server-Nachrichtenzähler (unsigned 64-Bit im Big-Endian-Format).</span></li></ol><span style="font-size: 10pt;line-height: 1.5;">Damit ist der IV 96-Bit lang. Unter Verwendung dieses IV und des dritten aus A_16943-* abgeleiteten Schlüssel (Server-to-Client-Schlüssel) MUSS der Server P2 verschlüsseln.</span><br/> <br/> Die zu übermittelnde Datenstruktur MUSS folgende Form besitzen<br/> <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;"> 256-Bit KeyID || 96-Bit IV mit Ciphertext und 128 Bit Authentication-Tag</span><br/> <br/>Diese Datenstruktur MUSS der Server per HTTP-Response mit Content-Type 'application/octet-stream' ohne weitere Kodierungen versenden.]]></description_html>
  </requirement>
  <requirement id="A_16957-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-11-23" technicalID="ML-110898" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, verschlüsselte Kommunikation (2)]]></title>
    <description><![CDATA[Beim Empfang der Antwort (vgl. A_16952-*) MUSS der Client folgende Vorgaben 
durchsetzen.
 Falls 
 * er die KeyID nicht kennt,

 * die Entschlüsselung fehlschlägt (bspw. Authentication-Tag passt nicht zur 
Nachricht), oder

 * der 64-Bit Zählerwert ungleich 1 plus dem Zählerwert ist, den der Client 
für den Request verwendet hat,
so MUSS der Client die Nachricht verwerfen und die weitere Protokollausführung 
mittels des empfangenen KeyID abbrechen.

 Anderen falls (alles ok, kein Abbruch) MUSS der Client den mit der KeyID 
verbundenen Zählerwert um eins erhöhen. D. h., Nachrichten vom Client an den 
Server haben immer einen ungeraden Zählerwert.]]></description>
    <description_html><![CDATA[Beim Empfang der Antwort (vgl. A_16952-*) MUSS der Client folgende Vorgaben durchsetzen.<br/> Falls <ol><li><span style="color: #000000;">er die KeyID nicht kennt,<br/></span></li><li><span style="color: #000000;">die Entschlüsselung fehlschlägt (bspw. Authentication-Tag passt nicht zur Nachricht), oder<br/></span></li><li><span style="color: #000000;">der 64-Bit Zählerwert ungleich 1 plus dem Zählerwert ist, den der Client für den Request verwendet hat,<br/></span></li></ol><span style="color: #000000;">so MUSS der Client die Nachricht verwerfen und die weitere Protokollausführung mittels des empfangenen KeyID abbrechen.<br/><br/> Anderen falls (alles ok, kein Abbruch) MUSS der Client den mit der KeyID verbundenen Zählerwert um eins erhöhen. D. h., Nachrichten vom Client an den Server haben immer einen ungeraden Zählerwert.</span>]]></description_html>
  </requirement>
  <requirement id="A_16958" type="leafRequirement" severity="KANN" lastUpdate="2022-09-27" technicalID="ML-90085" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, Neuinitiieren einer Schlüsselaushandlung]]></title>
    <description><![CDATA[Der Client KANN jeder Zeit eine neue Schlüsselaushandlung (VAUClientHello etc.) 
initiieren.]]></description>
    <description_html><![CDATA[Der Client KANN jeder Zeit eine neue Schlüsselaushandlung (VAUClientHello etc.) initiieren.]]></description_html>
  </requirement>
  <requirement id="A_17069" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-92423" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client Zählerüberlauf]]></title>
    <description><![CDATA[Der Client MUSS, falls so viele Nachrichten ausgetauscht werden, dass für den 
unsigned 64-Bit-Nachrichtenzähler ein arithmetischer Überlauf droht, eine neue 
Schlüsselaushandlung initiieren (VAUClientHello etc.).]]></description>
    <description_html><![CDATA[Der Client MUSS, falls so viele Nachrichten ausgetauscht werden, dass für den unsigned 64-Bit-Nachrichtenzähler ein arithmetischer Überlauf droht, eine neue Schlüsselaushandlung initiieren (VAUClientHello etc.).]]></description_html>
  </requirement>
  <requirement id="A_16851-01" type="leafRequirement" severity="MUSS" lastUpdate="2020-06-08" technicalID="ML-109365" revision="539800">
    <title><![CDATA[VAU-Protokoll: VAUServerError-Nachrichten]]></title>
    <description><![CDATA[Der Server MUSS folgende Vorgaben umsetzen:
 In verschiedenen im Protokoll beschriebenen Fehlerfällen sendet der Server 
eine VAUServerError-Nachricht an den Client.
 Für die eigentliche Fehlerübermittlung MUSS folgende Datenstruktur erzeugt:
{
"DataType" : "VAUServerErrorData",
"Data"     : "...Fehlermeldung...", 
"Time"     : "...aktuelle-Zeit-in-der-VAU..."
}
 Die Zeit im "Time"-Feld MUSS im Format nach ISO-8601 kodiert werden 
(Beispiel: "2018-11-22T10:00:00.123456").
 Diese Datenstruktur MUSS der Server Base64-kodieren und in der folgenden 
Nachricht im Datenfeld "Data" einbetten.
{
"MessageType" : "VAUServerError",
"Data" : "...Base64-kodierte-VAUServerErrorData..",
"Signature" : "...Base64-kodierte-ECDSA-Signatur...",
"Certificate" : "...Base64-kodiertes-Signaturzertifikat...",
"OCSPResponse" : "...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat..."
}

 Die ECDSA-Signatur im "Signature"-Feld MUSS nach [TR-03111#5.2.2. X9.62 
Format] ("ecdsa-with-Sha256") kodiert sein.
 Im "Certificate"-Feld MUSS der Server, das verwendete Signaturzertifikat 
aufführen, und im "OCSPResponse"-Feld eine OCSP-Response für diese Zertifikat, 
welche nicht älter als 24 Stunden ist.]]></description>
    <description_html><![CDATA[Der Server MUSS folgende Vorgaben umsetzen:<br/>
In verschiedenen im Protokoll beschriebenen Fehlerfällen sendet der Server eine VAUServerError-Nachricht an den Client.<br/>
Für die eigentliche Fehlerübermittlung MUSS folgende Datenstruktur erzeugt:<br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">{</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;DataType&quot; : &quot;VAUServerErrorData&quot;,</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;Data&quot;     : &quot;...Fehlermeldung...&quot;, </span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;Time&quot;     : &quot;...aktuelle-Zeit-in-der-VAU...&quot;</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">}</span><br/>
Die Zeit im &quot;Time&quot;-Feld MUSS im Format nach ISO-8601 kodiert werden (Beispiel: &quot;2018-11-22T10:00:00.123456&quot;).<br/>
Diese Datenstruktur MUSS der Server Base64-kodieren und in der folgenden Nachricht im Datenfeld &quot;Data&quot; einbetten.<br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">{</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;MessageType&quot; : &quot;VAUServerError&quot;,</span><br/>
 <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">&quot;Data&quot; : &quot;...Base64-kodierte-VAUServerErrorData..&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Signature&quot; : &quot;...Base64-kodierte-ECDSA-Signatur...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;Certificate&quot; : &quot;...Base64-kodiertes-Signaturzertifikat...&quot;,</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">&quot;OCSPResponse&quot; : &quot;...Base64-kodierte-OCSP-Response-für-dieses-Zertifikat...&quot;</span><br/>
 <span style="font-size: 10pt;font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;line-height: 1.5;">}</span><br/>
 <br/>
 Die ECDSA-Signatur im &quot;Signature&quot;-Feld MUSS nach [TR-03111#5.2.2. X9.62 Format] (&quot;ecdsa-with-Sha256&quot;) kodiert sein.<br/>
Im &quot;Certificate&quot;-Feld MUSS der Server, das verwendete Signaturzertifikat aufführen, und im &quot;OCSPResponse&quot;-Feld eine OCSP-Response für diese Zertifikat, welche nicht älter als 24 Stunden ist.]]></description_html>
  </requirement>
  <requirement id="A_16900" type="leafRequirement" severity="MUSS" lastUpdate="2022-11-23" technicalID="ML-90071" revision="539800">
    <title><![CDATA[VAU-Protokoll: Client, Behandlung von Fehlernachrichten]]></title>
    <description><![CDATA[Erhält der Client eine VAUServerError-Nachricht (vgl. A_16851-01), MUSS er die 
Signatur prüfen. Falls die Prüfung positiv ist, so MUSS er die 
Protolldurchführung abbrechen (vgl. A_16849).]]></description>
    <description_html><![CDATA[Erhält der Client eine VAUServerError-Nachricht (vgl. A_16851-01), MUSS er die Signatur prüfen. Falls die Prüfung positiv ist, so MUSS er die Protolldurchführung abbrechen (vgl. A_16849).]]></description_html>
  </requirement>
  <requirement id="A_23282" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-13" technicalID="ML-134989" revision="539800">
    <title><![CDATA[VAU-Protokoll: Signaturen im VAU-Protokoll]]></title>
    <description><![CDATA[Clients und Server im VAU-Protokoll-Sinne MÜSSEN bei der Signaturerzeugung und 
-Prüfung beachten, dass die Signaturen der Nachrichten des VAU-Protokoll (wie 
in A_16851-* definiert) über die Base64-kodierten Daten erfolgt. Dies gilt für 
alle Protokoll-Nachrichten im VAU-Protokoll -- stets werden die 
Base64-kodierten Daten des "Data"-Felds signiert.]]></description>
    <description_html><![CDATA[Clients und Server im VAU-Protokoll-Sinne MÜSSEN bei der Signaturerzeugung und -Prüfung beachten, dass die Signaturen der Nachrichten des VAU-Protokoll (wie in A_16851-* definiert) über die Base64-kodierten Daten erfolgt. Dies gilt für alle Protokoll-Nachrichten im VAU-Protokoll -- stets werden die Base64-kodierten Daten des &quot;Data&quot;-Felds signiert.]]></description_html>
  </requirement>
  <requirement id="A_16849" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-90091" revision="539800">
    <title><![CDATA[VAU-Protokoll: Aktionen bei Protokollabbruch]]></title>
    <description><![CDATA[Wenn ein Client oder ein Server den Protokollablauf nach Protokollbeschreibung 
abbrechen muss, dann MUSS dieser die eventuell aktuell vorhandene KeyID aus 
seiner Datenbasis löschen und die damit verbundenen Schlüssel sicher löschen.]]></description>
    <description_html><![CDATA[<span style="font-size: 10pt;line-height: 1.5;">Wenn ein Client oder ein Server den Protokollablauf nach Protokollbeschreibung abbrechen muss, dann MUSS dieser die eventuell aktuell vorhandene KeyID aus seiner Datenbasis löschen und die damit verbundenen Schlüssel sicher löschen.</span><span style="font-size: 11pt;color: #172B4D;background-color: #FFFF99;line-height: 1.5;"><br/>
  </span>]]></description_html>
  </requirement>
  <requirement id="A_18465-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-110897" revision="539800">
    <title><![CDATA[VAU-Protokoll: MTOM/XOP-HTTP-Header-Informationen]]></title>
    <description><![CDATA[Wenn ein VAU-Client oder ein VAU-Server Übertragungen mittels MTOM/XOP 
durchführen, so MÜSSEN sie die durch MTOM/XOP erzeugten 
„Content-Type“-Informationen (vgl. [gemSpec_Krypt#6.11 VAU-Kanal und MTOM/XOP]) 
innerhalb ihrer Nachricht als „zusätzliche HTTP-Header-Informationen“ gemäß 
A_16945-* und A_16952-* aufführen.]]></description>
    <description_html><![CDATA[Wenn ein VAU-Client oder ein VAU-Server Übertragungen mittels MTOM/XOP durchführen, so MÜSSEN sie die durch MTOM/XOP erzeugten „Content-Type“-Informationen (vgl. [gemSpec_Krypt#6.11 VAU-Kanal und MTOM/XOP]) innerhalb ihrer Nachricht als „zusätzliche HTTP-Header-Informationen“ gemäß A_16945-* und A_16952-* aufführen.]]></description_html>
  </requirement>
  <requirement id="A_20549" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-110899" revision="539800">
    <title><![CDATA[VAU-Protokoll: Einbringen der ursprünglich intendierten Content-Type-Variable]]></title>
    <description><![CDATA[Ein VAU-Client oder ein VAU-Server MÜSSEN in den „zusätzliche 
HTTP-Header-Informationen“ gemäß A_16945-* und A_16952-*, die ursprünglich 
intendierten Content-Type HTTP-Header-Variable einbringen. D. h. Ein 
Kommunikationspartner erstellt einen HTTP-Request oder eine HTTP-Response. 
Diese hat eine "ursprünglich intendierten Content-Type", bspw. 
"application/soap+xml; charset=utf-8". Diese MUSS dann bei der Verschlüsselung 
der Nachricht mittels des VAU-Protokolls in die "zusätzlichen 
HTTP-Header-Informationen" eingetragen werden.]]></description>
    <description_html><![CDATA[Ein VAU-Client oder ein VAU-Server MÜSSEN in den „zusätzliche HTTP-Header-Informationen“ gemäß A_16945-* und A_16952-*, die ursprünglich intendierten Content-Type HTTP-Header-Variable einbringen. D. h. Ein Kommunikationspartner erstellt einen HTTP-Request oder eine HTTP-Response. Diese hat eine &quot;ursprünglich intendierten Content-Type&quot;, bspw. &quot;application/soap+xml; charset=utf-8&quot;. Diese MUSS dann bei der Verschlüsselung der Nachricht mittels des VAU-Protokolls in die &quot;zusätzlichen HTTP-Header-Informationen&quot; eingetragen werden.]]></description_html>
  </requirement>
  <requirement id="A_18466-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-110896" revision="539800">
    <title><![CDATA[VAU-Protokoll: zusätzliche HTTP-Header-Informationen]]></title>
    <description><![CDATA[Wenn ein VAU-Client oder ein VAU-Server Übertragungen durchführen und in den 
empfangenen Nachrichten sind „zusätzliche HTTP-Header-Informationen“ gemäß 
A_16945-* und A_16952-*, so MÜSSEN sie diese auswerten (Hinweis: insbesondere 
„Content-Type“-Informationen (vgl. [gemSpec_Krypt#6.11 VAU-Kanal und MTOM/XOP]).

Dabei "überschreiben" diese zusätzlichen HTTP-Header-Information 
HTTP-Header-Variablen im "äußeren" HTTP-Request (insbesondere "Content-Type") 
bei der Interpretation der Informationen aus dem Request.]]></description>
    <description_html><![CDATA[Wenn ein VAU-Client oder ein VAU-Server Übertragungen durchführen und in den empfangenen Nachrichten sind „zusätzliche HTTP-Header-Informationen“ gemäß A_16945-* und A_16952-*, so MÜSSEN sie diese auswerten (Hinweis: insbesondere „Content-Type“-Informationen (vgl. [gemSpec_Krypt#6.11 VAU-Kanal und MTOM/XOP]).<br/> <br/>Dabei &quot;überschreiben&quot; diese zusätzlichen HTTP-Header-Information HTTP-Header-Variablen im &quot;äußeren&quot; HTTP-Request (insbesondere &quot;Content-Type&quot;) bei der Interpretation der Informationen aus dem Request.]]></description_html>
  </requirement>
  <requirement id="A_21888" type="leafRequirement" severity="MUSS" lastUpdate="2022-08-31" technicalID="ML-122266" revision="539800">
    <title><![CDATA[VAU-Client, Nichtproduktivumgebung, vorgegebene ECDH-Schlüssel]]></title>
    <description><![CDATA[Ein Client im VAU-Protokoll MUSS in einer Nichtproduktivumgebung von A_16883-* 
abweichen in dem er sein ephemeres ECDH-Schlüsselpaar nicht zufällig erzeugt, 
sondern folgendes ECDH-Schlüsselpaar (auf der Kurve BrainpoolP256r1) für jeden 
VAU-Protokollverbindungsaufbau verwendet:

 * privater Schlüssel: 
d=0x78ece94904fc6bf9900cced4c5af4dcd4fbebc585b2054b636cc3f76333bdee
 * öffentlicher 
Schlüssel: x=0x21fafedc8ba1ef5477995a28a9794f86355df305f1f58afc88f87e91c664353a 
y=0x27803e3dcf670bd305f3b923f915bfe119389d869c3565828c89bd422231f9f4]]></description>
    <description_html><![CDATA[Ein Client im VAU-Protokoll MUSS in einer Nichtproduktivumgebung von A_16883-* abweichen in dem er sein ephemeres ECDH-Schlüsselpaar nicht zufällig erzeugt, sondern folgendes ECDH-Schlüsselpaar (auf der Kurve BrainpoolP256r1) für jeden VAU-Protokollverbindungsaufbau verwendet:<br/> <ul><li>privater Schlüssel: d=0x78ece94904fc6bf9900cced4c5af4dcd4fbebc585b2054b636cc3f76333bdee</li><li>öffentlicher Schlüssel: x=0x21fafedc8ba1ef5477995a28a9794f86355df305f1f58afc88f87e91c664353a y=0x27803e3dcf670bd305f3b923f915bfe119389d869c3565828c89bd422231f9f4</li></ul>]]></description_html>
  </requirement>
  <requirement id="A_21977" type="leafRequirement" severity="KANN" lastUpdate="2022-08-31" technicalID="ML-122881" revision="539800">
    <title><![CDATA[VAU-Client, Nichtproduktivumgebung, vorgegebene ECDH-Schlüssel, optionale Konfigurierbarkeit]]></title>
    <description><![CDATA[Ein Client im VAU-Protokoll KANN in einer Nichtproduktivumgebung die Umsetzung 
von A_21888-* durch einen Nutzer (FdV) oder Administrator (Konnektor etc.) 
konfigurierbar machen, d. h. das Verhalten des Clients zwischen zufälliger 
Schlüsselerzeugung und festen Schlüssel aus A_21888-* per Konfiguration 
veränderlich machen.]]></description>
    <description_html><![CDATA[Ein Client im VAU-Protokoll KANN in einer Nichtproduktivumgebung die Umsetzung von A_21888-* durch einen Nutzer (FdV) oder Administrator (Konnektor etc.) konfigurierbar machen, d. h. das Verhalten des Clients zwischen zufälliger Schlüsselerzeugung und festen Schlüssel aus A_21888-* per Konfiguration veränderlich machen.]]></description_html>
  </requirement>
  <requirement id="A_21889" type="leafRequirement" severity="MUSS" lastUpdate="2021-08-31" technicalID="ML-122267" revision="539800">
    <title><![CDATA[VAU-Server, Produktivumgebung, Ablehnung der ECDH-Client-Schlüssel nach A_21888-*]]></title>
    <description><![CDATA[Ein Server im VAU-Protokoll MUSS genau in der Produktivumgebung (PU) bei einem 
VAU-Handshake den Client-ECDH-Schlüssel aus A_21888-* ablehnen. D. h. er muss 
falls ein Client im VAUClientHello den öffentlichen Schlüssel aus A_21888-* 
präsentiert, den Handshake mit einem VAUServerError gemäß A_16851-* abbrechen.]]></description>
    <description_html><![CDATA[Ein Server im VAU-Protokoll MUSS genau in der Produktivumgebung (PU) bei einem VAU-Handshake den Client-ECDH-Schlüssel aus A_21888-* ablehnen. D. h. er muss falls ein Client im VAUClientHello den öffentlichen Schlüssel aus A_21888-* präsentiert, den Handshake mit einem VAUServerError gemäß A_16851-* abbrechen.]]></description_html>
  </requirement>
  <requirement id="A_20160-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-01-21" technicalID="ML-114528" revision="539800">
    <title><![CDATA[E-Rezept-VAU, Schlüsselpaar und Zertifikat]]></title>
    <description><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.

 * Die VAU MUSS ein EE-X.509-Zertifikat aus der Komponenten-PKI der TI besitzen
 (mit Rollenkennung-OID "oid_erp-vau"), das einen ECC-EE-Schlüssel der VAU 
bestätigt. 
 * Die VAU MUSS die Vertraulichkeit des privaten Schlüssels für diese 
Zertifikat sicherstellen.
 * Die notwendige Sicherung (Backup) und Verteilung dieses privaten Schlüssels 
MUSS ausschließlich im Mehr-Augen-Prinzip und mit geeigneten Maßnahmen zur 
Wahrung der Vertraulichkeit des Schlüssels geschehen.
 * Der Fachdienst E-Rezept MUSS das VAU-Zertifikat in seinen Webschnittstellen 
unter dem Pfad/VAUCertificate (einer URL) durch Clients abrufbar machen. Dieses 
Zertifikat MUSS DER-kodiert sein.
 * Der Fachdienst E-Rezept MUSS eine maximal 12 Stunden alte OCSP-Response für 
das VAU-Zertifikat in seinen Webschnittstellen unter dem Pfad
/VAUCertificateOCSPResponse für Clients abrufbar machen.]]></description>
    <description_html><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.<br/> <ol><li>Die VAU MUSS ein EE-X.509-Zertifikat aus der Komponenten-PKI der TI besitzen<br/> (mit Rollenkennung-OID &quot;oid_erp-vau&quot;), das einen ECC-EE-Schlüssel der VAU bestätigt. </li><li>Die VAU MUSS die Vertraulichkeit des privaten Schlüssels für diese Zertifikat sicherstellen.</li><li>Die notwendige Sicherung (Backup) und Verteilung dieses privaten Schlüssels MUSS ausschließlich im Mehr-Augen-Prinzip und mit geeigneten Maßnahmen zur Wahrung der Vertraulichkeit des Schlüssels geschehen.</li><li>Der Fachdienst E-Rezept MUSS das VAU-Zertifikat in seinen Webschnittstellen unter dem Pfad <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;">/VAUCertificate</span> (einer URL) durch Clients abrufbar machen. Dieses Zertifikat MUSS DER-kodiert sein.</li><li>Der Fachdienst E-Rezept MUSS eine maximal 12 Stunden alte OCSP-Response für das VAU-Zertifikat in seinen Webschnittstellen unter dem Pfad <span style="font-family: 'Courier New', Courier, monospace, HanWangKanTan;">/VAUCertificateOCSPResponse</span> für Clients abrufbar machen.</li></ol>]]></description_html>
  </requirement>
  <requirement id="A_20967" type="leafRequirement" severity="MUSS" lastUpdate="2020-12-01" technicalID="ML-113191" revision="539800">
    <title><![CDATA[E-Rezept-VAU, Erstellung und Pflege der Schlüssel im Mehr-Augen-Prinzip]]></title>
    <description><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.

 *  Die Erstellung, Sicherung und Wiederherstellung von nicht-flüchtigen 
(nicht kurzzeitig gültigen) Schlüsseln (A_20160-* Punkt 2-3, Masterkey für die 
Verschlüsselung der E-Rezept in der VAU etc.) MUSS im Mehr-Augen-Prinzip 
erfolgen bei dem mindestens ein gematik-Mitarbeiter beteiligt ist. 
 * Die Administration des/der HSM der VAU MUSS ebenfalls im Mehr-Augen-Prinzip 
erfolgen bei dem mindestens ein gematik-Mitarbeiter beteiligt ist.  Die oben 
genannten Punkten MÜSSEN durch das/die HSM der VAU technisch durchgesetzt 
werden (Rechtekonzept).]]></description>
    <description_html><![CDATA[Der Fachdienst E-Rezept MUSS folgende Punkte sicherstellen.<br/>
 
<ol>
  <li> Die Erstellung, Sicherung und Wiederherstellung von nicht-flüchtigen (nicht kurzzeitig gültigen) Schlüsseln (A_20160-* Punkt 2-3, Masterkey für die Verschlüsselung der E-Rezept in der VAU etc.) MUSS im Mehr-Augen-Prinzip erfolgen bei dem mindestens ein gematik-Mitarbeiter beteiligt ist.</li>
  <li>Die Administration des/der HSM der VAU MUSS ebenfalls im Mehr-Augen-Prinzip erfolgen bei dem mindestens ein gematik-Mitarbeiter beteiligt ist.</li>
</ol>
Die oben genannten Punkten MÜSSEN durch das/die HSM der VAU technisch durchgesetzt werden (Rechtekonzept).]]></description_html>
  </requirement>
  <requirement id="A_21216" type="leafRequirement" severity="MUSS" lastUpdate="2021-03-26" technicalID="ML-114473" revision="539800">
    <title><![CDATA[E-Rezept-Client, Zertifikatsprüfung auf TSL-Basis]]></title>
    <description><![CDATA[Ein E-Rezept-Client, der nicht das E-Rezept-FdV ist, MUSS das VAU-Zertifikat 
vom E-Rezept-FD beziehen (vgl. A_20160-*, URL /VAUCertificate) und ebenfalls 
für dieses Zertifikat die OCSP-Reponse für dieses Zertifikat beziehen (vgl. 
A_20160-*, URL /VAUCertificateOCSPResponse). Er MUSS das Zertifikat mittels
TUC_PKI_018 (OCSP-Graceperiod=12h, PolicyList={oid_erp-vau}) prüfen und dabei 
die vom FD bezogene OCSP-Response verwenden.]]></description>
    <description_html><![CDATA[Ein E-Rezept-Client, der nicht das E-Rezept-FdV ist, MUSS das VAU-Zertifikat vom E-Rezept-FD beziehen (vgl. A_20160-*, URL /VAUCertificate) und ebenfalls für dieses Zertifikat die OCSP-Reponse für dieses Zertifikat beziehen (vgl. A_20160-*, URL /VAUCertificateOCSPResponse). Er MUSS das Zertifikat mittels <span style="font-family: Arial, Helvetica;">TUC_PKI_018</span> (OCSP-Graceperiod=12h, PolicyList={oid_erp-vau}) prüfen und dabei die vom FD bezogene OCSP-Response verwenden.]]></description_html>
  </requirement>
  <requirement id="A_21217" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-28" technicalID="ML-114474" revision="539800">
    <title><![CDATA[E-Rezept-FD, Zertifikatslisten und OCSP-Response für Clients]]></title>
    <description><![CDATA[Ein E-Rezept-FD MUSS

 * nachdem die E-Rezept-VAU-Identität (vgl. A_20160-*) erzeugt wurde mittels 
des Algorithmus aus Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen die 
Datenstruktur analog zu Tab_KRYPT_ERP_Zertifikatsliste erstellen. 
 * diese erzeugte Zertifikatsliste auf seiner Webschnittstelle (HTTPS) über 
die URL /CertList (GET-Methode, Reponse-Content-Type 'application/json') 
verfügbar machen. 
 * die Zertifikatsliste mittels des Algorithmus aus 
Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen aktualisieren wenn (1) die 
E-Rezept-VAU-Identität aktualisiert wurde (Schlüsselwechsel der VAU etc.) oder 
(2) die gematik neue IDP-Zertifikate über die Liste E-Rezept-Clients bekannt 
machen möchte. Im Fall (2) meldet die gematik dies an den FD. 
 * an seiner Webschnittstelle (HTTPS) über die URL /OCSPList (GET-Methode, 
Reponse-Content-Type 'application/json') ein Array mit den base64-kodierten 
OCSP-Responses für die alle Zertifikate aus dem Array "ee_certs". Diese 
OCSP-Response-Liste muss der FD mindestens alle 11 Stunden mit "frischen" 
OCSP-Responses für die Zertifikate aus dem Array "ee_certs" aktualisieren.]]></description>
    <description_html><![CDATA[Ein E-Rezept-FD MUSS<br/>
 
<ol>
  <li>nachdem die E-Rezept-VAU-Identität (vgl. A_20160-*) erzeugt wurde mittels des Algorithmus aus Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen die Datenstruktur analog zu Tab_KRYPT_ERP_Zertifikatsliste erstellen.</li>
  <li>diese erzeugte Zertifikatsliste auf seiner Webschnittstelle (HTTPS) über die URL /CertList (GET-Methode, Reponse-Content-Type &#39;application/json&#39;) verfügbar machen.</li>
  <li>die Zertifikatsliste mittels des Algorithmus aus Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen aktualisieren wenn (1) die E-Rezept-VAU-Identität aktualisiert wurde (Schlüsselwechsel der VAU etc.) oder (2) die gematik neue IDP-Zertifikate über die Liste E-Rezept-Clients bekannt machen möchte. Im Fall (2) meldet die gematik dies an den FD.</li>
  <li>an seiner Webschnittstelle (HTTPS) über die URL /OCSPList (GET-Methode, Reponse-Content-Type &#39;application/json&#39;) ein Array mit den base64-kodierten OCSP-Responses für die alle Zertifikate aus dem Array &quot;ee_certs&quot;. Diese OCSP-Response-Liste muss der FD mindestens alle 11 Stunden mit &quot;frischen&quot; OCSP-Responses für die Zertifikate aus dem Array &quot;ee_certs&quot; aktualisieren.</li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_21218" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-28" technicalID="ML-114492" revision="539800">
    <title><![CDATA[E-Rezept-Client, Zertifikatsprüfung auf Basis der X.509-Root]]></title>
    <description><![CDATA[Das E-Rezept-FdV MUSS die RCA3 (das Zertifikat der Version 3 der X.509-Root der 
TI) als Vertrauensanker im Programm-Code bzw. mit dem Programm-Code fest 
assoziiert enthalten und als Basis für die Prüfung von TI-Zertifikat verwenden.
 Das FdV MUSS einen TI-Zertifikate-Truststore enthalten und pflegen, wie 
folgend definiert.

 Der Truststore MUSS Prüfschlüssel/Zertifikat aufgeteilt in folgende vier 
Kategorien enthalten: (A) Root-Schlüssel, (B) CA-Zertifikate, (C) 
E-Rezept-VAU-Zertifikat, (D) IDP-Zertifikat(e). Initial kann dieser Truststore 
nur RCA3 enthalten oder die Zertifikate die mittels 
Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen ermittelt werden.
 Falls im Truststore keine Zertifikate für Kategorie (C) und (D) vorliegen, so 
MUSS das FdV den Truststore aktualisieren indem es über den FD (URL /CertList) 
die Zertifikatsliste lädt und diese mittels des Algorithmus 
Tab_KRYPT_ERP_FdV_Truststore_aktualisieren prüft und ggf. in den Truststore 
lädt.
 Das E-Rezept-FdV MUSS über den FD (URL /OCSPList) OCSP-Responses für die 
Zertifikate (C) und (D) beziehen, wenn aktuell keine OCSP-Responses für diese 
Zertifikate im FdV vorliegen, die jünger als 12 Stunden sind.
 Falls in der OCSP-Liste OCSP-Responses enthalten sind die zu keinem der 
Zertifikate (C) und (D) passen, so MUSS das FdV den Truststore aktualisieren 
(s. o.).
 Zertifikate aus (C) und (D) MÜSSEN OCSP-Responses, die jünger als 12 Stunden 
sind besitzen, damit diese Zertifikate in fachliche Use-Cases im FdV verwendet 
werden können.

 Die OCSP-Responder-Zertifikate MÜSSEN per Signaturprüfung auf ein Zertifikat 
der Kategorie (B) rückführbar sein, ansonsten MÜSSEN die entsprechenden 
OCSP-Responses verworfen werden.

 Das FdV MUSS bei der Prüfung der TI-Zertifikate in fachlichen Use-Cases im 
FdV, prüfen ob das Zertifikat im oben beschriebenen Truststore enthalten ist 
und eine gültige OCSP-Response enthält die jünger als 12 Stunden ist. Falls 
dies nicht so ist, so ist das Ergebnis der Prüfung des TI-Zertifikats FAIL.]]></description>
    <description_html><![CDATA[Das E-Rezept-FdV MUSS die RCA3 (das Zertifikat der Version 3 der X.509-Root der TI) als Vertrauensanker im Programm-Code bzw. mit dem Programm-Code fest assoziiert enthalten und als Basis für die Prüfung von TI-Zertifikat verwenden.<br/>
Das FdV MUSS einen TI-Zertifikate-Truststore enthalten und pflegen, wie folgend definiert.<br/>
 <br/>
Der Truststore MUSS Prüfschlüssel/Zertifikat aufgeteilt in folgende vier Kategorien enthalten: (A) Root-Schlüssel, (B) CA-Zertifikate, (C) E-Rezept-VAU-Zertifikat, (D) IDP-Zertifikat(e). Initial kann dieser Truststore nur RCA3 enthalten oder die Zertifikate die mittels Tab_KRYPT_ERP_FD_Zertifikatsliste_erstellen ermittelt werden. <br/>
Falls im Truststore keine Zertifikate für Kategorie (C) und (D) vorliegen, so MUSS das FdV den Truststore aktualisieren indem es über den FD (URL /CertList) die Zertifikatsliste lädt und diese mittels des Algorithmus Tab_KRYPT_ERP_FdV_Truststore_aktualisieren prüft und ggf. in den Truststore lädt.<br/>
Das E-Rezept-FdV MUSS über den FD (URL /OCSPList) OCSP-Responses für die Zertifikate (C) und (D) beziehen, wenn aktuell keine OCSP-Responses für diese Zertifikate im FdV vorliegen, die jünger als 12 Stunden sind.<br/>
Falls in der OCSP-Liste OCSP-Responses enthalten sind die zu keinem der Zertifikate (C) und (D) passen, so MUSS das FdV den Truststore aktualisieren (s. o.).<br/>
Zertifikate aus (C) und (D) MÜSSEN OCSP-Responses, die jünger als 12 Stunden sind besitzen, damit diese Zertifikate in fachliche Use-Cases im FdV verwendet werden können.<br/>
 <br/>
Die OCSP-Responder-Zertifikate MÜSSEN per Signaturprüfung auf ein Zertifikat der Kategorie (B) rückführbar sein, ansonsten MÜSSEN die entsprechenden OCSP-Responses verworfen werden.<br/>
<br/>
Das FdV MUSS bei der Prüfung der TI-Zertifikate in fachlichen Use-Cases im FdV, prüfen ob das Zertifikat im oben beschriebenen Truststore enthalten ist und eine gültige OCSP-Response enthält die jünger als 12 Stunden ist. Falls dies nicht so ist, so ist das Ergebnis der Prüfung des TI-Zertifikats FAIL.<br/>]]></description_html>
  </requirement>
  <requirement id="A_21222" type="leafRequirement" severity="MUSS" lastUpdate="2021-03-26" technicalID="ML-114506" revision="539800">
    <title><![CDATA[E-Rezept-Client, allgemein Zertifikatsprüfung]]></title>
    <description><![CDATA[Ein E-Rezept-Client MUSS bevor er TI-X.509-Zertifikate in fachlichen Abläufen 
(bspw. VAU-Kanal) verwendet, diese Zertifikate prüfen (vgl. A_21216 und 
A_21218).]]></description>
    <description_html><![CDATA[Ein E-Rezept-Client MUSS bevor er TI-X.509-Zertifikate in fachlichen Abläufen (bspw. VAU-Kanal) verwendet, diese Zertifikate prüfen (vgl. A_21216 und A_21218).]]></description_html>
  </requirement>
  <requirement id="A_20161-01" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-111982" revision="539800">
    <title><![CDATA[E-Rezept-Client, Request-Erstellung]]></title>
    <description><![CDATA[Ein E-Rezept-Client MUSS, falls ihm noch kein gültiges E-Rezept-VAU-Zertifikat 
vorliegt, ein solches nach den fachlichen Vorgaben von A_20160-* beziehen (
/VAUCertificate).
 Ein E-Rezept-Client MUSS sicherstellen, dass gültige Sperrinformation 
(OCSP-Response mit Sperrstatus "good") für das Zertifikat vorliegen, die 
maximal 12 Stunden alt sind. Liegen diese nicht vor so MUSS der Client ein 
Verbindungsaufbau auf VAU-Protokoll-Ebene ablehnen/unterbinden.

 Ein E-Rezept-Client MUSS bei der Request-Erstellung folgende Schritte 
durchführen.

 * Er erzeugt einen HTTP-Request, den er an die VAU senden möchte, als 
Datenstruktur (vgl. Beispiele nach dieser Anforderung). 
 * Er erzeugt zufällig eine 128-Bit lange hexadezimalkodierte Request-ID (also 
32 Zeichen, Buchstaben a-f kleingeschrieben). 
 * Er erzeugt zufällig einen 128-Bit AES-Schlüssel (im Weiteren auch 
Antwortschlüssel genannt), den er hexadezimal kodiert (also 32 Zeichen, 
Buchstaben a-f kleingeschrieben). 
 * Er MUSS die Request-ID und den AES-Schlüssel für jeden HTTP-Request an die 
VAU zufällig neu erzeugen. 
 * Er erzeugt die folgende Zeichenkette p mit
 p="1" + " " + JWT-Authentisierungstoken + " " + Request-ID + " " + 
AES-Schlüssel + " " + Datenstruktur aus Schritt 1. 
 * Die Zeichenkette p MUSS mittels des ECIES-Verfahrens [SEC1-2009] und mit 
folgenden Vorgaben verschlüsselt werden: 
 * Er MUSS ein ephemeres ECDH-Schlüsselpaar erzeugen und mit diesem und dem 
VAU-Schlüssel aus A_20160-* ein ECDH gemäß [NIST-800-56-A] durchgeführen. Das 
somit erzeugte gemeinsame Geheimnis ist Grundlage für die folgende 
Schlüsselableitung. 
 * Als Schlüsselableitungsfunktion MUSS er die HKDF nach [RFC-5869] auf Basis 
von SHA-256 verwenden. 
 * Dabei MUSS er den Ableitungsvektor "ecies-vau-transport" verwenden, d. h. 
in der Fomulierung von [RFC-5869] info="ecies-vau-transport" . 
 * Er MUSS mit dieser Schlüsselableitung einen AES-128-Bit 
Content-Encryption-Key für die Verwendung von AES/GCM ableiten. 
 * Er MUSS für Verschlüsselung mittels AES/GCM einen 96 Bit langen IV zufällig 
erzeugen. 
 * Er MUSS mit dem CEK und dem IV mittels AES/GCM p verschlüsseln, wobei dabei 
ein 128 Bit langer Authentication-Tag zu verwenden ist. 
 * Er MUSS das Ergebnis wie folgt kodieren: chr(0x01) || <32 Byte X-Koordinate 
von öffentlichen Schlüssel aus (a) > || <32 Byte Y-Koordinate> || <12 Byte IV> 
|| <AES-GCM-Chiffrat> || <16 Byte AuthenticationTag> (vgl. auch Tab_KRYPT_ERP 
und folgende die Beispielverschlüsselung).
 Die Koordinaten sind (wie üblich) vorne mit chr(0) zu padden solange bis sie 
eine Kodierungslänge von 32 Byte erreichen. 
 * Er erzeugt einen HTTPS-Request an den FD mit der POST-Methode und dem Pfad 
/VAU/<Nutzerpseudonym>[/optional-beliebiger-weiterer-URL-Pfadteil] mit dem 
Content-Type 'application/octet-stream' und sendet diesen an die 
Webschnittstelle des FD.
 "Nutzerpseudonym" MUSS eine ggf. aus der vorherigen (zeitlich letzten) 
Antwort des FD dem Nutzer übergebene URL-sichere Zeichenkette sein (bspw. ein 
128 Byte langer Hexadezimal-Kode).
 Falls dem Client kein Nutzerpseudonym vorliegt so MUSS er "0" als 
Nutzerpseudonym verwenden.]]></description>
    <description_html><![CDATA[Ein E-Rezept-Client MUSS, falls ihm noch kein gültiges E-Rezept-VAU-Zertifikat vorliegt, ein solches nach den fachlichen Vorgaben von A_20160-*<span id="polarion-comment:497"></span> beziehen (<span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">/VAUCertificate</span><span style="font-family: Arial, Helvetica;">).<br/>
  Ein E-Rezept-Client MUSS sicherstellen, dass gültige Sperrinformation (OCSP-Response mit Sperrstatus &quot;good&quot;) für das Zertifikat vorliegen, die maximal 12 Stunden alt sind. Liegen diese nicht vor so MUSS der Client ein Verbindungsaufbau auf VAU-Protokoll-Ebene ablehnen/unterbinden.<br/>
  <br/>
  Ein E-Rezept-Client MUSS bei der Request-Erstellung folgende Schritte durchführen.</span><br/>
 
<ol>
  <li>Er erzeugt einen HTTP-Request, den er an die VAU senden möchte, als Datenstruktur (vgl. Beispiele nach dieser Anforderung).</li>
  <li>Er erzeugt zufällig eine 128-Bit lange hexadezimalkodierte Request-ID (also 32 Zeichen, Buchstaben a-f kleingeschrieben).</li>
  <li>Er erzeugt zufällig einen 128-Bit AES-Schlüssel (im Weiteren auch Antwortschlüssel genannt), den er hexadezimal kodiert (also 32 Zeichen, Buchstaben a-f kleingeschrieben).</li>
  <li>Er MUSS die Request-ID und den AES-Schlüssel für jeden HTTP-Request an die VAU zufällig neu erzeugen.</li>
  <li>Er erzeugt die folgende Zeichenkette p mit<br/>
    p=&quot;1&quot; + &quot; &quot; + JWT-Authentisierungstoken + &quot; &quot; + Request-ID + &quot; &quot; + AES-Schlüssel + &quot; &quot; + Datenstruktur aus Schritt 1.</li>
  <li>Die Zeichenkette p MUSS mittels des ECIES-Verfahrens [SEC1-2009] und mit folgenden Vorgaben verschlüsselt werden:</li>
  <ol>
    <li>Er MUSS ein ephemeres ECDH-Schlüsselpaar erzeugen und mit diesem und dem VAU-Schlüssel aus A_20160-* ein ECDH gemäß [NIST-800-56-A] durchgeführen. Das somit erzeugte gemeinsame Geheimnis ist Grundlage für die folgende Schlüsselableitung.</li>
    <li>Als Schlüsselableitungsfunktion MUSS er die HKDF nach [RFC-5869] auf Basis von SHA-256 verwenden.</li>
    <li>Dabei MUSS er den Ableitungsvektor &quot;ecies-vau-transport&quot; verwenden, d. h. in der Fomulierung von [RFC-5869] info=&quot;ecies-vau-transport&quot; .</li>
    <li>Er MUSS mit dieser Schlüsselableitung einen AES-128-Bit Content-Encryption-Key für die Verwendung von AES/GCM ableiten.</li>
    <li>Er MUSS für Verschlüsselung mittels AES/GCM einen 96 Bit langen IV zufällig erzeugen.</li>
    <li>Er MUSS mit dem CEK und dem IV mittels AES/GCM p verschlüsseln, wobei dabei ein 128 Bit langer Authentication-Tag zu verwenden ist.</li>
    <li>Er MUSS das Ergebnis wie folgt kodieren: chr(0x01) || &lt;32 Byte X-Koordinate von öffentlichen Schlüssel aus (a) &gt; || &lt;32 Byte Y-Koordinate&gt; || &lt;12 Byte IV&gt; || &lt;AES-GCM-Chiffrat&gt; || &lt;16 Byte AuthenticationTag&gt; (vgl. auch Tab_KRYPT_ERP und folgende die Beispielverschlüsselung).<br/>
      Die Koordinaten sind (wie üblich) vorne mit chr(0) zu padden solange bis sie eine Kodierungslänge von 32 Byte erreichen.</li>
  </ol>
  <li>Er erzeugt einen HTTPS-Request an den FD mit der POST-Methode und dem Pfad <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">/VAU/&lt;Nutzerpseudonym&gt;[/optional-beliebiger-weiterer-URL-Pfadteil]</span> mit dem Content-Type &#39;<span style="font-size: 10pt;line-height: 1.5;">application/octet-stream&#39; und sendet diesen an die Webschnittstelle des FD.<br/>
      &quot;Nutzerpseudonym&quot; MUSS eine ggf. aus der vorherigen (zeitlich letzten) Antwort des FD dem Nutzer übergebene URL-sichere Zeichenkette sein (bspw. ein 128 Byte langer Hexadezimal-Kode).<br/>
      Falls dem Client kein Nutzerpseudonym vorliegt so MUSS er &quot;0&quot; als Nutzerpseudonym verwenden.</span></li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_20162" type="leafRequirement" severity="MUSS" lastUpdate="2020-12-01" technicalID="ML-109254" revision="539800">
    <title><![CDATA[E-Rezept-FD, Webschnittstellen, VAU-Requests]]></title>
    <description><![CDATA[Der Fachdienst E-Rezept MUSS an seinen Webschnittstellen folgendes 
sicherstellen:

 * Er MUSS unter dem Pfad 
/VAU/<Nutzerpseudonym>[/optional-beliebiger-weiterer-URL-Pfadteil] (der URL) 
mit dem Content-Type 'application/octet-stream' HTTPS-Requests entgegennehmen 
(nach dem Nutzerpseudonym kann u. Um. ein "/" und anschließend weitere 
Pfadangaben vom Client angegeben werden, vgl. Beispiele unten). 
 * Er MUSS in der Webschnittstelle über einen AES-CMAC 128 Bit Schlüssel 
verfügen, der mindestens alle 10 Tage zufällig neu erzeugt wird. Dieser 
Schlüssel MUSS als reiner Software-Schlüssel (nicht in einem HSM) in der 
Webschnittstelle vorliegen. 
 * Er MUSS das Nutzerpseudonym (NP) auf Integrität (CMAC) prüfen (vgl. Schritt 
8). Ist die Integrität nicht gegeben, so MUSS er anstatt des übergebenen NP "0" 
als Wert verwenden. 
 * Er MUSS anhand des NP eine Lastverteilung innerhalb des FD und eine 
NP-zentrierte Lastbeschränkung durchführen.
 Im Lastszenario MÜSSEN Requests mit NP "0" mindestens 10 mal geringer 
priorisiert werden, als Requests mit gültigem NP. 
 * Er muss den Request zur Abarbeitung an einen geeigneten 
Verarbeitungskontext der VAU übergeben. 
 * Die VAU-Instanz muss eine verschlüsselte Antwort (vgl.  A_20163) erzeugen 
und an die Schnittstelle senden. 
 * In der Antwort der VAU-Instanz MUSS die VAU das Prenutzerpseudonym (PNP, 
vgl.  A_20163) als Teil der Antwort der VAU auf den Nutzer-Request an die 
Webschnittstelle übergeben. 
 * Er MUSS mittels des CMAC-Schlüssels (vgl.  Schritt 2) den 128-Bit-lange 
CMAC-Wert des PNP erzeugen und diesen hexadezimal kodieren (= CMAC). Die 
Zeichenkette "<PNP>" + "-" + "<CMAC>" sei das NP. 
 * Als Antwort MUSS  die Schnittstelle eine HTTP-Response senden mit dem 
Content-Type 'application/octet-stream', der Antwort der VAU-Instanz als 
Bytestrom (Octet-Stream) und im HTTP-Response-Header MUSS 'Userpseudonym: <NP>" 
enthalten sein.]]></description>
    <description_html><![CDATA[Der Fachdienst E-Rezept MUSS an seinen Webschnittstellen folgendes sicherstellen:<br/>
 
<ol>
  <li>Er MUSS unter dem Pfad <span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">/VAU/&lt;Nutzerpseudonym&gt;[/optional-beliebiger-weiterer-URL-Pfadteil]</span> (der URL) mit dem Content-Type &#39;<span style="font-size: 10pt;line-height: 1.5;">application/octet-stream&#39; </span>HTTPS-Requests entgegennehmen (nach dem Nutzerpseudonym kann u. Um. ein &quot;/&quot; und anschließend weitere Pfadangaben vom Client angegeben werden, vgl. Beispiele unten).</li>
  <li>Er MUSS in der Webschnittstelle über einen AES-CMAC 128 Bit Schlüssel verfügen, der mindestens alle 10 Tage zufällig neu erzeugt wird. Dieser Schlüssel MUSS als reiner Software-Schlüssel (nicht in einem HSM) in der Webschnittstelle vorliegen.</li>
  <li>Er MUSS das Nutzerpseudonym (NP) auf Integrität (CMAC) prüfen (vgl. Schritt 8). Ist die Integrität nicht gegeben, so MUSS er anstatt des übergebenen NP &quot;0&quot; als Wert verwenden.</li>
  <li>Er MUSS anhand des NP eine Lastverteilung innerhalb des FD und eine NP-zentrierte Lastbeschränkung durchführen.<br/>
    Im Lastszenario MÜSSEN Requests mit NP &quot;0&quot; mindestens 10 mal geringer priorisiert werden, als Requests mit gültigem NP.</li>
  <li>Er muss den Request zur Abarbeitung an einen geeigneten Verarbeitungskontext der VAU übergeben.</li>
  <li>Die VAU-Instanz muss eine verschlüsselte Antwort (vgl.  A_20163) erzeugen und an die Schnittstelle senden.</li>
  <li>In der Antwort der VAU-Instanz MUSS die VAU das Prenutzerpseudonym (PNP, vgl.  A_20163) als Teil der Antwort der VAU auf den Nutzer-Request an die Webschnittstelle übergeben.</li>
  <li>Er MUSS mittels des CMAC-Schlüssels (vgl.  Schritt 2) den 128-Bit-lange CMAC-Wert des PNP erzeugen und diesen hexadezimal kodieren (= CMAC). Die Zeichenkette &quot;&lt;PNP&gt;&quot; + &quot;-&quot; + &quot;&lt;CMAC&gt;&quot; sei das NP.</li>
  <li>Als Antwort MUSS  die Schnittstelle eine HTTP-Response senden mit dem Content-Type &#39;<span style="font-size: 10pt;line-height: 1.5;">application/octet-stream&#39;, der Antwort der VAU-Instanz als Bytestrom (Octet-Stream) und im HTTP-Response-Header MUSS &#39;Userpseudonym: &lt;NP&gt;&quot; enthalten sein.</span></li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_20163" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-109255" revision="539800">
    <title><![CDATA[E-Rezept-VAU, Nutzeranfrage, Ent- und Verschlüsselung]]></title>
    <description><![CDATA[Die E-Rezept-VAU MUSS das Folgende sicherstellen und im Falle eines 
Fehlschlagens die Abarbeitung des Requests mit einer entsprechenden 
Fehlermeldung an die sie aufrufende Webschnittstelle abbrechen.

 * Die E-Rezept-VAU MUSS einen verschlüsselten Nutzer-Request von der 
Webschnittstelle entgegennehmen. 
 * Die E-Rezept-VAU MUSS einen verschlüsselten Nutzer-Request nach den 
kryptographischen Vorgaben aus A_20161-* und mit dem privaten Schlüssel aus 
A_20160-* versuchen zu entschlüsseln. 
 * Die E-Rezept-VAU MUSS den erhaltenden Klartext p auf den Strukturaufbau aus 
A_20160-* prüfen. 
 * Die E-Rezept-VAU MUSS das JWT-Authentisierungstoken auf Gültigkeit prüfen. 
 * Die E-Rezept-VAU MUSS den in p kodieren HTTP-Request abarbeiten. 
 * Die E-Rezept-VAU MUSS einen 128-Bit-AES-CMAC-Schlüssel zufällig erzeugen 
und mindestens alle 10 Tage wechseln. 
 * Die E-Rezept-VAU MUSS aus dem "sub"-Feld-Wert mittels des CMAC-Schlüssels 
den 128 Bit langen CMAC-Wert berechnen und hexadezimal kodieren (32 Byte lang). 
Dies sei das Prenutzerpseudonym (PNP). 
 * Die Antwort "a" auf den HTTP-Request aus p MUSS wie folgt kodiert werden:
 a="1"  + " " + Request-ID-aus-p + " " + Response-Header-und-Body. 
 * Die E-Rezept-VAU MUSS a mittels des 128-Bit langen AES-Schlüssels aus p und 
AES/GCM (96 Bit zufällig erzeugter IV, 128 Authentication Tag) verschlüsseln 
und erhält c'. 
 * Die E-Rezept-VAU MUSS c' und das PNP an die Webschnittstelle als Antwort 
übergeben.]]></description>
    <description_html><![CDATA[Die E-Rezept-VAU MUSS das Folgende sicherstellen und im Falle eines Fehlschlagens die Abarbeitung des Requests mit einer entsprechenden Fehlermeldung an die sie aufrufende Webschnittstelle abbrechen.<br/>
 
<ol>
  <li>Die E-Rezept-VAU MUSS einen verschlüsselten Nutzer-Request von der Webschnittstelle entgegennehmen.</li>
  <li>Die E-Rezept-VAU MUSS einen verschlüsselten Nutzer-Request nach den kryptographischen Vorgaben aus A_20161-*<span id="polarion-comment:507"></span> und mit dem privaten Schlüssel aus A_20160-*<span id="polarion-comment:498"></span> versuchen zu entschlüsseln. </li>
  <li>Die E-Rezept-VAU MUSS den erhaltenden Klartext p auf den Strukturaufbau aus A_20160-*<span id="polarion-comment:499"></span> prüfen.</li>
  <li>Die E-Rezept-VAU MUSS das JWT-Authentisierungstoken auf Gültigkeit prüfen.</li>
  <li>Die E-Rezept-VAU MUSS den in p kodieren HTTP-Request abarbeiten.</li>
  <li>Die E-Rezept-VAU MUSS einen 128-Bit-AES-CMAC-Schlüssel zufällig erzeugen und mindestens alle 10 Tage wechseln.</li>
  <li>Die E-Rezept-VAU MUSS aus dem &quot;sub&quot;-Feld-Wert mittels des CMAC-Schlüssels den 128 Bit langen CMAC-Wert berechnen und hexadezimal kodieren (32 Byte lang). Dies sei das Prenutzerpseudonym (PNP).</li>
  <li>Die Antwort &quot;a&quot; auf den HTTP-Request aus p MUSS wie folgt kodiert werden:<br/>
    a=&quot;1&quot;  + &quot; &quot; + Request-ID-aus-p + &quot; &quot; + Response-Header-und-Body.</li>
  <li>Die E-Rezept-VAU MUSS a mittels des 128-Bit langen AES-Schlüssels aus p und AES/GCM (96 Bit zufällig erzeugter IV, 128 Authentication Tag) verschlüsseln und erhält c&#39;.</li>
  <li>Die E-Rezept-VAU MUSS c&#39; und das PNP an die Webschnittstelle als Antwort übergeben.</li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_20174" type="leafRequirement" severity="MUSS" lastUpdate="2022-12-06" technicalID="ML-109355" revision="539800">
    <title><![CDATA[E-Rezept-Client, Response-Auswertung]]></title>
    <description><![CDATA[Ein E-Rezept-Client MUSS bei der Response-Auswertung (vgl. vorgehenden 
Client-Request aus A_20161-*) folgende Schritte durchführen. Dabei MUSS der 
Client bei Fehlschlagens im Folgenden aufgeführten Prüfungen die Analyse der 
Response abbrechen, und er MUSS die Request-ID und den AES-Antwortschlüssel 
sicher löschen.

 * Er MUSS prüfen, ob der Content-Type der Response 'application/octet-stream' 
ist. 
 * Wenn im Response-Header die Variable "Userpseudonym" vorhanden ist, so MUSS 
er den Wert von "Userpseudonym" als NP für den nächsten Request an die VAU 
verwenden. (Der Client MUSS einen ggf. vorhandenen alten Wert des NP im Client 
überschrieben.) 
 * Er MUSS das Antwort-Chiffrat mit den Vorgaben aus A_20163 (9) und dem 
AES-Antwort entschlüsseln und prüfen ob die Entschlüsselung erfolgreich möglich 
war. 
 * Er MUSS prüfen, ob die Struktur des erhaltenen Klartextes p der Struktur 
aus A_20163 (8) entspricht. 
 * Er MUSS  prüfen, ob die Request-ID in p der Request-ID aus dem 
Client-Request entspricht (Gleichheit prüfen). 
 * Er MUSS das dritte Feld-Element in p ("Response-Header-und-Body") als 
HTTP-Antwort der E-Rezept-VAU in fachlich weiter verarbeiten.]]></description>
    <description_html><![CDATA[Ein E-Rezept-Client MUSS bei der Response-Auswertung (vgl. vorgehenden Client-Request aus A_20161-*)<span id="polarion-comment:508"></span> folgende Schritte durchführen. Dabei MUSS der Client bei Fehlschlagens im Folgenden aufgeführten Prüfungen die Analyse der Response abbrechen, und er MUSS die Request-ID und den AES-Antwortschlüssel sicher löschen.<br/>
 
<ol>
  <li>Er MUSS prüfen, ob der Content-Type der Response &#39;<span style="font-size: 10pt;line-height: 1.5;">application/octet-stream&#39; ist.</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Wenn im Response-Header die Variable &quot;Userpseudonym&quot; vorhanden ist, so MUSS er den Wert von &quot;Userpseudonym&quot; als NP für den nächsten Request an die VAU verwenden. (Der Client MUSS einen ggf. vorhandenen alten Wert des NP im Client überschrieben.)</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Er MUSS das Antwort-Chiffrat mit den Vorgaben aus A_20163 (9) und dem AES-Antwort entschlüsseln und prüfen ob die Entschlüsselung erfolgreich möglich war.</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Er MUSS prüfen, ob die Struktur des erhaltenen Klartextes p der Struktur aus A_20163 (8) entspricht.</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Er MUSS  prüfen, ob die Request-ID in p der Request-ID aus dem Client-Request entspricht (Gleichheit prüfen).</span></li>
  <li><span style="font-size: 10pt;line-height: 1.5;">Er MUSS das dritte Feld-Element in p (&quot;Response-Header-und-Body&quot;) als HTTP-Antwort der E-Rezept-VAU in fachlich weiter verarbeiten.</span></li>
</ol>]]></description_html>
  </requirement>
  <requirement id="A_20175" type="leafRequirement" severity="MUSS" lastUpdate="2021-05-04" technicalID="ML-109356" revision="539800">
    <title><![CDATA[E-Rezept-Client, Speicherung  Nutzerpseudonym]]></title>
    <description><![CDATA[Ein E-Rezept-Client MUSS das im Request verwendete Nutzerpseudonym (NP) in 
Software speichern (kein HSM/TPM/SE) und das NP ausschließlich für seinen 
Einsatzzweck der E-Rezept-VAU-Kommunikation verwenden. Insbesondere MUSS der 
Client die Vertraulichkeit des NP wahren (bspw. nicht unnötig in 
Protokolleinträgen und Fehlermeldungen aufführen).]]></description>
    <description_html><![CDATA[Ein E-Rezept-Client MUSS das im Request verwendete Nutzerpseudonym (NP) in Software speichern (kein HSM/TPM/SE) und das NP ausschließlich für seinen Einsatzzweck der E-Rezept-VAU-Kommunikation verwenden. Insbesondere MUSS der Client die Vertraulichkeit des NP wahren (bspw. nicht unnötig in Protokolleinträgen und Fehlermeldungen aufführen).]]></description_html>
  </requirement>
  <requirement id="A_21215" type="leafRequirement" severity="MUSS" lastUpdate="2021-01-28" technicalID="ML-114470" revision="539800">
    <title><![CDATA[E-Rezept-FD, Random-Operation]]></title>
    <description><![CDATA[Der Fachdienst E-Rezept MUSS an seiner Webschnittstelle (HTTPS) unter der URL 
/Random (GET-Methode) 128 Byte Zufallsdaten hexadezimalkodiert (Lower-Case -- 
[0-9a-f]) einen Client zur Verfügung stellen. Bei jedem Request MÜSSEN die 
Zufallsdaten neu erzeugt werden. Die Response MUSS den Content-Type 
application/json besitzen.
 Teil einer Beispiel-Response:

Content-length: 258 
 Content-type: application/json 
 Date: Tue,01 Dec 2020 12:46:18 GMT 
 Server: nginx/1.14.0 (Ubuntu)

 
"a5dc9d13ee2e76ddd9b75e9c28421fc4b5a9a131751a3dad1203f8d1b149366ef938163d43718f31fe5464e05f236ba62588cea48ff8cdb9f77abe52a03a389f8a2573127c7062974238714e457399cfc9fcd7eeb656c2cfd3bf50fb1d74b4cd5c73607283533f423760c2e38a3fd646602ef244d4dbdb332c8f696b5e07ef51"]]></description>
    <description_html><![CDATA[<span style="font-size: 10pt;line-height: 1.5;">Der Fachdienst E-Rezept MUSS an seiner Webschnittstelle (HTTPS) unter der URL /Random (GET-Methode) 128 Byte Zufallsdaten hexadezimalkodiert (Lower-Case -- [0-9a-f]) einen Client zur Verfügung stellen. Bei jedem Request MÜSSEN die Zufallsdaten neu erzeugt werden. Die Response MUSS den Content-Type application/json besitzen.<br/>
  Teil einer Beispiel-Response:<br/>
  <br/>
  </span><span style="font-family: &#39;Courier New&#39;, Courier, monospace, HanWangKanTan;">Content-length: 258 <br/>
  Content-type: application/json <br/>
  Date: Tue,01 Dec 2020 12:46:18 GMT <br/>
  Server: nginx/1.14.0 (Ubuntu)<br/>
  <br/>
  &quot;a5dc9d13ee2e76ddd9b75e9c28421fc4b5a9a131751a3dad1203f8d1b149366ef938163d43718f31fe5464e05f236ba62588cea48ff8cdb9f77abe52a03a389f8a2573127c7062974238714e457399cfc9fcd7eeb656c2cfd3bf50fb1d74b4cd5c73607283533f423760c2e38a3fd646602ef244d4dbdb332c8f696b5e07ef51&quot;</span><br/>]]></description_html>
  </requirement>
</requirements>
